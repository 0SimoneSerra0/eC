{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/lib/graphql/resolvers/product.resolver.ts"],"sourcesContent":["import { Resolver, Query, ObjectType, Field, ID } from \"type-graphql\"\n\n\nexport interface Review {\n  user: string;\n  date: string;\n  content: string;\n  stars: number;\n}\n\n\n@ObjectType()\nclass Product {\n  @Field(() => ID)\n  id!: string\n\n  @Field()\n  name!: string\n\n  @Field()\n  price!: number\n\n  @Field()\n  description!: string\n\n  @Field()\n  rating!: number\n\n  @Field()\n  img!: ImageData\n\n  @Field()\n  reviews!: Review[]\n}\n\n@Resolver(Product)\nexport class ProductResolver {\n  @Query(() => [Product])\n  products(): Product[] {\n    return [\n      { id: \"1\", name: \"MacBook Pro\" },\n      { id: \"2\", name: \"iPhone 15\" },\n    ]\n  }\n}"],"names":[],"mappings":";;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAWA,MACM;IAEJ,GAAW;IAGX,KAAa;IAGb,MAAc;IAGd,YAAoB;IAGpB,OAAe;IAGf,IAAe;IAGf,QAAkB;AACpB;;+LApBe,uKAAA,CAAA,KAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBV,MAAM;IAEX,WAAsB;QACpB,OAAO;YACL;gBAAE,IAAI;gBAAK,MAAM;YAAc;YAC/B;gBAAE,IAAI;gBAAK,MAAM;YAAY;SAC9B;IACH;AACF;;+LAPe;YAAC;SAAQ","debugId":null}},
    {"offset": {"line": 261, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/lib/graphql/schema.ts"],"sourcesContent":["import \"reflect-metadata\"\nimport { buildSchema } from \"type-graphql\"\nimport { ProductResolver } from \"./resolvers/product.resolver\" \n\nexport const createSchema = () => {\n  return buildSchema({\n    resolvers: [ProductResolver],\n    emitSchemaFile: false,\n  })\n}"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;;;;AAEO,MAAM,eAAe;IAC1B,OAAO,CAAA,GAAA,yKAAA,CAAA,cAAW,AAAD,EAAE;QACjB,WAAW;YAAC,2JAAA,CAAA,kBAAe;SAAC;QAC5B,gBAAgB;IAClB;AACF","debugId":null}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/app/api/graphql/route.ts"],"sourcesContent":["import { createYoga } from \"graphql-yoga\"\nimport { NextRequest } from \"next/server\"\nimport { createSchema } from \"@/lib/graphql/schema\"\n\nconst yoga = createYoga<{\n  req: NextRequest\n}>({\n  schema: await createSchema(),\n  graphqlEndpoint: \"/api/graphql\",\n  fetchAPI: { Request, Response },\n})\n\nexport { yoga as GET, yoga as POST }"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAEA,MAAM,OAAO,CAAA,GAAA,kJAAA,CAAA,aAAU,AAAD,EAEnB;IACD,QAAQ,MAAM,CAAA,GAAA,iIAAA,CAAA,eAAY,AAAD;IACzB,iBAAiB;IACjB,UAAU;QAAE;QAAS;IAAS;AAChC","debugId":null}}]
}