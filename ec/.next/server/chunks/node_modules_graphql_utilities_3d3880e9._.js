module.exports = {

"[project]/node_modules/graphql/utilities/assertValidName.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "assertValidName": ()=>assertValidName,
    "isValidNameError": ()=>isValidNameError
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$devAssert$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/devAssert.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/error/GraphQLError.mjs [app-route] (ecmascript)");
;
;
var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
function assertValidName(name) {
    var error = isValidNameError(name);
    if (error) {
        throw error;
    }
    return name;
}
function isValidNameError(name) {
    typeof name === 'string' || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$devAssert$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Expected name to be a string.');
    if (name.length > 1 && name[0] === '_' && name[1] === '_') {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]("Name \"".concat(name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."));
    }
    if (!NAME_RX.test(name)) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]("Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"".concat(name, "\" does not."));
    }
}
}),
"[project]/node_modules/graphql/utilities/valueFromASTUntyped.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "valueFromASTUntyped": ()=>valueFromASTUntyped
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/keyValMap.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
;
;
;
;
function valueFromASTUntyped(valueNode, variables) {
    switch(valueNode.kind){
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NULL:
            return null;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].INT:
            return parseInt(valueNode.value, 10);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].FLOAT:
            return parseFloat(valueNode.value);
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].STRING:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].ENUM:
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].BOOLEAN:
            return valueNode.value;
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].LIST:
            return valueNode.values.map(function(node) {
                return valueFromASTUntyped(node, variables);
            });
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OBJECT:
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(valueNode.fields, function(field) {
                return field.name.value;
            }, function(field) {
                return valueFromASTUntyped(field.value, variables);
            });
        case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].VARIABLE:
            return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
    } // istanbul ignore next (Not reachable. All possible value nodes have been considered)
    false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected value node: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(valueNode));
}
}),
"[project]/node_modules/graphql/utilities/typeComparators.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "doTypesOverlap": ()=>doTypesOverlap,
    "isEqualType": ()=>isEqualType,
    "isTypeSubTypeOf": ()=>isTypeSubTypeOf
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
;
function isEqualType(typeA, typeB) {
    // Equivalent types are equal.
    if (typeA === typeB) {
        return true;
    } // If either type is non-null, the other must also be non-null.
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(typeA) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
    } // If either type is a list, the other must also be a list.
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(typeA) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
    } // Otherwise the types are not equal.
    return false;
}
function isTypeSubTypeOf(schema, maybeSubType, superType) {
    // Equivalent type is a valid subtype
    if (maybeSubType === superType) {
        return true;
    } // If superType is non-null, maybeSubType must also be non-null.
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(superType)) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(maybeSubType)) {
            return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }
        return false;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(maybeSubType)) {
        // If superType is nullable, maybeSubType may be non-null or nullable.
        return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
    } // If superType type is a list, maybeSubType type must also be a list.
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(superType)) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(maybeSubType)) {
            return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }
        return false;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(maybeSubType)) {
        // If superType is not a list, maybeSubType must also be not a list.
        return false;
    } // If superType type is an abstract type, check if it is super type of maybeSubType.
    // Otherwise, the child type is not a valid subtype of the parent type.
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAbstractType"])(superType) && ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInterfaceType"])(maybeSubType) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(maybeSubType)) && schema.isSubType(superType, maybeSubType);
}
function doTypesOverlap(schema, typeA, typeB) {
    // Equivalent types overlap
    if (typeA === typeB) {
        return true;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAbstractType"])(typeA)) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAbstractType"])(typeB)) {
            // If both types are abstract, then determine if there is any intersection
            // between possible concrete types of each.
            return schema.getPossibleTypes(typeA).some(function(type) {
                return schema.isSubType(typeB, type);
            });
        } // Determine if the latter type is a possible concrete type of the former.
        return schema.isSubType(typeA, typeB);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isAbstractType"])(typeB)) {
        // Determine if the former type is a possible concrete type of the latter.
        return schema.isSubType(typeB, typeA);
    } // Otherwise the types do not overlap.
    return false;
}
}),
"[project]/node_modules/graphql/utilities/astFromValue.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "astFromValue": ()=>astFromValue
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$isFinite$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/isFinite.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$arrayFrom$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/arrayFrom.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/objectValues.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isObjectLike$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/isObjectLike.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isCollection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/isCollection.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/scalars.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
function astFromValue(value, type) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(type)) {
        var astValue = astFromValue(value, type.ofType);
        if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NULL) {
            return null;
        }
        return astValue;
    } // only explicit null, not undefined, NaN
    if (value === null) {
        return {
            kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NULL
        };
    } // undefined
    if (value === undefined) {
        return null;
    } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
    // the value is not an array, convert the value using the list's item type.
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(type)) {
        var itemType = type.ofType;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isCollection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(value)) {
            var valuesNodes = []; // Since we transpile for-of in loose mode it doesn't support iterators
            // and it's required to first convert iteratable into array
            for(var _i2 = 0, _arrayFrom2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$arrayFrom$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(value); _i2 < _arrayFrom2.length; _i2++){
                var item = _arrayFrom2[_i2];
                var itemNode = astFromValue(item, itemType);
                if (itemNode != null) {
                    valuesNodes.push(itemNode);
                }
            }
            return {
                kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].LIST,
                values: valuesNodes
            };
        }
        return astFromValue(value, itemType);
    } // Populate the fields of the input object by creating ASTs from each value
    // in the JavaScript object according to the fields in the input type.
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(type)) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isObjectLike$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(value)) {
            return null;
        }
        var fieldNodes = [];
        for(var _i4 = 0, _objectValues2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type.getFields()); _i4 < _objectValues2.length; _i4++){
            var field = _objectValues2[_i4];
            var fieldValue = astFromValue(value[field.name], field.type);
            if (fieldValue) {
                fieldNodes.push({
                    kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OBJECT_FIELD,
                    name: {
                        kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NAME,
                        value: field.name
                    },
                    value: fieldValue
                });
            }
        }
        return {
            kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OBJECT,
            fields: fieldNodes
        };
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isLeafType"])(type)) {
        // Since value is an internally represented value, it must be serialized
        // to an externally represented value before converting into an AST.
        var serialized = type.serialize(value);
        if (serialized == null) {
            return null;
        } // Others serialize based on their corresponding JavaScript scalar types.
        if (typeof serialized === 'boolean') {
            return {
                kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].BOOLEAN,
                value: serialized
            };
        } // JavaScript numbers can be Int or Float values.
        if (typeof serialized === 'number' && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$isFinite$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(serialized)) {
            var stringNum = String(serialized);
            return integerStringRegExp.test(stringNum) ? {
                kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].INT,
                value: stringNum
            } : {
                kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].FLOAT,
                value: stringNum
            };
        }
        if (typeof serialized === 'string') {
            // Enum types use Enum literals.
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isEnumType"])(type)) {
                return {
                    kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].ENUM,
                    value: serialized
                };
            } // ID types can use Int literals.
            if (type === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLID"] && integerStringRegExp.test(serialized)) {
                return {
                    kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].INT,
                    value: serialized
                };
            }
            return {
                kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].STRING,
                value: serialized
            };
        }
        throw new TypeError("Cannot convert value to AST: ".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(serialized), "."));
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected input type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type));
}
/**
 * IntValue:
 *   - NegativeSign? 0
 *   - NegativeSign? NonZeroDigit ( Digit+ )?
 */ var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
}),
"[project]/node_modules/graphql/utilities/typeFromAST.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "typeFromAST": ()=>typeFromAST
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
;
;
;
;
function typeFromAST(schema, typeNode) {
    /* eslint-enable no-redeclare */ var innerType;
    if (typeNode.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].LIST_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLList"])(innerType);
    }
    if (typeNode.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NON_NULL_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLNonNull"])(innerType);
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (typeNode.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NAMED_TYPE) {
        return schema.getType(typeNode.name.value);
    } // istanbul ignore next (Not reachable. All possible type nodes have been considered)
    false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected type node: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(typeNode));
}
}),
"[project]/node_modules/graphql/utilities/TypeInfo.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "TypeInfo": ()=>TypeInfo,
    "visitWithTypeInfo": ()=>visitWithTypeInfo
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$find$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/find.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$ast$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/ast.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$visitor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/visitor.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/introspection.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$typeFromAST$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/utilities/typeFromAST.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
var TypeInfo = /*#__PURE__*/ function() {
    function TypeInfo(schema, // to support non-spec-compliant code bases. You should never need to use it.
    // It may disappear in the future.
    getFieldDefFn, // beginning somewhere other than documents.
    initialType) {
        this._schema = schema;
        this._typeStack = [];
        this._parentTypeStack = [];
        this._inputTypeStack = [];
        this._fieldDefStack = [];
        this._defaultValueStack = [];
        this._directive = null;
        this._argument = null;
        this._enumValue = null;
        this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
        if (initialType) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputType"])(initialType)) {
                this._inputTypeStack.push(initialType);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isCompositeType"])(initialType)) {
                this._parentTypeStack.push(initialType);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isOutputType"])(initialType)) {
                this._typeStack.push(initialType);
            }
        }
    }
    var _proto = TypeInfo.prototype;
    _proto.getType = function getType() {
        if (this._typeStack.length > 0) {
            return this._typeStack[this._typeStack.length - 1];
        }
    };
    _proto.getParentType = function getParentType() {
        if (this._parentTypeStack.length > 0) {
            return this._parentTypeStack[this._parentTypeStack.length - 1];
        }
    };
    _proto.getInputType = function getInputType() {
        if (this._inputTypeStack.length > 0) {
            return this._inputTypeStack[this._inputTypeStack.length - 1];
        }
    };
    _proto.getParentInputType = function getParentInputType() {
        if (this._inputTypeStack.length > 1) {
            return this._inputTypeStack[this._inputTypeStack.length - 2];
        }
    };
    _proto.getFieldDef = function getFieldDef() {
        if (this._fieldDefStack.length > 0) {
            return this._fieldDefStack[this._fieldDefStack.length - 1];
        }
    };
    _proto.getDefaultValue = function getDefaultValue() {
        if (this._defaultValueStack.length > 0) {
            return this._defaultValueStack[this._defaultValueStack.length - 1];
        }
    };
    _proto.getDirective = function getDirective() {
        return this._directive;
    };
    _proto.getArgument = function getArgument() {
        return this._argument;
    };
    _proto.getEnumValue = function getEnumValue() {
        return this._enumValue;
    };
    _proto.enter = function enter(node) {
        var schema = this._schema; // Note: many of the types below are explicitly typed as "mixed" to drop
        // any assumptions of a valid schema to ensure runtime types are properly
        // checked before continuing since TypeInfo is used as part of validation
        // which occurs before guarantees of schema and document validity.
        switch(node.kind){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].SELECTION_SET:
                {
                    var namedType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getNamedType"])(this.getType());
                    this._parentTypeStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isCompositeType"])(namedType) ? namedType : undefined);
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].FIELD:
                {
                    var parentType = this.getParentType();
                    var fieldDef;
                    var fieldType;
                    if (parentType) {
                        fieldDef = this._getFieldDef(schema, parentType, node);
                        if (fieldDef) {
                            fieldType = fieldDef.type;
                        }
                    }
                    this._fieldDefStack.push(fieldDef);
                    this._typeStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isOutputType"])(fieldType) ? fieldType : undefined);
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].DIRECTIVE:
                this._directive = schema.getDirective(node.name.value);
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OPERATION_DEFINITION:
                {
                    var type;
                    switch(node.operation){
                        case 'query':
                            type = schema.getQueryType();
                            break;
                        case 'mutation':
                            type = schema.getMutationType();
                            break;
                        case 'subscription':
                            type = schema.getSubscriptionType();
                            break;
                    }
                    this._typeStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(type) ? type : undefined);
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].INLINE_FRAGMENT:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].FRAGMENT_DEFINITION:
                {
                    var typeConditionAST = node.typeCondition;
                    var outputType = typeConditionAST ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$typeFromAST$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["typeFromAST"])(schema, typeConditionAST) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getNamedType"])(this.getType());
                    this._typeStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isOutputType"])(outputType) ? outputType : undefined);
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].VARIABLE_DEFINITION:
                {
                    var inputType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$typeFromAST$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["typeFromAST"])(schema, node.type);
                    this._inputTypeStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputType"])(inputType) ? inputType : undefined);
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].ARGUMENT:
                {
                    var _this$getDirective;
                    var argDef;
                    var argType;
                    var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
                    if (fieldOrDirective) {
                        argDef = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$find$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(fieldOrDirective.args, function(arg) {
                            return arg.name === node.name.value;
                        });
                        if (argDef) {
                            argType = argDef.type;
                        }
                    }
                    this._argument = argDef;
                    this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);
                    this._inputTypeStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputType"])(argType) ? argType : undefined);
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].LIST:
                {
                    var listType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getNullableType"])(this.getInputType());
                    var itemType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(listType) ? listType.ofType : listType; // List positions never have a default value.
                    this._defaultValueStack.push(undefined);
                    this._inputTypeStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputType"])(itemType) ? itemType : undefined);
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OBJECT_FIELD:
                {
                    var objectType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getNamedType"])(this.getInputType());
                    var inputFieldType;
                    var inputField;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(objectType)) {
                        inputField = objectType.getFields()[node.name.value];
                        if (inputField) {
                            inputFieldType = inputField.type;
                        }
                    }
                    this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);
                    this._inputTypeStack.push((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputType"])(inputFieldType) ? inputFieldType : undefined);
                    break;
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].ENUM:
                {
                    var enumType = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getNamedType"])(this.getInputType());
                    var enumValue;
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isEnumType"])(enumType)) {
                        enumValue = enumType.getValue(node.value);
                    }
                    this._enumValue = enumValue;
                    break;
                }
        }
    };
    _proto.leave = function leave(node) {
        switch(node.kind){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].SELECTION_SET:
                this._parentTypeStack.pop();
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].FIELD:
                this._fieldDefStack.pop();
                this._typeStack.pop();
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].DIRECTIVE:
                this._directive = null;
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OPERATION_DEFINITION:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].INLINE_FRAGMENT:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].FRAGMENT_DEFINITION:
                this._typeStack.pop();
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].VARIABLE_DEFINITION:
                this._inputTypeStack.pop();
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].ARGUMENT:
                this._argument = null;
                this._defaultValueStack.pop();
                this._inputTypeStack.pop();
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].LIST:
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OBJECT_FIELD:
                this._defaultValueStack.pop();
                this._inputTypeStack.pop();
                break;
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].ENUM:
                this._enumValue = null;
                break;
        }
    };
    return TypeInfo;
}();
/**
 * Not exactly the same as the executor's definition of getFieldDef, in this
 * statically evaluated environment we do not always have an Object type,
 * and need to handle Interface and Union types.
 */ function getFieldDef(schema, parentType, fieldNode) {
    var name = fieldNode.name.value;
    if (name === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SchemaMetaFieldDef"].name && schema.getQueryType() === parentType) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["SchemaMetaFieldDef"];
    }
    if (name === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeMetaFieldDef"].name && schema.getQueryType() === parentType) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeMetaFieldDef"];
    }
    if (name === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeNameMetaFieldDef"].name && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isCompositeType"])(parentType)) {
        return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeNameMetaFieldDef"];
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(parentType) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInterfaceType"])(parentType)) {
        return parentType.getFields()[name];
    }
}
function visitWithTypeInfo(typeInfo, visitor) {
    return {
        enter: function enter(node) {
            typeInfo.enter(node);
            var fn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$visitor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getVisitFn"])(visitor, node.kind, /* isLeaving */ false);
            if (fn) {
                var result = fn.apply(visitor, arguments);
                if (result !== undefined) {
                    typeInfo.leave(node);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$ast$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNode"])(result)) {
                        typeInfo.enter(result);
                    }
                }
                return result;
            }
        },
        leave: function leave(node) {
            var fn = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$visitor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getVisitFn"])(visitor, node.kind, /* isLeaving */ true);
            var result;
            if (fn) {
                result = fn.apply(visitor, arguments);
            }
            typeInfo.leave(node);
            return result;
        }
    };
}
}),
"[project]/node_modules/graphql/utilities/getOperationRootType.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "getOperationRootType": ()=>getOperationRootType
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/error/GraphQLError.mjs [app-route] (ecmascript)");
;
function getOperationRootType(schema, operation) {
    if (operation.operation === 'query') {
        var queryType = schema.getQueryType();
        if (!queryType) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]('Schema does not define the required query root type.', operation);
        }
        return queryType;
    }
    if (operation.operation === 'mutation') {
        var mutationType = schema.getMutationType();
        if (!mutationType) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]('Schema is not configured for mutations.', operation);
        }
        return mutationType;
    }
    if (operation.operation === 'subscription') {
        var subscriptionType = schema.getSubscriptionType();
        if (!subscriptionType) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]('Schema is not configured for subscriptions.', operation);
        }
        return subscriptionType;
    }
    throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]('Can only have query, mutation and subscription operations.', operation);
}
}),
"[project]/node_modules/graphql/utilities/valueFromAST.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "valueFromAST": ()=>valueFromAST
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/objectValues.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/keyMap.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
function valueFromAST(valueNode, type, variables) {
    if (!valueNode) {
        // When there is no node, then there is also no value.
        // Importantly, this is different from returning the value null.
        return;
    }
    if (valueNode.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].VARIABLE) {
        var variableName = valueNode.name.value;
        if (variables == null || variables[variableName] === undefined) {
            // No valid return value.
            return;
        }
        var variableValue = variables[variableName];
        if (variableValue === null && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(type)) {
            return; // Invalid: intentionally return no value.
        } // Note: This does no further checking that this variable is correct.
        // This assumes that this query has been validated and the variable
        // usage here is of the correct type.
        return variableValue;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(type)) {
        if (valueNode.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NULL) {
            return; // Invalid: intentionally return no value.
        }
        return valueFromAST(valueNode, type.ofType, variables);
    }
    if (valueNode.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NULL) {
        // This is explicitly returning the value null.
        return null;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(type)) {
        var itemType = type.ofType;
        if (valueNode.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].LIST) {
            var coercedValues = [];
            for(var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++){
                var itemNode = _valueNode$values2[_i2];
                if (isMissingVariable(itemNode, variables)) {
                    // If an array contains a missing variable, it is either coerced to
                    // null or if the item type is non-null, it considered invalid.
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(itemType)) {
                        return; // Invalid: intentionally return no value.
                    }
                    coercedValues.push(null);
                } else {
                    var itemValue = valueFromAST(itemNode, itemType, variables);
                    if (itemValue === undefined) {
                        return; // Invalid: intentionally return no value.
                    }
                    coercedValues.push(itemValue);
                }
            }
            return coercedValues;
        }
        var coercedValue = valueFromAST(valueNode, itemType, variables);
        if (coercedValue === undefined) {
            return; // Invalid: intentionally return no value.
        }
        return [
            coercedValue
        ];
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(type)) {
        if (valueNode.kind !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OBJECT) {
            return; // Invalid: intentionally return no value.
        }
        var coercedObj = Object.create(null);
        var fieldNodes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(valueNode.fields, function(field) {
            return field.name.value;
        });
        for(var _i4 = 0, _objectValues2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type.getFields()); _i4 < _objectValues2.length; _i4++){
            var field = _objectValues2[_i4];
            var fieldNode = fieldNodes[field.name];
            if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
                if (field.defaultValue !== undefined) {
                    coercedObj[field.name] = field.defaultValue;
                } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(field.type)) {
                    return; // Invalid: intentionally return no value.
                }
                continue;
            }
            var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
            if (fieldValue === undefined) {
                return; // Invalid: intentionally return no value.
            }
            coercedObj[field.name] = fieldValue;
        }
        return coercedObj;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isLeafType"])(type)) {
        // Scalars and Enums fulfill parsing a literal value via parseLiteral().
        // Invalid values represent a failure to parse correctly, in which case
        // no value is returned.
        var result;
        try {
            result = type.parseLiteral(valueNode, variables);
        } catch (_error) {
            return; // Invalid: intentionally return no value.
        }
        if (result === undefined) {
            return; // Invalid: intentionally return no value.
        }
        return result;
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected input type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type));
} // Returns true if the provided valueNode is a variable which is not defined
// in the set of variables.
function isMissingVariable(valueNode, variables) {
    return valueNode.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);
}
}),
"[project]/node_modules/graphql/utilities/coerceInputValue.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "coerceInputValue": ()=>coerceInputValue
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$arrayFrom$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/arrayFrom.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/objectValues.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$didYouMean$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/didYouMean.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isObjectLike$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/isObjectLike.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isCollection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/isCollection.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$suggestionList$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/suggestionList.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$printPathArray$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/printPathArray.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/Path.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/error/GraphQLError.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
function coerceInputValue(inputValue, type) {
    var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;
    return coerceInputValueImpl(inputValue, type, onError);
}
function defaultOnError(path, invalidValue, error) {
    var errorPrefix = 'Invalid value ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(invalidValue);
    if (path.length > 0) {
        errorPrefix += " at \"value".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$printPathArray$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(path), "\"");
    }
    error.message = errorPrefix + ': ' + error.message;
    throw error;
}
function coerceInputValueImpl(inputValue, type, onError, path) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(type)) {
        if (inputValue != null) {
            return coerceInputValueImpl(inputValue, type.ofType, onError, path);
        }
        onError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["pathToArray"])(path), inputValue, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]("Expected non-nullable type \"".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type), "\" not to be null.")));
        return;
    }
    if (inputValue == null) {
        // Explicitly return the value null.
        return null;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(type)) {
        var itemType = type.ofType;
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isCollection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(inputValue)) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$arrayFrom$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(inputValue, function(itemValue, index) {
                var itemPath = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["addPath"])(path, index, undefined);
                return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
            });
        } // Lists accept a non-list value as a list of one.
        return [
            coerceInputValueImpl(inputValue, itemType, onError, path)
        ];
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(type)) {
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isObjectLike$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(inputValue)) {
            onError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["pathToArray"])(path), inputValue, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]("Expected type \"".concat(type.name, "\" to be an object.")));
            return;
        }
        var coercedValue = {};
        var fieldDefs = type.getFields();
        for(var _i2 = 0, _objectValues2 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(fieldDefs); _i2 < _objectValues2.length; _i2++){
            var field = _objectValues2[_i2];
            var fieldValue = inputValue[field.name];
            if (fieldValue === undefined) {
                if (field.defaultValue !== undefined) {
                    coercedValue[field.name] = field.defaultValue;
                } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(field.type)) {
                    var typeStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(field.type);
                    onError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["pathToArray"])(path), inputValue, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]("Field \"".concat(field.name, "\" of required type \"").concat(typeStr, "\" was not provided.")));
                }
                continue;
            }
            coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["addPath"])(path, field.name, type.name));
        } // Ensure every provided field is defined.
        for(var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++){
            var fieldName = _Object$keys2[_i4];
            if (!fieldDefs[fieldName]) {
                var suggestions = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$suggestionList$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(fieldName, Object.keys(type.getFields()));
                onError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["pathToArray"])(path), inputValue, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]("Field \"".concat(fieldName, "\" is not defined by type \"").concat(type.name, "\".") + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$didYouMean$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(suggestions)));
            }
        }
        return coercedValue;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isLeafType"])(type)) {
        var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
        // which can throw to indicate failure. If it throws, maintain a reference
        // to the original error.
        try {
            parseResult = type.parseValue(inputValue);
        } catch (error) {
            if (error instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]) {
                onError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["pathToArray"])(path), inputValue, error);
            } else {
                onError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["pathToArray"])(path), inputValue, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]("Expected type \"".concat(type.name, "\". ") + error.message, undefined, undefined, undefined, undefined, error));
            }
            return;
        }
        if (parseResult === undefined) {
            onError((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$Path$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["pathToArray"])(path), inputValue, new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$error$2f$GraphQLError$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLError"]("Expected type \"".concat(type.name, "\".")));
        }
        return parseResult;
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected input type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type));
}
}),
"[project]/node_modules/graphql/utilities/getIntrospectionQuery.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "getIntrospectionQuery": ()=>getIntrospectionQuery
});
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function getIntrospectionQuery(options) {
    var optionsWithDefault = _objectSpread({
        descriptions: true,
        specifiedByUrl: false,
        directiveIsRepeatable: false,
        schemaDescription: false
    }, options);
    var descriptions = optionsWithDefault.descriptions ? 'description' : '';
    var specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByUrl' : '';
    var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';
    var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';
    return "\n    query IntrospectionQuery {\n      __schema {\n        ".concat(schemaDescription, "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(descriptions, "\n          ").concat(directiveIsRepeatable, "\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(descriptions, "\n      ").concat(specifiedByUrl, "\n      fields(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(descriptions, "\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ");
}
}),
"[project]/node_modules/graphql/utilities/getOperationAST.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "getOperationAST": ()=>getOperationAST
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
;
function getOperationAST(documentAST, operationName) {
    var operation = null;
    for(var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++){
        var definition = _documentAST$definiti2[_i2];
        if (definition.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OPERATION_DEFINITION) {
            var _definition$name;
            if (operationName == null) {
                // If no operation name was provided, only return an Operation if there
                // is one defined in the document. Upon encountering the second, return
                // null.
                if (operation) {
                    return null;
                }
                operation = definition;
            } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
                return definition;
            }
        }
    }
    return operation;
}
}),
"[project]/node_modules/graphql/utilities/introspectionFromSchema.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "introspectionFromSchema": ()=>introspectionFromSchema
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$parser$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/parser.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$execution$2f$execute$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/execution/execute.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$getIntrospectionQuery$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/utilities/getIntrospectionQuery.mjs [app-route] (ecmascript)");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
;
;
;
;
function introspectionFromSchema(schema, options) {
    var optionsWithDefaults = _objectSpread({
        directiveIsRepeatable: true,
        schemaDescription: true
    }, options);
    var document = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$parser$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parse"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$getIntrospectionQuery$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getIntrospectionQuery"])(optionsWithDefaults));
    var result = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$execution$2f$execute$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["executeSync"])({
        schema: schema,
        document: document
    });
    !result.errors && result.data || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0);
    return result.data;
}
}),
"[project]/node_modules/graphql/utilities/buildClientSchema.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "buildClientSchema": ()=>buildClientSchema
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/objectValues.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$devAssert$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/devAssert.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/keyValMap.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isObjectLike$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/isObjectLike.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$parser$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/parser.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/schema.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/directives.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/scalars.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/introspection.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$valueFromAST$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/utilities/valueFromAST.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
function buildClientSchema(introspection, options) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isObjectLike$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(introspection) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$isObjectLike$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(introspection.__schema) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$devAssert$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, "Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(introspection), ".")); // Get the schema from the introspection result.
    var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.
    var typeMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(schemaIntrospection.types, function(typeIntrospection) {
        return typeIntrospection.name;
    }, function(typeIntrospection) {
        return buildType(typeIntrospection);
    }); // Include standard types only if they are used.
    for(var _i2 = 0, _ref2 = [].concat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["specifiedScalarTypes"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["introspectionTypes"]); _i2 < _ref2.length; _i2++){
        var stdType = _ref2[_i2];
        if (typeMap[stdType.name]) {
            typeMap[stdType.name] = stdType;
        }
    } // Get the root Query, Mutation, and Subscription types.
    var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
    var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
    var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if
    // directives were not queried for.
    var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLSchema"]({
        description: schemaIntrospection.description,
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(typeMap),
        directives: directives,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
    }); // Given a type reference in introspection, return the GraphQLType instance.
    //TURBOPACK unreachable
    ;
    // preferring cached instances before building new instances.
    function getType(typeRef) {
        if (typeRef.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].LIST) {
            var itemRef = typeRef.ofType;
            if (!itemRef) {
                throw new Error('Decorated type deeper than introspection query.');
            }
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLList"])(getType(itemRef));
        }
        if (typeRef.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].NON_NULL) {
            var nullableRef = typeRef.ofType;
            if (!nullableRef) {
                throw new Error('Decorated type deeper than introspection query.');
            }
            var nullableType = getType(nullableRef);
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLNonNull"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertNullableType"])(nullableType));
        }
        return getNamedType(typeRef);
    }
    function getNamedType(typeRef) {
        var typeName = typeRef.name;
        if (!typeName) {
            throw new Error("Unknown type reference: ".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(typeRef), "."));
        }
        var type = typeMap[typeName];
        if (!type) {
            throw new Error("Invalid or incomplete schema, unknown type: ".concat(typeName, ". Ensure that a full introspection query is used in order to build a client schema."));
        }
        return type;
    }
    function getObjectType(typeRef) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertObjectType"])(getNamedType(typeRef));
    }
    function getInterfaceType(typeRef) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertInterfaceType"])(getNamedType(typeRef));
    } // Given a type's introspection result, construct the correct
    // GraphQLType instance.
    function buildType(type) {
        if (type != null && type.name != null && type.kind != null) {
            switch(type.kind){
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].SCALAR:
                    return buildScalarDef(type);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].OBJECT:
                    return buildObjectDef(type);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].INTERFACE:
                    return buildInterfaceDef(type);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].UNION:
                    return buildUnionDef(type);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].ENUM:
                    return buildEnumDef(type);
                case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].INPUT_OBJECT:
                    return buildInputObjectDef(type);
            }
        }
        var typeStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type);
        throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(typeStr, "."));
    }
    function buildScalarDef(scalarIntrospection) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLScalarType"]({
            name: scalarIntrospection.name,
            description: scalarIntrospection.description,
            specifiedByUrl: scalarIntrospection.specifiedByUrl
        });
    }
    function buildImplementationsList(implementingIntrospection) {
        // TODO: Temporary workaround until GraphQL ecosystem will fully support
        // 'interfaces' on interface types.
        if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TypeKind"].INTERFACE) {
            return [];
        }
        if (!implementingIntrospection.interfaces) {
            var implementingIntrospectionStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(implementingIntrospection);
            throw new Error("Introspection result missing interfaces: ".concat(implementingIntrospectionStr, "."));
        }
        return implementingIntrospection.interfaces.map(getInterfaceType);
    }
    function buildObjectDef(objectIntrospection) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLObjectType"]({
            name: objectIntrospection.name,
            description: objectIntrospection.description,
            interfaces: function interfaces() {
                return buildImplementationsList(objectIntrospection);
            },
            fields: function fields() {
                return buildFieldDefMap(objectIntrospection);
            }
        });
    }
    function buildInterfaceDef(interfaceIntrospection) {
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLInterfaceType"]({
            name: interfaceIntrospection.name,
            description: interfaceIntrospection.description,
            interfaces: function interfaces() {
                return buildImplementationsList(interfaceIntrospection);
            },
            fields: function fields() {
                return buildFieldDefMap(interfaceIntrospection);
            }
        });
    }
    function buildUnionDef(unionIntrospection) {
        if (!unionIntrospection.possibleTypes) {
            var unionIntrospectionStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(unionIntrospection);
            throw new Error("Introspection result missing possibleTypes: ".concat(unionIntrospectionStr, "."));
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLUnionType"]({
            name: unionIntrospection.name,
            description: unionIntrospection.description,
            types: function types() {
                return unionIntrospection.possibleTypes.map(getObjectType);
            }
        });
    }
    function buildEnumDef(enumIntrospection) {
        if (!enumIntrospection.enumValues) {
            var enumIntrospectionStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(enumIntrospection);
            throw new Error("Introspection result missing enumValues: ".concat(enumIntrospectionStr, "."));
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLEnumType"]({
            name: enumIntrospection.name,
            description: enumIntrospection.description,
            values: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(enumIntrospection.enumValues, function(valueIntrospection) {
                return valueIntrospection.name;
            }, function(valueIntrospection) {
                return {
                    description: valueIntrospection.description,
                    deprecationReason: valueIntrospection.deprecationReason
                };
            })
        });
    }
    function buildInputObjectDef(inputObjectIntrospection) {
        if (!inputObjectIntrospection.inputFields) {
            var inputObjectIntrospectionStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(inputObjectIntrospection);
            throw new Error("Introspection result missing inputFields: ".concat(inputObjectIntrospectionStr, "."));
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLInputObjectType"]({
            name: inputObjectIntrospection.name,
            description: inputObjectIntrospection.description,
            fields: function fields() {
                return buildInputValueDefMap(inputObjectIntrospection.inputFields);
            }
        });
    }
    function buildFieldDefMap(typeIntrospection) {
        if (!typeIntrospection.fields) {
            throw new Error("Introspection result missing fields: ".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(typeIntrospection), "."));
        }
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(typeIntrospection.fields, function(fieldIntrospection) {
            return fieldIntrospection.name;
        }, buildField);
    }
    function buildField(fieldIntrospection) {
        var type = getType(fieldIntrospection.type);
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isOutputType"])(type)) {
            var typeStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type);
            throw new Error("Introspection must provide output type for fields, but received: ".concat(typeStr, "."));
        }
        if (!fieldIntrospection.args) {
            var fieldIntrospectionStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(fieldIntrospection);
            throw new Error("Introspection result missing field args: ".concat(fieldIntrospectionStr, "."));
        }
        return {
            description: fieldIntrospection.description,
            deprecationReason: fieldIntrospection.deprecationReason,
            type: type,
            args: buildInputValueDefMap(fieldIntrospection.args)
        };
    }
    function buildInputValueDefMap(inputValueIntrospections) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(inputValueIntrospections, function(inputValue) {
            return inputValue.name;
        }, buildInputValue);
    }
    function buildInputValue(inputValueIntrospection) {
        var type = getType(inputValueIntrospection.type);
        if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputType"])(type)) {
            var typeStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type);
            throw new Error("Introspection must provide input type for arguments, but received: ".concat(typeStr, "."));
        }
        var defaultValue = inputValueIntrospection.defaultValue != null ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$valueFromAST$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["valueFromAST"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$parser$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parseValue"])(inputValueIntrospection.defaultValue), type) : undefined;
        return {
            description: inputValueIntrospection.description,
            type: type,
            defaultValue: defaultValue
        };
    }
    function buildDirective(directiveIntrospection) {
        if (!directiveIntrospection.args) {
            var directiveIntrospectionStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(directiveIntrospection);
            throw new Error("Introspection result missing directive args: ".concat(directiveIntrospectionStr, "."));
        }
        if (!directiveIntrospection.locations) {
            var _directiveIntrospectionStr = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(directiveIntrospection);
            throw new Error("Introspection result missing directive locations: ".concat(_directiveIntrospectionStr, "."));
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLDirective"]({
            name: directiveIntrospection.name,
            description: directiveIntrospection.description,
            isRepeatable: directiveIntrospection.isRepeatable,
            locations: directiveIntrospection.locations.slice(),
            args: buildInputValueDefMap(directiveIntrospection.args)
        });
    }
}
}),
"[project]/node_modules/graphql/utilities/extendSchema.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "extendSchema": ()=>extendSchema,
    "extendSchemaImpl": ()=>extendSchemaImpl,
    "getDescription": ()=>getDescription
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/objectValues.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/keyMap.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$mapValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/mapValue.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$devAssert$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/devAssert.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$tokenKind$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/tokenKind.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/blockString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$predicates$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/predicates.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$validation$2f$validate$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/validation/validate.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$execution$2f$values$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/execution/values.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/schema.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/scalars.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/introspection.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/directives.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$valueFromAST$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/utilities/valueFromAST.mjs [app-route] (ecmascript)");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
function extendSchema(schema, documentAST, options) {
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertSchema"])(schema);
    documentAST != null && documentAST.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].DOCUMENT || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$devAssert$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Must provide valid Document AST.');
    if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$validation$2f$validate$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertValidSDLExtension"])(documentAST, schema);
    }
    var schemaConfig = schema.toConfig();
    var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
    return schemaConfig === extendedConfig ? schema : new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLSchema"](extendedConfig);
}
function extendSchemaImpl(schemaConfig, documentAST, options) {
    var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;
    // Collect the type definitions and extensions found in the document.
    var typeDefs = [];
    var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
    // have the same name. For example, a type named "skip".
    var directiveDefs = [];
    var schemaDef; // Schema extensions are collected which may add additional operation types.
    var schemaExtensions = [];
    for(var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++){
        var def = _documentAST$definiti2[_i2];
        if (def.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].SCHEMA_DEFINITION) {
            schemaDef = def;
        } else if (def.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].SCHEMA_EXTENSION) {
            schemaExtensions.push(def);
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$predicates$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isTypeDefinitionNode"])(def)) {
            typeDefs.push(def);
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$predicates$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isTypeExtensionNode"])(def)) {
            var extendedTypeName = def.name.value;
            var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
            typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([
                def
            ]) : [
                def
            ];
        } else if (def.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].DIRECTIVE_DEFINITION) {
            directiveDefs.push(def);
        }
    } // If this document contains no new types, extensions, or directives then
    // return the same unmodified GraphQLSchema instance.
    if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
        return schemaConfig;
    }
    var typeMap = Object.create(null);
    for(var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++){
        var existingType = _schemaConfig$types2[_i4];
        typeMap[existingType.name] = extendNamedType(existingType);
    }
    for(var _i6 = 0; _i6 < typeDefs.length; _i6++){
        var _stdTypeMap$name;
        var typeNode = typeDefs[_i6];
        var name = typeNode.name.value;
        typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
    }
    var operationTypes = _objectSpread(_objectSpread({
        // Get the extended root operation types.
        query: schemaConfig.query && replaceNamedType(schemaConfig.query),
        mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
        subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)
    }, schemaDef && getOperationTypes([
        schemaDef
    ])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.
    return _objectSpread(_objectSpread({
        description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value
    }, operationTypes), {}, {
        types: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(typeMap),
        directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),
        extensions: undefined,
        astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
        extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
        assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
    }); // Below are functions used for producing this schema that have closed over
    //TURBOPACK unreachable
    ;
    // this scope and have access to the schema, cache, and newly defined types.
    function replaceType(type) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(type)) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLList"](replaceType(type.ofType));
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(type)) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLNonNull"](replaceType(type.ofType));
        }
        return replaceNamedType(type);
    }
    function replaceNamedType(type) {
        // Note: While this could make early assertions to get the correctly
        // typed values, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.
        return typeMap[type.name];
    }
    function replaceDirective(directive) {
        var config = directive.toConfig();
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLDirective"](_objectSpread(_objectSpread({}, config), {}, {
            args: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$mapValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(config.args, extendArg)
        }));
    }
    function extendNamedType(type) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isIntrospectionType"])(type) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isSpecifiedScalarType"])(type)) {
            // Builtin types are not extended.
            return type;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isScalarType"])(type)) {
            return extendScalarType(type);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(type)) {
            return extendObjectType(type);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInterfaceType"])(type)) {
            return extendInterfaceType(type);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isUnionType"])(type)) {
            return extendUnionType(type);
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isEnumType"])(type)) {
            return extendEnumType(type);
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(type)) {
            return extendInputObjectType(type);
        } // istanbul ignore next (Not reachable. All possible types have been considered)
        false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type));
    }
    function extendInputObjectType(type) {
        var _typeExtensionsMap$co;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLInputObjectType"](_objectSpread(_objectSpread({}, config), {}, {
            fields: function fields() {
                return _objectSpread(_objectSpread({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$mapValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(config.fields, function(field) {
                    return _objectSpread(_objectSpread({}, field), {}, {
                        type: replaceType(field.type)
                    });
                })), buildInputFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendEnumType(type) {
        var _typeExtensionsMap$ty;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLEnumType"](_objectSpread(_objectSpread({}, config), {}, {
            values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendScalarType(type) {
        var _typeExtensionsMap$co2;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
        var specifiedByUrl = config.specifiedByUrl;
        for(var _i8 = 0; _i8 < extensions.length; _i8++){
            var _getSpecifiedByUrl;
            var extensionNode = extensions[_i8];
            specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;
        }
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLScalarType"](_objectSpread(_objectSpread({}, config), {}, {
            specifiedByUrl: specifiedByUrl,
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendObjectType(type) {
        var _typeExtensionsMap$co3;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLObjectType"](_objectSpread(_objectSpread({}, config), {}, {
            interfaces: function interfaces() {
                return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
            },
            fields: function fields() {
                return _objectSpread(_objectSpread({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$mapValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(config.fields, extendField)), buildFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendInterfaceType(type) {
        var _typeExtensionsMap$co4;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLInterfaceType"](_objectSpread(_objectSpread({}, config), {}, {
            interfaces: function interfaces() {
                return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
            },
            fields: function fields() {
                return _objectSpread(_objectSpread({}, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$mapValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(config.fields, extendField)), buildFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendUnionType(type) {
        var _typeExtensionsMap$co5;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLUnionType"](_objectSpread(_objectSpread({}, config), {}, {
            types: function types() {
                return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendField(field) {
        return _objectSpread(_objectSpread({}, field), {}, {
            type: replaceType(field.type),
            args: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$mapValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(field.args, extendArg)
        });
    }
    function extendArg(arg) {
        return _objectSpread(_objectSpread({}, arg), {}, {
            type: replaceType(arg.type)
        });
    }
    function getOperationTypes(nodes) {
        var opTypes = {};
        for(var _i10 = 0; _i10 < nodes.length; _i10++){
            var _node$operationTypes;
            var node = nodes[_i10];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
            for(var _i12 = 0; _i12 < operationTypesNodes.length; _i12++){
                var operationType = operationTypesNodes[_i12];
                opTypes[operationType.operation] = getNamedType(operationType.type);
            }
        } // Note: While this could make early assertions to get the correctly
        // typed values below, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.
        return opTypes;
    }
    function getNamedType(node) {
        var _stdTypeMap$name2;
        var name = node.name.value;
        var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];
        if (type === undefined) {
            throw new Error("Unknown type: \"".concat(name, "\"."));
        }
        return type;
    }
    function getWrappedType(node) {
        if (node.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].LIST_TYPE) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLList"](getWrappedType(node.type));
        }
        if (node.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].NON_NULL_TYPE) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLNonNull"](getWrappedType(node.type));
        }
        return getNamedType(node);
    }
    function buildDirective(node) {
        var locations = node.locations.map(function(_ref) {
            var value = _ref.value;
            return value;
        });
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLDirective"]({
            name: node.name.value,
            description: getDescription(node, options),
            locations: locations,
            isRepeatable: node.repeatable,
            args: buildArgumentMap(node.arguments),
            astNode: node
        });
    }
    function buildFieldMap(nodes) {
        var fieldConfigMap = Object.create(null);
        for(var _i14 = 0; _i14 < nodes.length; _i14++){
            var _node$fields;
            var node = nodes[_i14];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
            for(var _i16 = 0; _i16 < nodeFields.length; _i16++){
                var field = nodeFields[_i16];
                fieldConfigMap[field.name.value] = {
                    // Note: While this could make assertions to get the correctly typed
                    // value, that would throw immediately while type system validation
                    // with validateSchema() will produce more actionable results.
                    type: getWrappedType(field.type),
                    description: getDescription(field, options),
                    args: buildArgumentMap(field.arguments),
                    deprecationReason: getDeprecationReason(field),
                    astNode: field
                };
            }
        }
        return fieldConfigMap;
    }
    function buildArgumentMap(args) {
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var argsNodes = args !== null && args !== void 0 ? args : [];
        var argConfigMap = Object.create(null);
        for(var _i18 = 0; _i18 < argsNodes.length; _i18++){
            var arg = argsNodes[_i18];
            // Note: While this could make assertions to get the correctly typed
            // value, that would throw immediately while type system validation
            // with validateSchema() will produce more actionable results.
            var type = getWrappedType(arg.type);
            argConfigMap[arg.name.value] = {
                type: type,
                description: getDescription(arg, options),
                defaultValue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$valueFromAST$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["valueFromAST"])(arg.defaultValue, type),
                astNode: arg
            };
        }
        return argConfigMap;
    }
    function buildInputFieldMap(nodes) {
        var inputFieldMap = Object.create(null);
        for(var _i20 = 0; _i20 < nodes.length; _i20++){
            var _node$fields2;
            var node = nodes[_i20];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];
            for(var _i22 = 0; _i22 < fieldsNodes.length; _i22++){
                var field = fieldsNodes[_i22];
                // Note: While this could make assertions to get the correctly typed
                // value, that would throw immediately while type system validation
                // with validateSchema() will produce more actionable results.
                var type = getWrappedType(field.type);
                inputFieldMap[field.name.value] = {
                    type: type,
                    description: getDescription(field, options),
                    defaultValue: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$valueFromAST$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["valueFromAST"])(field.defaultValue, type),
                    astNode: field
                };
            }
        }
        return inputFieldMap;
    }
    function buildEnumValueMap(nodes) {
        var enumValueMap = Object.create(null);
        for(var _i24 = 0; _i24 < nodes.length; _i24++){
            var _node$values;
            var node = nodes[_i24];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
            for(var _i26 = 0; _i26 < valuesNodes.length; _i26++){
                var value = valuesNodes[_i26];
                enumValueMap[value.name.value] = {
                    description: getDescription(value, options),
                    deprecationReason: getDeprecationReason(value),
                    astNode: value
                };
            }
        }
        return enumValueMap;
    }
    function buildInterfaces(nodes) {
        var interfaces = [];
        for(var _i28 = 0; _i28 < nodes.length; _i28++){
            var _node$interfaces;
            var node = nodes[_i28];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];
            for(var _i30 = 0; _i30 < interfacesNodes.length; _i30++){
                var type = interfacesNodes[_i30];
                // Note: While this could make assertions to get the correctly typed
                // values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable
                // results.
                interfaces.push(getNamedType(type));
            }
        }
        return interfaces;
    }
    function buildUnionTypes(nodes) {
        var types = [];
        for(var _i32 = 0; _i32 < nodes.length; _i32++){
            var _node$types;
            var node = nodes[_i32];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];
            for(var _i34 = 0; _i34 < typeNodes.length; _i34++){
                var type = typeNodes[_i34];
                // Note: While this could make assertions to get the correctly typed
                // values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable
                // results.
                types.push(getNamedType(type));
            }
        }
        return types;
    }
    function buildType(astNode) {
        var _typeExtensionsMap$na;
        var name = astNode.name.value;
        var description = getDescription(astNode, options);
        var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
        switch(astNode.kind){
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].OBJECT_TYPE_DEFINITION:
                {
                    var extensionASTNodes = extensionNodes;
                    var allNodes = [
                        astNode
                    ].concat(extensionASTNodes);
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLObjectType"]({
                        name: name,
                        description: description,
                        interfaces: function interfaces() {
                            return buildInterfaces(allNodes);
                        },
                        fields: function fields() {
                            return buildFieldMap(allNodes);
                        },
                        astNode: astNode,
                        extensionASTNodes: extensionASTNodes
                    });
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].INTERFACE_TYPE_DEFINITION:
                {
                    var _extensionASTNodes = extensionNodes;
                    var _allNodes = [
                        astNode
                    ].concat(_extensionASTNodes);
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLInterfaceType"]({
                        name: name,
                        description: description,
                        interfaces: function interfaces() {
                            return buildInterfaces(_allNodes);
                        },
                        fields: function fields() {
                            return buildFieldMap(_allNodes);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes
                    });
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].ENUM_TYPE_DEFINITION:
                {
                    var _extensionASTNodes2 = extensionNodes;
                    var _allNodes2 = [
                        astNode
                    ].concat(_extensionASTNodes2);
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLEnumType"]({
                        name: name,
                        description: description,
                        values: buildEnumValueMap(_allNodes2),
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes2
                    });
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].UNION_TYPE_DEFINITION:
                {
                    var _extensionASTNodes3 = extensionNodes;
                    var _allNodes3 = [
                        astNode
                    ].concat(_extensionASTNodes3);
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLUnionType"]({
                        name: name,
                        description: description,
                        types: function types() {
                            return buildUnionTypes(_allNodes3);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes3
                    });
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].SCALAR_TYPE_DEFINITION:
                {
                    var _extensionASTNodes4 = extensionNodes;
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLScalarType"]({
                        name: name,
                        description: description,
                        specifiedByUrl: getSpecifiedByUrl(astNode),
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes4
                    });
                }
            case __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].INPUT_OBJECT_TYPE_DEFINITION:
                {
                    var _extensionASTNodes5 = extensionNodes;
                    var _allNodes4 = [
                        astNode
                    ].concat(_extensionASTNodes5);
                    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLInputObjectType"]({
                        name: name,
                        description: description,
                        fields: function fields() {
                            return buildInputFieldMap(_allNodes4);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes5
                    });
                }
        } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)
        false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected type definition node: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(astNode));
    }
}
var stdTypeMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["specifiedScalarTypes"].concat(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["introspectionTypes"]), function(type) {
    return type.name;
});
/**
 * Given a field or enum value node, returns the string value for the
 * deprecation reason.
 */ function getDeprecationReason(node) {
    var deprecated = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$execution$2f$values$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getDirectiveValues"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLDeprecatedDirective"], node);
    return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
}
/**
 * Given a scalar node, returns the string value for the specifiedByUrl.
 */ function getSpecifiedByUrl(node) {
    var specifiedBy = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$execution$2f$values$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getDirectiveValues"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLSpecifiedByDirective"], node);
    return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
}
function getDescription(node, options) {
    if (node.description) {
        return node.description.value;
    }
    if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        var rawValue = getLeadingCommentBlock(node);
        if (rawValue !== undefined) {
            return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["dedentBlockStringValue"])('\n' + rawValue);
        }
    }
}
function getLeadingCommentBlock(node) {
    var loc = node.loc;
    if (!loc) {
        return;
    }
    var comments = [];
    var token = loc.startToken.prev;
    while(token != null && token.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$tokenKind$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TokenKind"].COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line){
        var value = String(token.value);
        comments.push(value);
        token = token.prev;
    }
    return comments.length > 0 ? comments.reverse().join('\n') : undefined;
}
}),
"[project]/node_modules/graphql/utilities/buildASTSchema.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "buildASTSchema": ()=>buildASTSchema,
    "buildSchema": ()=>buildSchema
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$devAssert$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/devAssert.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$parser$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/parser.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$validation$2f$validate$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/validation/validate.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/schema.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/directives.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$extendSchema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/utilities/extendSchema.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
function buildASTSchema(documentAST, options) {
    documentAST != null && documentAST.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].DOCUMENT || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$devAssert$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Must provide valid Document AST.');
    if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$validation$2f$validate$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["assertValidSDL"])(documentAST);
    }
    var emptySchemaConfig = {
        description: undefined,
        types: [],
        directives: [],
        extensions: undefined,
        extensionASTNodes: [],
        assumeValid: false
    };
    var config = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$extendSchema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["extendSchemaImpl"])(emptySchemaConfig, documentAST, options);
    if (config.astNode == null) {
        for(var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++){
            var type = _config$types2[_i2];
            switch(type.name){
                // Note: While this could make early assertions to get the correctly
                // typed values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable results.
                case 'Query':
                    config.query = type;
                    break;
                case 'Mutation':
                    config.mutation = type;
                    break;
                case 'Subscription':
                    config.subscription = type;
                    break;
            }
        }
    }
    var directives = config.directives; // If specified directives were not explicitly declared, add them.
    if (!directives.some(function(directive) {
        return directive.name === 'skip';
    })) {
        directives.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLSkipDirective"]);
    }
    if (!directives.some(function(directive) {
        return directive.name === 'include';
    })) {
        directives.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLIncludeDirective"]);
    }
    if (!directives.some(function(directive) {
        return directive.name === 'deprecated';
    })) {
        directives.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLDeprecatedDirective"]);
    }
    if (!directives.some(function(directive) {
        return directive.name === 'specifiedBy';
    })) {
        directives.push(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLSpecifiedByDirective"]);
    }
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLSchema"](config);
}
function buildSchema(source, options) {
    var document = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$parser$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["parse"])(source, {
        noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
        allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,
        allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,
        experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables
    });
    return buildASTSchema(document, {
        commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,
        assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
    });
}
}),
"[project]/node_modules/graphql/utilities/lexicographicSortSchema.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "lexicographicSortSchema": ()=>lexicographicSortSchema
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/objectValues.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/keyValMap.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/schema.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/directives.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/introspection.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
;
;
;
;
;
;
;
;
function lexicographicSortSchema(schema) {
    var schemaConfig = schema.toConfig();
    var typeMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyValMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(sortByName(schemaConfig.types), function(type) {
        return type.name;
    }, sortNamedType);
    return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$schema$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLSchema"](_objectSpread(_objectSpread({}, schemaConfig), {}, {
        types: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(typeMap),
        directives: sortByName(schemaConfig.directives).map(sortDirective),
        query: replaceMaybeType(schemaConfig.query),
        mutation: replaceMaybeType(schemaConfig.mutation),
        subscription: replaceMaybeType(schemaConfig.subscription)
    }));
    //TURBOPACK unreachable
    ;
    function replaceType(type) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(type)) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLList"](replaceType(type.ofType));
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(type)) {
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLNonNull"](replaceType(type.ofType));
        }
        return replaceNamedType(type);
    }
    function replaceNamedType(type) {
        return typeMap[type.name];
    }
    function replaceMaybeType(maybeType) {
        return maybeType && replaceNamedType(maybeType);
    }
    function sortDirective(directive) {
        var config = directive.toConfig();
        return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLDirective"](_objectSpread(_objectSpread({}, config), {}, {
            locations: sortBy(config.locations, function(x) {
                return x;
            }),
            args: sortArgs(config.args)
        }));
    }
    function sortArgs(args) {
        return sortObjMap(args, function(arg) {
            return _objectSpread(_objectSpread({}, arg), {}, {
                type: replaceType(arg.type)
            });
        });
    }
    function sortFields(fieldsMap) {
        return sortObjMap(fieldsMap, function(field) {
            return _objectSpread(_objectSpread({}, field), {}, {
                type: replaceType(field.type),
                args: sortArgs(field.args)
            });
        });
    }
    function sortInputFields(fieldsMap) {
        return sortObjMap(fieldsMap, function(field) {
            return _objectSpread(_objectSpread({}, field), {}, {
                type: replaceType(field.type)
            });
        });
    }
    function sortTypes(arr) {
        return sortByName(arr).map(replaceNamedType);
    }
    function sortNamedType(type) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isScalarType"])(type) || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isIntrospectionType"])(type)) {
            return type;
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(type)) {
            var config = type.toConfig();
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLObjectType"](_objectSpread(_objectSpread({}, config), {}, {
                interfaces: function interfaces() {
                    return sortTypes(config.interfaces);
                },
                fields: function fields() {
                    return sortFields(config.fields);
                }
            }));
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInterfaceType"])(type)) {
            var _config = type.toConfig();
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLInterfaceType"](_objectSpread(_objectSpread({}, _config), {}, {
                interfaces: function interfaces() {
                    return sortTypes(_config.interfaces);
                },
                fields: function fields() {
                    return sortFields(_config.fields);
                }
            }));
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isUnionType"])(type)) {
            var _config2 = type.toConfig();
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLUnionType"](_objectSpread(_objectSpread({}, _config2), {}, {
                types: function types() {
                    return sortTypes(_config2.types);
                }
            }));
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isEnumType"])(type)) {
            var _config3 = type.toConfig();
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLEnumType"](_objectSpread(_objectSpread({}, _config3), {}, {
                values: sortObjMap(_config3.values)
            }));
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(type)) {
            var _config4 = type.toConfig();
            return new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLInputObjectType"](_objectSpread(_objectSpread({}, _config4), {}, {
                fields: function fields() {
                    return sortInputFields(_config4.fields);
                }
            }));
        } // istanbul ignore next (Not reachable. All possible types have been considered)
        false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type));
    }
}
function sortObjMap(map, sortValueFn) {
    var sortedMap = Object.create(null);
    var sortedKeys = sortBy(Object.keys(map), function(x) {
        return x;
    });
    for(var _i2 = 0; _i2 < sortedKeys.length; _i2++){
        var key = sortedKeys[_i2];
        var value = map[key];
        sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
    }
    return sortedMap;
}
function sortByName(array) {
    return sortBy(array, function(obj) {
        return obj.name;
    });
}
function sortBy(array, mapToKey) {
    return array.slice().sort(function(obj1, obj2) {
        var key1 = mapToKey(obj1);
        var key2 = mapToKey(obj2);
        return key1.localeCompare(key2);
    });
}
}),
"[project]/node_modules/graphql/utilities/printSchema.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "printIntrospectionSchema": ()=>printIntrospectionSchema,
    "printSchema": ()=>printSchema,
    "printType": ()=>printType
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/objectValues.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$printer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/printer.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/blockString.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/introspection.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/scalars.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/directives.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$astFromValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/utilities/astFromValue.mjs [app-route] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
function printSchema(schema, options) {
    return printFilteredSchema(schema, function(n) {
        return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isSpecifiedDirective"])(n);
    }, isDefinedType, options);
}
function printIntrospectionSchema(schema, options) {
    return printFilteredSchema(schema, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isSpecifiedDirective"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isIntrospectionType"], options);
}
function isDefinedType(type) {
    return !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isSpecifiedScalarType"])(type) && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$introspection$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isIntrospectionType"])(type);
}
function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
    var directives = schema.getDirectives().filter(directiveFilter);
    var types = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(schema.getTypeMap()).filter(typeFilter);
    return [
        printSchemaDefinition(schema)
    ].concat(directives.map(function(directive) {
        return printDirective(directive, options);
    }), types.map(function(type) {
        return printType(type, options);
    })).filter(Boolean).join('\n\n') + '\n';
}
function printSchemaDefinition(schema) {
    if (schema.description == null && isSchemaOfCommonNames(schema)) {
        return;
    }
    var operationTypes = [];
    var queryType = schema.getQueryType();
    if (queryType) {
        operationTypes.push("  query: ".concat(queryType.name));
    }
    var mutationType = schema.getMutationType();
    if (mutationType) {
        operationTypes.push("  mutation: ".concat(mutationType.name));
    }
    var subscriptionType = schema.getSubscriptionType();
    if (subscriptionType) {
        operationTypes.push("  subscription: ".concat(subscriptionType.name));
    }
    return printDescription({}, schema) + "schema {\n".concat(operationTypes.join('\n'), "\n}");
}
/**
 * GraphQL schema define root types for each type of operation. These types are
 * the same as any other type and can be named in any manner, however there is
 * a common naming convention:
 *
 *   schema {
 *     query: Query
 *     mutation: Mutation
 *   }
 *
 * When using this naming convention, the schema description can be omitted.
 */ function isSchemaOfCommonNames(schema) {
    var queryType = schema.getQueryType();
    if (queryType && queryType.name !== 'Query') {
        return false;
    }
    var mutationType = schema.getMutationType();
    if (mutationType && mutationType.name !== 'Mutation') {
        return false;
    }
    var subscriptionType = schema.getSubscriptionType();
    if (subscriptionType && subscriptionType.name !== 'Subscription') {
        return false;
    }
    return true;
}
function printType(type, options) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isScalarType"])(type)) {
        return printScalar(type, options);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(type)) {
        return printObject(type, options);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInterfaceType"])(type)) {
        return printInterface(type, options);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isUnionType"])(type)) {
        return printUnion(type, options);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isEnumType"])(type)) {
        return printEnum(type, options);
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(type)) {
        return printInputObject(type, options);
    } // istanbul ignore next (Not reachable. All possible types have been considered)
    false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type));
}
function printScalar(type, options) {
    return printDescription(options, type) + "scalar ".concat(type.name) + printSpecifiedByUrl(type);
}
function printImplementedInterfaces(type) {
    var interfaces = type.getInterfaces();
    return interfaces.length ? ' implements ' + interfaces.map(function(i) {
        return i.name;
    }).join(' & ') : '';
}
function printObject(type, options) {
    return printDescription(options, type) + "type ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
}
function printInterface(type, options) {
    return printDescription(options, type) + "interface ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
}
function printUnion(type, options) {
    var types = type.getTypes();
    var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
    return printDescription(options, type) + 'union ' + type.name + possibleTypes;
}
function printEnum(type, options) {
    var values = type.getValues().map(function(value, i) {
        return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value);
    });
    return printDescription(options, type) + "enum ".concat(type.name) + printBlock(values);
}
function printInputObject(type, options) {
    var fields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type.getFields()).map(function(f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);
    });
    return printDescription(options, type) + "input ".concat(type.name) + printBlock(fields);
}
function printFields(options, type) {
    var fields = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type.getFields()).map(function(f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);
    });
    return printBlock(fields);
}
function printBlock(items) {
    return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
}
function printArgs(options, args) {
    var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    if (args.length === 0) {
        return '';
    } // If every arg does not have a description, print them on one line.
    if (args.every(function(arg) {
        return !arg.description;
    })) {
        return '(' + args.map(printInputValue).join(', ') + ')';
    }
    return '(\n' + args.map(function(arg, i) {
        return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
    }).join('\n') + '\n' + indentation + ')';
}
function printInputValue(arg) {
    var defaultAST = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$astFromValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["astFromValue"])(arg.defaultValue, arg.type);
    var argDecl = arg.name + ': ' + String(arg.type);
    if (defaultAST) {
        argDecl += " = ".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$printer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["print"])(defaultAST));
    }
    return argDecl;
}
function printDirective(directive, options) {
    return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');
}
function printDeprecated(fieldOrEnumVal) {
    if (!fieldOrEnumVal.isDeprecated) {
        return '';
    }
    var reason = fieldOrEnumVal.deprecationReason;
    var reasonAST = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$astFromValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["astFromValue"])(reason, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLString"]);
    if (reasonAST && reason !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$directives$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["DEFAULT_DEPRECATION_REASON"]) {
        return ' @deprecated(reason: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$printer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["print"])(reasonAST) + ')';
    }
    return ' @deprecated';
}
function printSpecifiedByUrl(scalar) {
    if (scalar.specifiedByUrl == null) {
        return '';
    }
    var url = scalar.specifiedByUrl;
    var urlAST = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$astFromValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["astFromValue"])(url, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["GraphQLString"]);
    urlAST || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected null value returned from `astFromValue` for specifiedByUrl');
    return ' @specifiedBy(url: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$printer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["print"])(urlAST) + ')';
}
function printDescription(options, def) {
    var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var description = def.description;
    if (description == null) {
        return '';
    }
    if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        return printDescriptionWithComments(description, indentation, firstInBlock);
    }
    var preferMultipleLines = description.length > 70;
    var blockString = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["printBlockString"])(description, '', preferMultipleLines);
    var prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
    return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
}
function printDescriptionWithComments(description, indentation, firstInBlock) {
    var prefix = indentation && !firstInBlock ? '\n' : '';
    var comment = description.split('\n').map(function(line) {
        return indentation + (line !== '' ? '# ' + line : '#');
    }).join('\n');
    return prefix + comment + '\n';
}
}),
"[project]/node_modules/graphql/utilities/concatAST.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "concatAST": ()=>concatAST
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$flatMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/flatMap.mjs [app-route] (ecmascript)");
;
function concatAST(asts) {
    return {
        kind: 'Document',
        definitions: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$flatMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(asts, function(ast) {
            return ast.definitions;
        })
    };
}
}),
"[project]/node_modules/graphql/utilities/separateOperations.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "separateOperations": ()=>separateOperations
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/kinds.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$visitor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/visitor.mjs [app-route] (ecmascript)");
;
;
function separateOperations(documentAST) {
    var operations = [];
    var depGraph = Object.create(null);
    var fromName; // Populate metadata and build a dependency graph.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$visitor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["visit"])(documentAST, {
        OperationDefinition: function OperationDefinition(node) {
            fromName = opName(node);
            operations.push(node);
        },
        FragmentDefinition: function FragmentDefinition(node) {
            fromName = node.name.value;
        },
        FragmentSpread: function FragmentSpread(node) {
            var toName = node.name.value;
            var dependents = depGraph[fromName];
            if (dependents === undefined) {
                dependents = depGraph[fromName] = Object.create(null);
            }
            dependents[toName] = true;
        }
    }); // For each operation, produce a new synthesized AST which includes only what
    // is necessary for completing that operation.
    var separatedDocumentASTs = Object.create(null);
    var _loop = function _loop(_i2) {
        var operation = operations[_i2];
        var operationName = opName(operation);
        var dependencies = Object.create(null);
        collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted
        // to retain the same order as the original document.
        separatedDocumentASTs[operationName] = {
            kind: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].DOCUMENT,
            definitions: documentAST.definitions.filter(function(node) {
                return node === operation || node.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$kinds$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Kind"].FRAGMENT_DEFINITION && dependencies[node.name.value];
            })
        };
    };
    for(var _i2 = 0; _i2 < operations.length; _i2++){
        _loop(_i2);
    }
    return separatedDocumentASTs;
}
// Provides the empty string for anonymous operations.
function opName(operation) {
    return operation.name ? operation.name.value : '';
} // From a dependency graph, collects a list of transitive dependencies by
// recursing through a dependency graph.
function collectTransitiveDependencies(collected, depGraph, fromName) {
    var immediateDeps = depGraph[fromName];
    if (immediateDeps) {
        for(var _i4 = 0, _Object$keys2 = Object.keys(immediateDeps); _i4 < _Object$keys2.length; _i4++){
            var toName = _Object$keys2[_i4];
            if (!collected[toName]) {
                collected[toName] = true;
                collectTransitiveDependencies(collected, depGraph, toName);
            }
        }
    }
}
}),
"[project]/node_modules/graphql/utilities/stripIgnoredCharacters.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "stripIgnoredCharacters": ()=>stripIgnoredCharacters
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$source$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/source.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$tokenKind$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/tokenKind.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$lexer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/lexer.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/blockString.mjs [app-route] (ecmascript)");
;
;
;
;
;
function stripIgnoredCharacters(source) {
    var sourceObj = typeof source === 'string' ? new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$source$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Source"](source) : source;
    if (!(sourceObj instanceof __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$source$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Source"])) {
        throw new TypeError("Must provide string or Source. Received: ".concat((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(sourceObj), "."));
    }
    var body = sourceObj.body;
    var lexer = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$lexer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["Lexer"](sourceObj);
    var strippedBody = '';
    var wasLastAddedTokenNonPunctuator = false;
    while(lexer.advance().kind !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$tokenKind$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TokenKind"].EOF){
        var currentToken = lexer.token;
        var tokenKind = currentToken.kind;
        /**
     * Every two non-punctuator tokens should have space between them.
     * Also prevent case of non-punctuator token following by spread resulting
     * in invalid token (e.g. `1...` is invalid Float token).
     */ var isNonPunctuator = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$lexer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isPunctuatorTokenKind"])(currentToken.kind);
        if (wasLastAddedTokenNonPunctuator) {
            if (isNonPunctuator || currentToken.kind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$tokenKind$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TokenKind"].SPREAD) {
                strippedBody += ' ';
            }
        }
        var tokenBody = body.slice(currentToken.start, currentToken.end);
        if (tokenKind === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$tokenKind$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["TokenKind"].BLOCK_STRING) {
            strippedBody += dedentBlockString(tokenBody);
        } else {
            strippedBody += tokenBody;
        }
        wasLastAddedTokenNonPunctuator = isNonPunctuator;
    }
    return strippedBody;
}
function dedentBlockString(blockStr) {
    // skip leading and trailing triple quotations
    var rawStr = blockStr.slice(3, -3);
    var body = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["dedentBlockStringValue"])(rawStr);
    var lines = body.split(/\r\n|[\n\r]/g);
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$blockString$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["getBlockStringIndentation"])(lines) > 0) {
        body = '\n' + body;
    }
    var lastChar = body[body.length - 1];
    var hasTrailingQuote = lastChar === '"' && body.slice(-4) !== '\\"""';
    if (hasTrailingQuote || lastChar === '\\') {
        body += '\n';
    }
    return '"""' + body + '"""';
}
}),
"[project]/node_modules/graphql/utilities/findBreakingChanges.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "BreakingChangeType": ()=>BreakingChangeType,
    "DangerousChangeType": ()=>DangerousChangeType,
    "findBreakingChanges": ()=>findBreakingChanges,
    "findDangerousChanges": ()=>findDangerousChanges
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/polyfills/objectValues.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/keyMap.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/inspect.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/jsutils/invariant.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$printer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/printer.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$visitor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/language/visitor.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/scalars.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/type/definition.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$astFromValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/utilities/astFromValue.mjs [app-route] (ecmascript)");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
;
;
;
;
;
;
;
;
;
var BreakingChangeType = Object.freeze({
    TYPE_REMOVED: 'TYPE_REMOVED',
    TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',
    TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',
    VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',
    REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',
    IMPLEMENTED_INTERFACE_REMOVED: 'IMPLEMENTED_INTERFACE_REMOVED',
    FIELD_REMOVED: 'FIELD_REMOVED',
    FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',
    REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',
    ARG_REMOVED: 'ARG_REMOVED',
    ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',
    DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',
    DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',
    REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',
    DIRECTIVE_REPEATABLE_REMOVED: 'DIRECTIVE_REPEATABLE_REMOVED',
    DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'
});
var DangerousChangeType = Object.freeze({
    VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',
    TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',
    OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',
    OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',
    IMPLEMENTED_INTERFACE_ADDED: 'IMPLEMENTED_INTERFACE_ADDED',
    ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'
});
function findBreakingChanges(oldSchema, newSchema) {
    var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function(change) {
        return change.type in BreakingChangeType;
    });
    return breakingChanges;
}
function findDangerousChanges(oldSchema, newSchema) {
    var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function(change) {
        return change.type in DangerousChangeType;
    });
    return dangerousChanges;
}
function findSchemaChanges(oldSchema, newSchema) {
    return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));
}
function findDirectiveChanges(oldSchema, newSchema) {
    var schemaChanges = [];
    var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());
    for(var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++){
        var oldDirective = _directivesDiff$remov2[_i2];
        schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_REMOVED,
            description: "".concat(oldDirective.name, " was removed.")
        });
    }
    for(var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++){
        var _ref2 = _directivesDiff$persi2[_i4];
        var _oldDirective = _ref2[0];
        var newDirective = _ref2[1];
        var argsDiff = diff(_oldDirective.args, newDirective.args);
        for(var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++){
            var newArg = _argsDiff$added2[_i6];
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRequiredArgument"])(newArg)) {
                schemaChanges.push({
                    type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
                    description: "A required arg ".concat(newArg.name, " on directive ").concat(_oldDirective.name, " was added.")
                });
            }
        }
        for(var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++){
            var oldArg = _argsDiff$removed2[_i8];
            schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
                description: "".concat(oldArg.name, " was removed from ").concat(_oldDirective.name, ".")
            });
        }
        if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {
            schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
                description: "Repeatable flag was removed from ".concat(_oldDirective.name, ".")
            });
        }
        for(var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++){
            var location = _oldDirective$locatio2[_i10];
            if (newDirective.locations.indexOf(location) === -1) {
                schemaChanges.push({
                    type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
                    description: "".concat(location, " was removed from ").concat(_oldDirective.name, ".")
                });
            }
        }
    }
    return schemaChanges;
}
function findTypeChanges(oldSchema, newSchema) {
    var schemaChanges = [];
    var typesDiff = diff((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(oldSchema.getTypeMap()), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(newSchema.getTypeMap()));
    for(var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++){
        var oldType = _typesDiff$removed2[_i12];
        schemaChanges.push({
            type: BreakingChangeType.TYPE_REMOVED,
            description: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$scalars$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isSpecifiedScalarType"])(oldType) ? "Standard scalar ".concat(oldType.name, " was removed because it is not referenced anymore.") : "".concat(oldType.name, " was removed.")
        });
    }
    for(var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++){
        var _ref4 = _typesDiff$persisted2[_i14];
        var _oldType = _ref4[0];
        var newType = _ref4[1];
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isEnumType"])(_oldType) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isEnumType"])(newType)) {
            schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isUnionType"])(_oldType) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isUnionType"])(newType)) {
            schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(_oldType) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(newType)) {
            schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(_oldType) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(newType)) {
            schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        } else if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInterfaceType"])(_oldType) && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInterfaceType"])(newType)) {
            schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        } else if (_oldType.constructor !== newType.constructor) {
            schemaChanges.push({
                type: BreakingChangeType.TYPE_CHANGED_KIND,
                description: "".concat(_oldType.name, " changed from ") + "".concat(typeKindName(_oldType), " to ").concat(typeKindName(newType), ".")
            });
        }
    }
    return schemaChanges;
}
function findInputObjectTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var fieldsDiff = diff((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(oldType.getFields()), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(newType.getFields()));
    for(var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++){
        var newField = _fieldsDiff$added2[_i16];
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRequiredInputField"])(newField)) {
            schemaChanges.push({
                type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
                description: "A required field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
            });
        } else {
            schemaChanges.push({
                type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
                description: "An optional field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
            });
        }
    }
    for(var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++){
        var oldField = _fieldsDiff$removed2[_i18];
        schemaChanges.push({
            type: BreakingChangeType.FIELD_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
    }
    for(var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++){
        var _ref6 = _fieldsDiff$persisted2[_i20];
        var _oldField = _ref6[0];
        var _newField = _ref6[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);
        if (!isSafe) {
            schemaChanges.push({
                type: BreakingChangeType.FIELD_CHANGED_KIND,
                description: "".concat(oldType.name, ".").concat(_oldField.name, " changed type from ") + "".concat(String(_oldField.type), " to ").concat(String(_newField.type), ".")
            });
        }
    }
    return schemaChanges;
}
function findUnionTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());
    for(var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++){
        var newPossibleType = _possibleTypesDiff$ad2[_i22];
        schemaChanges.push({
            type: DangerousChangeType.TYPE_ADDED_TO_UNION,
            description: "".concat(newPossibleType.name, " was added to union type ").concat(oldType.name, ".")
        });
    }
    for(var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++){
        var oldPossibleType = _possibleTypesDiff$re2[_i24];
        schemaChanges.push({
            type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
            description: "".concat(oldPossibleType.name, " was removed from union type ").concat(oldType.name, ".")
        });
    }
    return schemaChanges;
}
function findEnumTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var valuesDiff = diff(oldType.getValues(), newType.getValues());
    for(var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++){
        var newValue = _valuesDiff$added2[_i26];
        schemaChanges.push({
            type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
            description: "".concat(newValue.name, " was added to enum type ").concat(oldType.name, ".")
        });
    }
    for(var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++){
        var oldValue = _valuesDiff$removed2[_i28];
        schemaChanges.push({
            type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
            description: "".concat(oldValue.name, " was removed from enum type ").concat(oldType.name, ".")
        });
    }
    return schemaChanges;
}
function findImplementedInterfacesChanges(oldType, newType) {
    var schemaChanges = [];
    var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());
    for(var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++){
        var newInterface = _interfacesDiff$added2[_i30];
        schemaChanges.push({
            type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
            description: "".concat(newInterface.name, " added to interfaces implemented by ").concat(oldType.name, ".")
        });
    }
    for(var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++){
        var oldInterface = _interfacesDiff$remov2[_i32];
        schemaChanges.push({
            type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
            description: "".concat(oldType.name, " no longer implements interface ").concat(oldInterface.name, ".")
        });
    }
    return schemaChanges;
}
function findFieldChanges(oldType, newType) {
    var schemaChanges = [];
    var fieldsDiff = diff((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(oldType.getFields()), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$polyfills$2f$objectValues$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(newType.getFields()));
    for(var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++){
        var oldField = _fieldsDiff$removed4[_i34];
        schemaChanges.push({
            type: BreakingChangeType.FIELD_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
    }
    for(var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++){
        var _ref8 = _fieldsDiff$persisted4[_i36];
        var _oldField2 = _ref8[0];
        var newField = _ref8[1];
        schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));
        var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);
        if (!isSafe) {
            schemaChanges.push({
                type: BreakingChangeType.FIELD_CHANGED_KIND,
                description: "".concat(oldType.name, ".").concat(_oldField2.name, " changed type from ") + "".concat(String(_oldField2.type), " to ").concat(String(newField.type), ".")
            });
        }
    }
    return schemaChanges;
}
function findArgChanges(oldType, oldField, newField) {
    var schemaChanges = [];
    var argsDiff = diff(oldField.args, newField.args);
    for(var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++){
        var oldArg = _argsDiff$removed4[_i38];
        schemaChanges.push({
            type: BreakingChangeType.ARG_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(oldArg.name, " was removed.")
        });
    }
    for(var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++){
        var _ref10 = _argsDiff$persisted2[_i40];
        var _oldArg = _ref10[0];
        var newArg = _ref10[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);
        if (!isSafe) {
            schemaChanges.push({
                type: BreakingChangeType.ARG_CHANGED_KIND,
                description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed type from ") + "".concat(String(_oldArg.type), " to ").concat(String(newArg.type), ".")
            });
        } else if (_oldArg.defaultValue !== undefined) {
            if (newArg.defaultValue === undefined) {
                schemaChanges.push({
                    type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                    description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " defaultValue was removed.")
                });
            } else {
                // Since we looking only for client's observable changes we should
                // compare default values in the same representation as they are
                // represented inside introspection.
                var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);
                var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);
                if (oldValueStr !== newValueStr) {
                    schemaChanges.push({
                        type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                        description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed defaultValue from ").concat(oldValueStr, " to ").concat(newValueStr, ".")
                    });
                }
            }
        }
    }
    for(var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++){
        var _newArg = _argsDiff$added4[_i42];
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isRequiredArgument"])(_newArg)) {
            schemaChanges.push({
                type: BreakingChangeType.REQUIRED_ARG_ADDED,
                description: "A required arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
            });
        } else {
            schemaChanges.push({
                type: DangerousChangeType.OPTIONAL_ARG_ADDED,
                description: "An optional arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
            });
        }
    }
    return schemaChanges;
}
function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(oldType)) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(oldType)) {
        // if they're both non-null, make sure the underlying types are compatible
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
    }
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNamedType"])(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
}
function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(oldType)) {
        // if they're both lists, make sure the underlying types are compatible
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isListType"])(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(oldType)) {
        return(// compatible
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe
        !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNonNullType"])(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType));
    } // if they're both named types, see if their names are equivalent
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isNamedType"])(newType) && oldType.name === newType.name;
}
function typeKindName(type) {
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isScalarType"])(type)) {
        return 'a Scalar type';
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isObjectType"])(type)) {
        return 'an Object type';
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInterfaceType"])(type)) {
        return 'an Interface type';
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isUnionType"])(type)) {
        return 'a Union type';
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isEnumType"])(type)) {
        return 'an Enum type';
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$type$2f$definition$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["isInputObjectType"])(type)) {
        return 'an Input type';
    } // istanbul ignore next (Not reachable. All possible named types have been considered)
    false || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0, 'Unexpected type: ' + (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$inspect$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(type));
}
function stringifyValue(value, type) {
    var ast = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$utilities$2f$astFromValue$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["astFromValue"])(value, type);
    ast != null || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$invariant$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(0);
    var sortedAST = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$visitor$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["visit"])(ast, {
        ObjectValue: function ObjectValue(objectNode) {
            var fields = [].concat(objectNode.fields).sort(function(fieldA, fieldB) {
                return fieldA.name.value.localeCompare(fieldB.name.value);
            });
            return _objectSpread(_objectSpread({}, objectNode), {}, {
                fields: fields
            });
        }
    });
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$language$2f$printer$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["print"])(sortedAST);
}
function diff(oldArray, newArray) {
    var added = [];
    var removed = [];
    var persisted = [];
    var oldMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(oldArray, function(_ref11) {
        var name = _ref11.name;
        return name;
    });
    var newMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$jsutils$2f$keyMap$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["default"])(newArray, function(_ref12) {
        var name = _ref12.name;
        return name;
    });
    for(var _i44 = 0; _i44 < oldArray.length; _i44++){
        var oldItem = oldArray[_i44];
        var newItem = newMap[oldItem.name];
        if (newItem === undefined) {
            removed.push(oldItem);
        } else {
            persisted.push([
                oldItem,
                newItem
            ]);
        }
    }
    for(var _i46 = 0; _i46 < newArray.length; _i46++){
        var _newItem = newArray[_i46];
        if (oldMap[_newItem.name] === undefined) {
            added.push(_newItem);
        }
    }
    return {
        added: added,
        persisted: persisted,
        removed: removed
    };
}
}),
"[project]/node_modules/graphql/utilities/findDeprecatedUsages.mjs [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "findDeprecatedUsages": ()=>findDeprecatedUsages
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$validation$2f$validate$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/validation/validate.mjs [app-route] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$validation$2f$rules$2f$custom$2f$NoDeprecatedCustomRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs [app-route] (ecmascript)");
;
;
function findDeprecatedUsages(schema, ast) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$validation$2f$validate$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["validate"])(schema, ast, [
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$graphql$2f$validation$2f$rules$2f$custom$2f$NoDeprecatedCustomRule$2e$mjs__$5b$app$2d$route$5d$__$28$ecmascript$29$__["NoDeprecatedCustomRule"]
    ]);
}
}),
"[project]/node_modules/graphql/utilities/valueFromASTUntyped.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.valueFromASTUntyped = valueFromASTUntyped;
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _keyValMap = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/keyValMap.js [app-route] (ecmascript)"));
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value
 * will reflect the provided GraphQL value AST.
 *
 * | GraphQL Value        | JavaScript Value |
 * | -------------------- | ---------------- |
 * | Input Object         | Object           |
 * | List                 | Array            |
 * | Boolean              | Boolean          |
 * | String / Enum        | String           |
 * | Int / Float          | Number           |
 * | Null                 | null             |
 *
 */ function valueFromASTUntyped(valueNode, variables) {
    switch(valueNode.kind){
        case _kinds.Kind.NULL:
            return null;
        case _kinds.Kind.INT:
            return parseInt(valueNode.value, 10);
        case _kinds.Kind.FLOAT:
            return parseFloat(valueNode.value);
        case _kinds.Kind.STRING:
        case _kinds.Kind.ENUM:
        case _kinds.Kind.BOOLEAN:
            return valueNode.value;
        case _kinds.Kind.LIST:
            return valueNode.values.map(function(node) {
                return valueFromASTUntyped(node, variables);
            });
        case _kinds.Kind.OBJECT:
            return (0, _keyValMap.default)(valueNode.fields, function(field) {
                return field.name.value;
            }, function(field) {
                return valueFromASTUntyped(field.value, variables);
            });
        case _kinds.Kind.VARIABLE:
            return variables === null || variables === void 0 ? void 0 : variables[valueNode.name.value];
    } // istanbul ignore next (Not reachable. All possible value nodes have been considered)
    false || (0, _invariant.default)(0, 'Unexpected value node: ' + (0, _inspect.default)(valueNode));
}
}}),
"[project]/node_modules/graphql/utilities/astFromValue.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.astFromValue = astFromValue;
var _isFinite = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/isFinite.js [app-route] (ecmascript)"));
var _arrayFrom3 = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/arrayFrom.js [app-route] (ecmascript)"));
var _objectValues3 = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/objectValues.js [app-route] (ecmascript)"));
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _isObjectLike = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/isObjectLike.js [app-route] (ecmascript)"));
var _isCollection = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/isCollection.js [app-route] (ecmascript)"));
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
var _scalars = __turbopack_context__.r("[project]/node_modules/graphql/type/scalars.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Produces a GraphQL Value AST given a JavaScript object.
 * Function will match JavaScript/JSON values to GraphQL AST schema format
 * by using suggested GraphQLInputType. For example:
 *
 *     astFromValue("value", GraphQLString)
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * JavaScript values.
 *
 * | JSON Value    | GraphQL Value        |
 * | ------------- | -------------------- |
 * | Object        | Input Object         |
 * | Array         | List                 |
 * | Boolean       | Boolean              |
 * | String        | String / Enum Value  |
 * | Number        | Int / Float          |
 * | Mixed         | Enum Value           |
 * | null          | NullValue            |
 *
 */ function astFromValue(value, type) {
    if ((0, _definition.isNonNullType)(type)) {
        var astValue = astFromValue(value, type.ofType);
        if ((astValue === null || astValue === void 0 ? void 0 : astValue.kind) === _kinds.Kind.NULL) {
            return null;
        }
        return astValue;
    } // only explicit null, not undefined, NaN
    if (value === null) {
        return {
            kind: _kinds.Kind.NULL
        };
    } // undefined
    if (value === undefined) {
        return null;
    } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but
    // the value is not an array, convert the value using the list's item type.
    if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;
        if ((0, _isCollection.default)(value)) {
            var valuesNodes = []; // Since we transpile for-of in loose mode it doesn't support iterators
            // and it's required to first convert iteratable into array
            for(var _i2 = 0, _arrayFrom2 = (0, _arrayFrom3.default)(value); _i2 < _arrayFrom2.length; _i2++){
                var item = _arrayFrom2[_i2];
                var itemNode = astFromValue(item, itemType);
                if (itemNode != null) {
                    valuesNodes.push(itemNode);
                }
            }
            return {
                kind: _kinds.Kind.LIST,
                values: valuesNodes
            };
        }
        return astFromValue(value, itemType);
    } // Populate the fields of the input object by creating ASTs from each value
    // in the JavaScript object according to the fields in the input type.
    if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.default)(value)) {
            return null;
        }
        var fieldNodes = [];
        for(var _i4 = 0, _objectValues2 = (0, _objectValues3.default)(type.getFields()); _i4 < _objectValues2.length; _i4++){
            var field = _objectValues2[_i4];
            var fieldValue = astFromValue(value[field.name], field.type);
            if (fieldValue) {
                fieldNodes.push({
                    kind: _kinds.Kind.OBJECT_FIELD,
                    name: {
                        kind: _kinds.Kind.NAME,
                        value: field.name
                    },
                    value: fieldValue
                });
            }
        }
        return {
            kind: _kinds.Kind.OBJECT,
            fields: fieldNodes
        };
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, _definition.isLeafType)(type)) {
        // Since value is an internally represented value, it must be serialized
        // to an externally represented value before converting into an AST.
        var serialized = type.serialize(value);
        if (serialized == null) {
            return null;
        } // Others serialize based on their corresponding JavaScript scalar types.
        if (typeof serialized === 'boolean') {
            return {
                kind: _kinds.Kind.BOOLEAN,
                value: serialized
            };
        } // JavaScript numbers can be Int or Float values.
        if (typeof serialized === 'number' && (0, _isFinite.default)(serialized)) {
            var stringNum = String(serialized);
            return integerStringRegExp.test(stringNum) ? {
                kind: _kinds.Kind.INT,
                value: stringNum
            } : {
                kind: _kinds.Kind.FLOAT,
                value: stringNum
            };
        }
        if (typeof serialized === 'string') {
            // Enum types use Enum literals.
            if ((0, _definition.isEnumType)(type)) {
                return {
                    kind: _kinds.Kind.ENUM,
                    value: serialized
                };
            } // ID types can use Int literals.
            if (type === _scalars.GraphQLID && integerStringRegExp.test(serialized)) {
                return {
                    kind: _kinds.Kind.INT,
                    value: serialized
                };
            }
            return {
                kind: _kinds.Kind.STRING,
                value: serialized
            };
        }
        throw new TypeError("Cannot convert value to AST: ".concat((0, _inspect.default)(serialized), "."));
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
}
/**
 * IntValue:
 *   - NegativeSign? 0
 *   - NegativeSign? NonZeroDigit ( Digit+ )?
 */ var integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;
}}),
"[project]/node_modules/graphql/utilities/assertValidName.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.assertValidName = assertValidName;
exports.isValidNameError = isValidNameError;
var _devAssert = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/devAssert.js [app-route] (ecmascript)"));
var _GraphQLError = __turbopack_context__.r("[project]/node_modules/graphql/error/GraphQLError.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/**
 * Upholds the spec rules about naming.
 */ function assertValidName(name) {
    var error = isValidNameError(name);
    if (error) {
        throw error;
    }
    return name;
}
/**
 * Returns an Error if a name is invalid.
 */ function isValidNameError(name) {
    typeof name === 'string' || (0, _devAssert.default)(0, 'Expected name to be a string.');
    if (name.length > 1 && name[0] === '_' && name[1] === '_') {
        return new _GraphQLError.GraphQLError("Name \"".concat(name, "\" must not begin with \"__\", which is reserved by GraphQL introspection."));
    }
    if (!NAME_RX.test(name)) {
        return new _GraphQLError.GraphQLError("Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"".concat(name, "\" does not."));
    }
}
}}),
"[project]/node_modules/graphql/utilities/typeComparators.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEqualType = isEqualType;
exports.isTypeSubTypeOf = isTypeSubTypeOf;
exports.doTypesOverlap = doTypesOverlap;
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
/**
 * Provided two types, return true if the types are equal (invariant).
 */ function isEqualType(typeA, typeB) {
    // Equivalent types are equal.
    if (typeA === typeB) {
        return true;
    } // If either type is non-null, the other must also be non-null.
    if ((0, _definition.isNonNullType)(typeA) && (0, _definition.isNonNullType)(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
    } // If either type is a list, the other must also be a list.
    if ((0, _definition.isListType)(typeA) && (0, _definition.isListType)(typeB)) {
        return isEqualType(typeA.ofType, typeB.ofType);
    } // Otherwise the types are not equal.
    return false;
}
/**
 * Provided a type and a super type, return true if the first type is either
 * equal or a subset of the second super type (covariant).
 */ function isTypeSubTypeOf(schema, maybeSubType, superType) {
    // Equivalent type is a valid subtype
    if (maybeSubType === superType) {
        return true;
    } // If superType is non-null, maybeSubType must also be non-null.
    if ((0, _definition.isNonNullType)(superType)) {
        if ((0, _definition.isNonNullType)(maybeSubType)) {
            return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }
        return false;
    }
    if ((0, _definition.isNonNullType)(maybeSubType)) {
        // If superType is nullable, maybeSubType may be non-null or nullable.
        return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);
    } // If superType type is a list, maybeSubType type must also be a list.
    if ((0, _definition.isListType)(superType)) {
        if ((0, _definition.isListType)(maybeSubType)) {
            return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);
        }
        return false;
    }
    if ((0, _definition.isListType)(maybeSubType)) {
        // If superType is not a list, maybeSubType must also be not a list.
        return false;
    } // If superType type is an abstract type, check if it is super type of maybeSubType.
    // Otherwise, the child type is not a valid subtype of the parent type.
    return (0, _definition.isAbstractType)(superType) && ((0, _definition.isInterfaceType)(maybeSubType) || (0, _definition.isObjectType)(maybeSubType)) && schema.isSubType(superType, maybeSubType);
}
/**
 * Provided two composite types, determine if they "overlap". Two composite
 * types overlap when the Sets of possible concrete types for each intersect.
 *
 * This is often used to determine if a fragment of a given type could possibly
 * be visited in a context of another type.
 *
 * This function is commutative.
 */ function doTypesOverlap(schema, typeA, typeB) {
    // Equivalent types overlap
    if (typeA === typeB) {
        return true;
    }
    if ((0, _definition.isAbstractType)(typeA)) {
        if ((0, _definition.isAbstractType)(typeB)) {
            // If both types are abstract, then determine if there is any intersection
            // between possible concrete types of each.
            return schema.getPossibleTypes(typeA).some(function(type) {
                return schema.isSubType(typeB, type);
            });
        } // Determine if the latter type is a possible concrete type of the former.
        return schema.isSubType(typeA, typeB);
    }
    if ((0, _definition.isAbstractType)(typeB)) {
        // Determine if the former type is a possible concrete type of the latter.
        return schema.isSubType(typeB, typeA);
    } // Otherwise the types do not overlap.
    return false;
}
}}),
"[project]/node_modules/graphql/utilities/typeFromAST.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.typeFromAST = typeFromAST;
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function typeFromAST(schema, typeNode) {
    /* eslint-enable no-redeclare */ var innerType;
    if (typeNode.kind === _kinds.Kind.LIST_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && (0, _definition.GraphQLList)(innerType);
    }
    if (typeNode.kind === _kinds.Kind.NON_NULL_TYPE) {
        innerType = typeFromAST(schema, typeNode.type);
        return innerType && (0, _definition.GraphQLNonNull)(innerType);
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if (typeNode.kind === _kinds.Kind.NAMED_TYPE) {
        return schema.getType(typeNode.name.value);
    } // istanbul ignore next (Not reachable. All possible type nodes have been considered)
    false || (0, _invariant.default)(0, 'Unexpected type node: ' + (0, _inspect.default)(typeNode));
}
}}),
"[project]/node_modules/graphql/utilities/getOperationRootType.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getOperationRootType = getOperationRootType;
var _GraphQLError = __turbopack_context__.r("[project]/node_modules/graphql/error/GraphQLError.js [app-route] (ecmascript)");
/**
 * Extracts the root type of the operation from the schema.
 */ function getOperationRootType(schema, operation) {
    if (operation.operation === 'query') {
        var queryType = schema.getQueryType();
        if (!queryType) {
            throw new _GraphQLError.GraphQLError('Schema does not define the required query root type.', operation);
        }
        return queryType;
    }
    if (operation.operation === 'mutation') {
        var mutationType = schema.getMutationType();
        if (!mutationType) {
            throw new _GraphQLError.GraphQLError('Schema is not configured for mutations.', operation);
        }
        return mutationType;
    }
    if (operation.operation === 'subscription') {
        var subscriptionType = schema.getSubscriptionType();
        if (!subscriptionType) {
            throw new _GraphQLError.GraphQLError('Schema is not configured for subscriptions.', operation);
        }
        return subscriptionType;
    }
    throw new _GraphQLError.GraphQLError('Can only have query, mutation and subscription operations.', operation);
}
}}),
"[project]/node_modules/graphql/utilities/valueFromAST.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.valueFromAST = valueFromAST;
var _objectValues3 = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/objectValues.js [app-route] (ecmascript)"));
var _keyMap = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/keyMap.js [app-route] (ecmascript)"));
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Produces a JavaScript value given a GraphQL Value AST.
 *
 * A GraphQL type must be provided, which will be used to interpret different
 * GraphQL Value literals.
 *
 * Returns `undefined` when the value could not be validly coerced according to
 * the provided type.
 *
 * | GraphQL Value        | JSON Value    |
 * | -------------------- | ------------- |
 * | Input Object         | Object        |
 * | List                 | Array         |
 * | Boolean              | Boolean       |
 * | String               | String        |
 * | Int / Float          | Number        |
 * | Enum Value           | Mixed         |
 * | NullValue            | null          |
 *
 */ function valueFromAST(valueNode, type, variables) {
    if (!valueNode) {
        // When there is no node, then there is also no value.
        // Importantly, this is different from returning the value null.
        return;
    }
    if (valueNode.kind === _kinds.Kind.VARIABLE) {
        var variableName = valueNode.name.value;
        if (variables == null || variables[variableName] === undefined) {
            // No valid return value.
            return;
        }
        var variableValue = variables[variableName];
        if (variableValue === null && (0, _definition.isNonNullType)(type)) {
            return; // Invalid: intentionally return no value.
        } // Note: This does no further checking that this variable is correct.
        // This assumes that this query has been validated and the variable
        // usage here is of the correct type.
        return variableValue;
    }
    if ((0, _definition.isNonNullType)(type)) {
        if (valueNode.kind === _kinds.Kind.NULL) {
            return; // Invalid: intentionally return no value.
        }
        return valueFromAST(valueNode, type.ofType, variables);
    }
    if (valueNode.kind === _kinds.Kind.NULL) {
        // This is explicitly returning the value null.
        return null;
    }
    if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;
        if (valueNode.kind === _kinds.Kind.LIST) {
            var coercedValues = [];
            for(var _i2 = 0, _valueNode$values2 = valueNode.values; _i2 < _valueNode$values2.length; _i2++){
                var itemNode = _valueNode$values2[_i2];
                if (isMissingVariable(itemNode, variables)) {
                    // If an array contains a missing variable, it is either coerced to
                    // null or if the item type is non-null, it considered invalid.
                    if ((0, _definition.isNonNullType)(itemType)) {
                        return; // Invalid: intentionally return no value.
                    }
                    coercedValues.push(null);
                } else {
                    var itemValue = valueFromAST(itemNode, itemType, variables);
                    if (itemValue === undefined) {
                        return; // Invalid: intentionally return no value.
                    }
                    coercedValues.push(itemValue);
                }
            }
            return coercedValues;
        }
        var coercedValue = valueFromAST(valueNode, itemType, variables);
        if (coercedValue === undefined) {
            return; // Invalid: intentionally return no value.
        }
        return [
            coercedValue
        ];
    }
    if ((0, _definition.isInputObjectType)(type)) {
        if (valueNode.kind !== _kinds.Kind.OBJECT) {
            return; // Invalid: intentionally return no value.
        }
        var coercedObj = Object.create(null);
        var fieldNodes = (0, _keyMap.default)(valueNode.fields, function(field) {
            return field.name.value;
        });
        for(var _i4 = 0, _objectValues2 = (0, _objectValues3.default)(type.getFields()); _i4 < _objectValues2.length; _i4++){
            var field = _objectValues2[_i4];
            var fieldNode = fieldNodes[field.name];
            if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {
                if (field.defaultValue !== undefined) {
                    coercedObj[field.name] = field.defaultValue;
                } else if ((0, _definition.isNonNullType)(field.type)) {
                    return; // Invalid: intentionally return no value.
                }
                continue;
            }
            var fieldValue = valueFromAST(fieldNode.value, field.type, variables);
            if (fieldValue === undefined) {
                return; // Invalid: intentionally return no value.
            }
            coercedObj[field.name] = fieldValue;
        }
        return coercedObj;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, _definition.isLeafType)(type)) {
        // Scalars and Enums fulfill parsing a literal value via parseLiteral().
        // Invalid values represent a failure to parse correctly, in which case
        // no value is returned.
        var result;
        try {
            result = type.parseLiteral(valueNode, variables);
        } catch (_error) {
            return; // Invalid: intentionally return no value.
        }
        if (result === undefined) {
            return; // Invalid: intentionally return no value.
        }
        return result;
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
} // Returns true if the provided valueNode is a variable which is not defined
// in the set of variables.
function isMissingVariable(valueNode, variables) {
    return valueNode.kind === _kinds.Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);
}
}}),
"[project]/node_modules/graphql/utilities/coerceInputValue.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.coerceInputValue = coerceInputValue;
var _arrayFrom = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/arrayFrom.js [app-route] (ecmascript)"));
var _objectValues3 = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/objectValues.js [app-route] (ecmascript)"));
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _didYouMean = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/didYouMean.js [app-route] (ecmascript)"));
var _isObjectLike = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/isObjectLike.js [app-route] (ecmascript)"));
var _isCollection = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/isCollection.js [app-route] (ecmascript)"));
var _suggestionList = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/suggestionList.js [app-route] (ecmascript)"));
var _printPathArray = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/printPathArray.js [app-route] (ecmascript)"));
var _Path = __turbopack_context__.r("[project]/node_modules/graphql/jsutils/Path.js [app-route] (ecmascript)");
var _GraphQLError = __turbopack_context__.r("[project]/node_modules/graphql/error/GraphQLError.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Coerces a JavaScript value given a GraphQL Input Type.
 */ function coerceInputValue(inputValue, type) {
    var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;
    return coerceInputValueImpl(inputValue, type, onError);
}
function defaultOnError(path, invalidValue, error) {
    var errorPrefix = 'Invalid value ' + (0, _inspect.default)(invalidValue);
    if (path.length > 0) {
        errorPrefix += " at \"value".concat((0, _printPathArray.default)(path), "\"");
    }
    error.message = errorPrefix + ': ' + error.message;
    throw error;
}
function coerceInputValueImpl(inputValue, type, onError, path) {
    if ((0, _definition.isNonNullType)(type)) {
        if (inputValue != null) {
            return coerceInputValueImpl(inputValue, type.ofType, onError, path);
        }
        onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected non-nullable type \"".concat((0, _inspect.default)(type), "\" not to be null.")));
        return;
    }
    if (inputValue == null) {
        // Explicitly return the value null.
        return null;
    }
    if ((0, _definition.isListType)(type)) {
        var itemType = type.ofType;
        if ((0, _isCollection.default)(inputValue)) {
            return (0, _arrayFrom.default)(inputValue, function(itemValue, index) {
                var itemPath = (0, _Path.addPath)(path, index, undefined);
                return coerceInputValueImpl(itemValue, itemType, onError, itemPath);
            });
        } // Lists accept a non-list value as a list of one.
        return [
            coerceInputValueImpl(inputValue, itemType, onError, path)
        ];
    }
    if ((0, _definition.isInputObjectType)(type)) {
        if (!(0, _isObjectLike.default)(inputValue)) {
            onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\" to be an object.")));
            return;
        }
        var coercedValue = {};
        var fieldDefs = type.getFields();
        for(var _i2 = 0, _objectValues2 = (0, _objectValues3.default)(fieldDefs); _i2 < _objectValues2.length; _i2++){
            var field = _objectValues2[_i2];
            var fieldValue = inputValue[field.name];
            if (fieldValue === undefined) {
                if (field.defaultValue !== undefined) {
                    coercedValue[field.name] = field.defaultValue;
                } else if ((0, _definition.isNonNullType)(field.type)) {
                    var typeStr = (0, _inspect.default)(field.type);
                    onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Field \"".concat(field.name, "\" of required type \"").concat(typeStr, "\" was not provided.")));
                }
                continue;
            }
            coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, (0, _Path.addPath)(path, field.name, type.name));
        } // Ensure every provided field is defined.
        for(var _i4 = 0, _Object$keys2 = Object.keys(inputValue); _i4 < _Object$keys2.length; _i4++){
            var fieldName = _Object$keys2[_i4];
            if (!fieldDefs[fieldName]) {
                var suggestions = (0, _suggestionList.default)(fieldName, Object.keys(type.getFields()));
                onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Field \"".concat(fieldName, "\" is not defined by type \"").concat(type.name, "\".") + (0, _didYouMean.default)(suggestions)));
            }
        }
        return coercedValue;
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, _definition.isLeafType)(type)) {
        var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),
        // which can throw to indicate failure. If it throws, maintain a reference
        // to the original error.
        try {
            parseResult = type.parseValue(inputValue);
        } catch (error) {
            if (error instanceof _GraphQLError.GraphQLError) {
                onError((0, _Path.pathToArray)(path), inputValue, error);
            } else {
                onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\". ") + error.message, undefined, undefined, undefined, undefined, error));
            }
            return;
        }
        if (parseResult === undefined) {
            onError((0, _Path.pathToArray)(path), inputValue, new _GraphQLError.GraphQLError("Expected type \"".concat(type.name, "\".")));
        }
        return parseResult;
    } // istanbul ignore next (Not reachable. All possible input types have been considered)
    false || (0, _invariant.default)(0, 'Unexpected input type: ' + (0, _inspect.default)(type));
}
}}),
"[project]/node_modules/graphql/utilities/getIntrospectionQuery.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getIntrospectionQuery = getIntrospectionQuery;
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function getIntrospectionQuery(options) {
    var optionsWithDefault = _objectSpread({
        descriptions: true,
        specifiedByUrl: false,
        directiveIsRepeatable: false,
        schemaDescription: false
    }, options);
    var descriptions = optionsWithDefault.descriptions ? 'description' : '';
    var specifiedByUrl = optionsWithDefault.specifiedByUrl ? 'specifiedByUrl' : '';
    var directiveIsRepeatable = optionsWithDefault.directiveIsRepeatable ? 'isRepeatable' : '';
    var schemaDescription = optionsWithDefault.schemaDescription ? descriptions : '';
    return "\n    query IntrospectionQuery {\n      __schema {\n        ".concat(schemaDescription, "\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(descriptions, "\n          ").concat(directiveIsRepeatable, "\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(descriptions, "\n      ").concat(specifiedByUrl, "\n      fields(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(descriptions, "\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(descriptions, "\n      type { ...TypeRef }\n      defaultValue\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ");
}
}}),
"[project]/node_modules/graphql/utilities/getOperationAST.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getOperationAST = getOperationAST;
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
/**
 * Returns an operation AST given a document AST and optionally an operation
 * name. If a name is not provided, an operation is only returned if only one is
 * provided in the document.
 */ function getOperationAST(documentAST, operationName) {
    var operation = null;
    for(var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++){
        var definition = _documentAST$definiti2[_i2];
        if (definition.kind === _kinds.Kind.OPERATION_DEFINITION) {
            var _definition$name;
            if (operationName == null) {
                // If no operation name was provided, only return an Operation if there
                // is one defined in the document. Upon encountering the second, return
                // null.
                if (operation) {
                    return null;
                }
                operation = definition;
            } else if (((_definition$name = definition.name) === null || _definition$name === void 0 ? void 0 : _definition$name.value) === operationName) {
                return definition;
            }
        }
    }
    return operation;
}
}}),
"[project]/node_modules/graphql/utilities/introspectionFromSchema.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.introspectionFromSchema = introspectionFromSchema;
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _parser = __turbopack_context__.r("[project]/node_modules/graphql/language/parser.js [app-route] (ecmascript)");
var _execute = __turbopack_context__.r("[project]/node_modules/graphql/execution/execute.js [app-route] (ecmascript)");
var _getIntrospectionQuery = __turbopack_context__.r("[project]/node_modules/graphql/utilities/getIntrospectionQuery.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
/**
 * Build an IntrospectionQuery from a GraphQLSchema
 *
 * IntrospectionQuery is useful for utilities that care about type and field
 * relationships, but do not need to traverse through those relationships.
 *
 * This is the inverse of buildClientSchema. The primary use case is outside
 * of the server context, for instance when doing schema comparisons.
 */ function introspectionFromSchema(schema, options) {
    var optionsWithDefaults = _objectSpread({
        directiveIsRepeatable: true,
        schemaDescription: true
    }, options);
    var document = (0, _parser.parse)((0, _getIntrospectionQuery.getIntrospectionQuery)(optionsWithDefaults));
    var result = (0, _execute.executeSync)({
        schema: schema,
        document: document
    });
    !result.errors && result.data || (0, _invariant.default)(0);
    return result.data;
}
}}),
"[project]/node_modules/graphql/utilities/buildClientSchema.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.buildClientSchema = buildClientSchema;
var _objectValues = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/objectValues.js [app-route] (ecmascript)"));
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _devAssert = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/devAssert.js [app-route] (ecmascript)"));
var _keyValMap = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/keyValMap.js [app-route] (ecmascript)"));
var _isObjectLike = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/isObjectLike.js [app-route] (ecmascript)"));
var _parser = __turbopack_context__.r("[project]/node_modules/graphql/language/parser.js [app-route] (ecmascript)");
var _schema = __turbopack_context__.r("[project]/node_modules/graphql/type/schema.js [app-route] (ecmascript)");
var _directives = __turbopack_context__.r("[project]/node_modules/graphql/type/directives.js [app-route] (ecmascript)");
var _scalars = __turbopack_context__.r("[project]/node_modules/graphql/type/scalars.js [app-route] (ecmascript)");
var _introspection = __turbopack_context__.r("[project]/node_modules/graphql/type/introspection.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
var _valueFromAST = __turbopack_context__.r("[project]/node_modules/graphql/utilities/valueFromAST.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Build a GraphQLSchema for use by client tools.
 *
 * Given the result of a client running the introspection query, creates and
 * returns a GraphQLSchema instance which can be then used with all graphql-js
 * tools, but cannot be used to execute a query, as introspection does not
 * represent the "resolver", "parse" or "serialize" functions or any other
 * server-internal mechanisms.
 *
 * This function expects a complete introspection result. Don't forget to check
 * the "errors" field of a server response before calling this function.
 */ function buildClientSchema(introspection, options) {
    (0, _isObjectLike.default)(introspection) && (0, _isObjectLike.default)(introspection.__schema) || (0, _devAssert.default)(0, "Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ".concat((0, _inspect.default)(introspection), ".")); // Get the schema from the introspection result.
    var schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.
    var typeMap = (0, _keyValMap.default)(schemaIntrospection.types, function(typeIntrospection) {
        return typeIntrospection.name;
    }, function(typeIntrospection) {
        return buildType(typeIntrospection);
    }); // Include standard types only if they are used.
    for(var _i2 = 0, _ref2 = [].concat(_scalars.specifiedScalarTypes, _introspection.introspectionTypes); _i2 < _ref2.length; _i2++){
        var stdType = _ref2[_i2];
        if (typeMap[stdType.name]) {
            typeMap[stdType.name] = stdType;
        }
    } // Get the root Query, Mutation, and Subscription types.
    var queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;
    var mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;
    var subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if
    // directives were not queried for.
    var directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.
    return new _schema.GraphQLSchema({
        description: schemaIntrospection.description,
        query: queryType,
        mutation: mutationType,
        subscription: subscriptionType,
        types: (0, _objectValues.default)(typeMap),
        directives: directives,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
    }); // Given a type reference in introspection, return the GraphQLType instance.
    //TURBOPACK unreachable
    ;
    // preferring cached instances before building new instances.
    function getType(typeRef) {
        if (typeRef.kind === _introspection.TypeKind.LIST) {
            var itemRef = typeRef.ofType;
            if (!itemRef) {
                throw new Error('Decorated type deeper than introspection query.');
            }
            return (0, _definition.GraphQLList)(getType(itemRef));
        }
        if (typeRef.kind === _introspection.TypeKind.NON_NULL) {
            var nullableRef = typeRef.ofType;
            if (!nullableRef) {
                throw new Error('Decorated type deeper than introspection query.');
            }
            var nullableType = getType(nullableRef);
            return (0, _definition.GraphQLNonNull)((0, _definition.assertNullableType)(nullableType));
        }
        return getNamedType(typeRef);
    }
    function getNamedType(typeRef) {
        var typeName = typeRef.name;
        if (!typeName) {
            throw new Error("Unknown type reference: ".concat((0, _inspect.default)(typeRef), "."));
        }
        var type = typeMap[typeName];
        if (!type) {
            throw new Error("Invalid or incomplete schema, unknown type: ".concat(typeName, ". Ensure that a full introspection query is used in order to build a client schema."));
        }
        return type;
    }
    function getObjectType(typeRef) {
        return (0, _definition.assertObjectType)(getNamedType(typeRef));
    }
    function getInterfaceType(typeRef) {
        return (0, _definition.assertInterfaceType)(getNamedType(typeRef));
    } // Given a type's introspection result, construct the correct
    // GraphQLType instance.
    function buildType(type) {
        if (type != null && type.name != null && type.kind != null) {
            switch(type.kind){
                case _introspection.TypeKind.SCALAR:
                    return buildScalarDef(type);
                case _introspection.TypeKind.OBJECT:
                    return buildObjectDef(type);
                case _introspection.TypeKind.INTERFACE:
                    return buildInterfaceDef(type);
                case _introspection.TypeKind.UNION:
                    return buildUnionDef(type);
                case _introspection.TypeKind.ENUM:
                    return buildEnumDef(type);
                case _introspection.TypeKind.INPUT_OBJECT:
                    return buildInputObjectDef(type);
            }
        }
        var typeStr = (0, _inspect.default)(type);
        throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(typeStr, "."));
    }
    function buildScalarDef(scalarIntrospection) {
        return new _definition.GraphQLScalarType({
            name: scalarIntrospection.name,
            description: scalarIntrospection.description,
            specifiedByUrl: scalarIntrospection.specifiedByUrl
        });
    }
    function buildImplementationsList(implementingIntrospection) {
        // TODO: Temporary workaround until GraphQL ecosystem will fully support
        // 'interfaces' on interface types.
        if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === _introspection.TypeKind.INTERFACE) {
            return [];
        }
        if (!implementingIntrospection.interfaces) {
            var implementingIntrospectionStr = (0, _inspect.default)(implementingIntrospection);
            throw new Error("Introspection result missing interfaces: ".concat(implementingIntrospectionStr, "."));
        }
        return implementingIntrospection.interfaces.map(getInterfaceType);
    }
    function buildObjectDef(objectIntrospection) {
        return new _definition.GraphQLObjectType({
            name: objectIntrospection.name,
            description: objectIntrospection.description,
            interfaces: function interfaces() {
                return buildImplementationsList(objectIntrospection);
            },
            fields: function fields() {
                return buildFieldDefMap(objectIntrospection);
            }
        });
    }
    function buildInterfaceDef(interfaceIntrospection) {
        return new _definition.GraphQLInterfaceType({
            name: interfaceIntrospection.name,
            description: interfaceIntrospection.description,
            interfaces: function interfaces() {
                return buildImplementationsList(interfaceIntrospection);
            },
            fields: function fields() {
                return buildFieldDefMap(interfaceIntrospection);
            }
        });
    }
    function buildUnionDef(unionIntrospection) {
        if (!unionIntrospection.possibleTypes) {
            var unionIntrospectionStr = (0, _inspect.default)(unionIntrospection);
            throw new Error("Introspection result missing possibleTypes: ".concat(unionIntrospectionStr, "."));
        }
        return new _definition.GraphQLUnionType({
            name: unionIntrospection.name,
            description: unionIntrospection.description,
            types: function types() {
                return unionIntrospection.possibleTypes.map(getObjectType);
            }
        });
    }
    function buildEnumDef(enumIntrospection) {
        if (!enumIntrospection.enumValues) {
            var enumIntrospectionStr = (0, _inspect.default)(enumIntrospection);
            throw new Error("Introspection result missing enumValues: ".concat(enumIntrospectionStr, "."));
        }
        return new _definition.GraphQLEnumType({
            name: enumIntrospection.name,
            description: enumIntrospection.description,
            values: (0, _keyValMap.default)(enumIntrospection.enumValues, function(valueIntrospection) {
                return valueIntrospection.name;
            }, function(valueIntrospection) {
                return {
                    description: valueIntrospection.description,
                    deprecationReason: valueIntrospection.deprecationReason
                };
            })
        });
    }
    function buildInputObjectDef(inputObjectIntrospection) {
        if (!inputObjectIntrospection.inputFields) {
            var inputObjectIntrospectionStr = (0, _inspect.default)(inputObjectIntrospection);
            throw new Error("Introspection result missing inputFields: ".concat(inputObjectIntrospectionStr, "."));
        }
        return new _definition.GraphQLInputObjectType({
            name: inputObjectIntrospection.name,
            description: inputObjectIntrospection.description,
            fields: function fields() {
                return buildInputValueDefMap(inputObjectIntrospection.inputFields);
            }
        });
    }
    function buildFieldDefMap(typeIntrospection) {
        if (!typeIntrospection.fields) {
            throw new Error("Introspection result missing fields: ".concat((0, _inspect.default)(typeIntrospection), "."));
        }
        return (0, _keyValMap.default)(typeIntrospection.fields, function(fieldIntrospection) {
            return fieldIntrospection.name;
        }, buildField);
    }
    function buildField(fieldIntrospection) {
        var type = getType(fieldIntrospection.type);
        if (!(0, _definition.isOutputType)(type)) {
            var typeStr = (0, _inspect.default)(type);
            throw new Error("Introspection must provide output type for fields, but received: ".concat(typeStr, "."));
        }
        if (!fieldIntrospection.args) {
            var fieldIntrospectionStr = (0, _inspect.default)(fieldIntrospection);
            throw new Error("Introspection result missing field args: ".concat(fieldIntrospectionStr, "."));
        }
        return {
            description: fieldIntrospection.description,
            deprecationReason: fieldIntrospection.deprecationReason,
            type: type,
            args: buildInputValueDefMap(fieldIntrospection.args)
        };
    }
    function buildInputValueDefMap(inputValueIntrospections) {
        return (0, _keyValMap.default)(inputValueIntrospections, function(inputValue) {
            return inputValue.name;
        }, buildInputValue);
    }
    function buildInputValue(inputValueIntrospection) {
        var type = getType(inputValueIntrospection.type);
        if (!(0, _definition.isInputType)(type)) {
            var typeStr = (0, _inspect.default)(type);
            throw new Error("Introspection must provide input type for arguments, but received: ".concat(typeStr, "."));
        }
        var defaultValue = inputValueIntrospection.defaultValue != null ? (0, _valueFromAST.valueFromAST)((0, _parser.parseValue)(inputValueIntrospection.defaultValue), type) : undefined;
        return {
            description: inputValueIntrospection.description,
            type: type,
            defaultValue: defaultValue
        };
    }
    function buildDirective(directiveIntrospection) {
        if (!directiveIntrospection.args) {
            var directiveIntrospectionStr = (0, _inspect.default)(directiveIntrospection);
            throw new Error("Introspection result missing directive args: ".concat(directiveIntrospectionStr, "."));
        }
        if (!directiveIntrospection.locations) {
            var _directiveIntrospectionStr = (0, _inspect.default)(directiveIntrospection);
            throw new Error("Introspection result missing directive locations: ".concat(_directiveIntrospectionStr, "."));
        }
        return new _directives.GraphQLDirective({
            name: directiveIntrospection.name,
            description: directiveIntrospection.description,
            isRepeatable: directiveIntrospection.isRepeatable,
            locations: directiveIntrospection.locations.slice(),
            args: buildInputValueDefMap(directiveIntrospection.args)
        });
    }
}
}}),
"[project]/node_modules/graphql/utilities/TypeInfo.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.visitWithTypeInfo = visitWithTypeInfo;
exports.TypeInfo = void 0;
var _find = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/find.js [app-route] (ecmascript)"));
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
var _ast = __turbopack_context__.r("[project]/node_modules/graphql/language/ast.js [app-route] (ecmascript)");
var _visitor = __turbopack_context__.r("[project]/node_modules/graphql/language/visitor.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
var _introspection = __turbopack_context__.r("[project]/node_modules/graphql/type/introspection.js [app-route] (ecmascript)");
var _typeFromAST = __turbopack_context__.r("[project]/node_modules/graphql/utilities/typeFromAST.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * TypeInfo is a utility class which, given a GraphQL schema, can keep track
 * of the current field and type definitions at any point in a GraphQL document
 * AST during a recursive descent by calling `enter(node)` and `leave(node)`.
 */ var TypeInfo = /*#__PURE__*/ function() {
    function TypeInfo(schema, // to support non-spec-compliant code bases. You should never need to use it.
    // It may disappear in the future.
    getFieldDefFn, // beginning somewhere other than documents.
    initialType) {
        this._schema = schema;
        this._typeStack = [];
        this._parentTypeStack = [];
        this._inputTypeStack = [];
        this._fieldDefStack = [];
        this._defaultValueStack = [];
        this._directive = null;
        this._argument = null;
        this._enumValue = null;
        this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;
        if (initialType) {
            if ((0, _definition.isInputType)(initialType)) {
                this._inputTypeStack.push(initialType);
            }
            if ((0, _definition.isCompositeType)(initialType)) {
                this._parentTypeStack.push(initialType);
            }
            if ((0, _definition.isOutputType)(initialType)) {
                this._typeStack.push(initialType);
            }
        }
    }
    var _proto = TypeInfo.prototype;
    _proto.getType = function getType() {
        if (this._typeStack.length > 0) {
            return this._typeStack[this._typeStack.length - 1];
        }
    };
    _proto.getParentType = function getParentType() {
        if (this._parentTypeStack.length > 0) {
            return this._parentTypeStack[this._parentTypeStack.length - 1];
        }
    };
    _proto.getInputType = function getInputType() {
        if (this._inputTypeStack.length > 0) {
            return this._inputTypeStack[this._inputTypeStack.length - 1];
        }
    };
    _proto.getParentInputType = function getParentInputType() {
        if (this._inputTypeStack.length > 1) {
            return this._inputTypeStack[this._inputTypeStack.length - 2];
        }
    };
    _proto.getFieldDef = function getFieldDef() {
        if (this._fieldDefStack.length > 0) {
            return this._fieldDefStack[this._fieldDefStack.length - 1];
        }
    };
    _proto.getDefaultValue = function getDefaultValue() {
        if (this._defaultValueStack.length > 0) {
            return this._defaultValueStack[this._defaultValueStack.length - 1];
        }
    };
    _proto.getDirective = function getDirective() {
        return this._directive;
    };
    _proto.getArgument = function getArgument() {
        return this._argument;
    };
    _proto.getEnumValue = function getEnumValue() {
        return this._enumValue;
    };
    _proto.enter = function enter(node) {
        var schema = this._schema; // Note: many of the types below are explicitly typed as "mixed" to drop
        // any assumptions of a valid schema to ensure runtime types are properly
        // checked before continuing since TypeInfo is used as part of validation
        // which occurs before guarantees of schema and document validity.
        switch(node.kind){
            case _kinds.Kind.SELECTION_SET:
                {
                    var namedType = (0, _definition.getNamedType)(this.getType());
                    this._parentTypeStack.push((0, _definition.isCompositeType)(namedType) ? namedType : undefined);
                    break;
                }
            case _kinds.Kind.FIELD:
                {
                    var parentType = this.getParentType();
                    var fieldDef;
                    var fieldType;
                    if (parentType) {
                        fieldDef = this._getFieldDef(schema, parentType, node);
                        if (fieldDef) {
                            fieldType = fieldDef.type;
                        }
                    }
                    this._fieldDefStack.push(fieldDef);
                    this._typeStack.push((0, _definition.isOutputType)(fieldType) ? fieldType : undefined);
                    break;
                }
            case _kinds.Kind.DIRECTIVE:
                this._directive = schema.getDirective(node.name.value);
                break;
            case _kinds.Kind.OPERATION_DEFINITION:
                {
                    var type;
                    switch(node.operation){
                        case 'query':
                            type = schema.getQueryType();
                            break;
                        case 'mutation':
                            type = schema.getMutationType();
                            break;
                        case 'subscription':
                            type = schema.getSubscriptionType();
                            break;
                    }
                    this._typeStack.push((0, _definition.isObjectType)(type) ? type : undefined);
                    break;
                }
            case _kinds.Kind.INLINE_FRAGMENT:
            case _kinds.Kind.FRAGMENT_DEFINITION:
                {
                    var typeConditionAST = node.typeCondition;
                    var outputType = typeConditionAST ? (0, _typeFromAST.typeFromAST)(schema, typeConditionAST) : (0, _definition.getNamedType)(this.getType());
                    this._typeStack.push((0, _definition.isOutputType)(outputType) ? outputType : undefined);
                    break;
                }
            case _kinds.Kind.VARIABLE_DEFINITION:
                {
                    var inputType = (0, _typeFromAST.typeFromAST)(schema, node.type);
                    this._inputTypeStack.push((0, _definition.isInputType)(inputType) ? inputType : undefined);
                    break;
                }
            case _kinds.Kind.ARGUMENT:
                {
                    var _this$getDirective;
                    var argDef;
                    var argType;
                    var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();
                    if (fieldOrDirective) {
                        argDef = (0, _find.default)(fieldOrDirective.args, function(arg) {
                            return arg.name === node.name.value;
                        });
                        if (argDef) {
                            argType = argDef.type;
                        }
                    }
                    this._argument = argDef;
                    this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);
                    this._inputTypeStack.push((0, _definition.isInputType)(argType) ? argType : undefined);
                    break;
                }
            case _kinds.Kind.LIST:
                {
                    var listType = (0, _definition.getNullableType)(this.getInputType());
                    var itemType = (0, _definition.isListType)(listType) ? listType.ofType : listType; // List positions never have a default value.
                    this._defaultValueStack.push(undefined);
                    this._inputTypeStack.push((0, _definition.isInputType)(itemType) ? itemType : undefined);
                    break;
                }
            case _kinds.Kind.OBJECT_FIELD:
                {
                    var objectType = (0, _definition.getNamedType)(this.getInputType());
                    var inputFieldType;
                    var inputField;
                    if ((0, _definition.isInputObjectType)(objectType)) {
                        inputField = objectType.getFields()[node.name.value];
                        if (inputField) {
                            inputFieldType = inputField.type;
                        }
                    }
                    this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);
                    this._inputTypeStack.push((0, _definition.isInputType)(inputFieldType) ? inputFieldType : undefined);
                    break;
                }
            case _kinds.Kind.ENUM:
                {
                    var enumType = (0, _definition.getNamedType)(this.getInputType());
                    var enumValue;
                    if ((0, _definition.isEnumType)(enumType)) {
                        enumValue = enumType.getValue(node.value);
                    }
                    this._enumValue = enumValue;
                    break;
                }
        }
    };
    _proto.leave = function leave(node) {
        switch(node.kind){
            case _kinds.Kind.SELECTION_SET:
                this._parentTypeStack.pop();
                break;
            case _kinds.Kind.FIELD:
                this._fieldDefStack.pop();
                this._typeStack.pop();
                break;
            case _kinds.Kind.DIRECTIVE:
                this._directive = null;
                break;
            case _kinds.Kind.OPERATION_DEFINITION:
            case _kinds.Kind.INLINE_FRAGMENT:
            case _kinds.Kind.FRAGMENT_DEFINITION:
                this._typeStack.pop();
                break;
            case _kinds.Kind.VARIABLE_DEFINITION:
                this._inputTypeStack.pop();
                break;
            case _kinds.Kind.ARGUMENT:
                this._argument = null;
                this._defaultValueStack.pop();
                this._inputTypeStack.pop();
                break;
            case _kinds.Kind.LIST:
            case _kinds.Kind.OBJECT_FIELD:
                this._defaultValueStack.pop();
                this._inputTypeStack.pop();
                break;
            case _kinds.Kind.ENUM:
                this._enumValue = null;
                break;
        }
    };
    return TypeInfo;
}();
/**
 * Not exactly the same as the executor's definition of getFieldDef, in this
 * statically evaluated environment we do not always have an Object type,
 * and need to handle Interface and Union types.
 */ exports.TypeInfo = TypeInfo;
function getFieldDef(schema, parentType, fieldNode) {
    var name = fieldNode.name.value;
    if (name === _introspection.SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.SchemaMetaFieldDef;
    }
    if (name === _introspection.TypeMetaFieldDef.name && schema.getQueryType() === parentType) {
        return _introspection.TypeMetaFieldDef;
    }
    if (name === _introspection.TypeNameMetaFieldDef.name && (0, _definition.isCompositeType)(parentType)) {
        return _introspection.TypeNameMetaFieldDef;
    }
    if ((0, _definition.isObjectType)(parentType) || (0, _definition.isInterfaceType)(parentType)) {
        return parentType.getFields()[name];
    }
}
/**
 * Creates a new visitor instance which maintains a provided TypeInfo instance
 * along with visiting visitor.
 */ function visitWithTypeInfo(typeInfo, visitor) {
    return {
        enter: function enter(node) {
            typeInfo.enter(node);
            var fn = (0, _visitor.getVisitFn)(visitor, node.kind, /* isLeaving */ false);
            if (fn) {
                var result = fn.apply(visitor, arguments);
                if (result !== undefined) {
                    typeInfo.leave(node);
                    if ((0, _ast.isNode)(result)) {
                        typeInfo.enter(result);
                    }
                }
                return result;
            }
        },
        leave: function leave(node) {
            var fn = (0, _visitor.getVisitFn)(visitor, node.kind, /* isLeaving */ true);
            var result;
            if (fn) {
                result = fn.apply(visitor, arguments);
            }
            typeInfo.leave(node);
            return result;
        }
    };
}
}}),
"[project]/node_modules/graphql/utilities/extendSchema.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extendSchema = extendSchema;
exports.extendSchemaImpl = extendSchemaImpl;
exports.getDescription = getDescription;
var _objectValues = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/objectValues.js [app-route] (ecmascript)"));
var _keyMap = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/keyMap.js [app-route] (ecmascript)"));
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _mapValue = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/mapValue.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _devAssert = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/devAssert.js [app-route] (ecmascript)"));
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
var _tokenKind = __turbopack_context__.r("[project]/node_modules/graphql/language/tokenKind.js [app-route] (ecmascript)");
var _blockString = __turbopack_context__.r("[project]/node_modules/graphql/language/blockString.js [app-route] (ecmascript)");
var _predicates = __turbopack_context__.r("[project]/node_modules/graphql/language/predicates.js [app-route] (ecmascript)");
var _validate = __turbopack_context__.r("[project]/node_modules/graphql/validation/validate.js [app-route] (ecmascript)");
var _values = __turbopack_context__.r("[project]/node_modules/graphql/execution/values.js [app-route] (ecmascript)");
var _schema = __turbopack_context__.r("[project]/node_modules/graphql/type/schema.js [app-route] (ecmascript)");
var _scalars = __turbopack_context__.r("[project]/node_modules/graphql/type/scalars.js [app-route] (ecmascript)");
var _introspection = __turbopack_context__.r("[project]/node_modules/graphql/type/introspection.js [app-route] (ecmascript)");
var _directives = __turbopack_context__.r("[project]/node_modules/graphql/type/directives.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
var _valueFromAST = __turbopack_context__.r("[project]/node_modules/graphql/utilities/valueFromAST.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
/**
 * Produces a new schema given an existing schema and a document which may
 * contain GraphQL type extensions and definitions. The original schema will
 * remain unaltered.
 *
 * Because a schema represents a graph of references, a schema cannot be
 * extended without effectively making an entire copy. We do not know until it's
 * too late if subgraphs remain unchanged.
 *
 * This algorithm copies the provided schema, applying extensions while
 * producing the copy. The original schema remains unaltered.
 *
 * Accepts options as a third argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */ function extendSchema(schema, documentAST, options) {
    (0, _schema.assertSchema)(schema);
    documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.default)(0, 'Must provide valid Document AST.');
    if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, _validate.assertValidSDLExtension)(documentAST, schema);
    }
    var schemaConfig = schema.toConfig();
    var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);
    return schemaConfig === extendedConfig ? schema : new _schema.GraphQLSchema(extendedConfig);
}
/**
 * @internal
 */ function extendSchemaImpl(schemaConfig, documentAST, options) {
    var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;
    // Collect the type definitions and extensions found in the document.
    var typeDefs = [];
    var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can
    // have the same name. For example, a type named "skip".
    var directiveDefs = [];
    var schemaDef; // Schema extensions are collected which may add additional operation types.
    var schemaExtensions = [];
    for(var _i2 = 0, _documentAST$definiti2 = documentAST.definitions; _i2 < _documentAST$definiti2.length; _i2++){
        var def = _documentAST$definiti2[_i2];
        if (def.kind === _kinds.Kind.SCHEMA_DEFINITION) {
            schemaDef = def;
        } else if (def.kind === _kinds.Kind.SCHEMA_EXTENSION) {
            schemaExtensions.push(def);
        } else if ((0, _predicates.isTypeDefinitionNode)(def)) {
            typeDefs.push(def);
        } else if ((0, _predicates.isTypeExtensionNode)(def)) {
            var extendedTypeName = def.name.value;
            var existingTypeExtensions = typeExtensionsMap[extendedTypeName];
            typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([
                def
            ]) : [
                def
            ];
        } else if (def.kind === _kinds.Kind.DIRECTIVE_DEFINITION) {
            directiveDefs.push(def);
        }
    } // If this document contains no new types, extensions, or directives then
    // return the same unmodified GraphQLSchema instance.
    if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {
        return schemaConfig;
    }
    var typeMap = Object.create(null);
    for(var _i4 = 0, _schemaConfig$types2 = schemaConfig.types; _i4 < _schemaConfig$types2.length; _i4++){
        var existingType = _schemaConfig$types2[_i4];
        typeMap[existingType.name] = extendNamedType(existingType);
    }
    for(var _i6 = 0; _i6 < typeDefs.length; _i6++){
        var _stdTypeMap$name;
        var typeNode = typeDefs[_i6];
        var name = typeNode.name.value;
        typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);
    }
    var operationTypes = _objectSpread(_objectSpread({
        // Get the extended root operation types.
        query: schemaConfig.query && replaceNamedType(schemaConfig.query),
        mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),
        subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)
    }, schemaDef && getOperationTypes([
        schemaDef
    ])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.
    return _objectSpread(_objectSpread({
        description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value
    }, operationTypes), {}, {
        types: (0, _objectValues.default)(typeMap),
        directives: [].concat(schemaConfig.directives.map(replaceDirective), directiveDefs.map(buildDirective)),
        extensions: undefined,
        astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,
        extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),
        assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false
    }); // Below are functions used for producing this schema that have closed over
    //TURBOPACK unreachable
    ;
    // this scope and have access to the schema, cache, and newly defined types.
    function replaceType(type) {
        if ((0, _definition.isListType)(type)) {
            return new _definition.GraphQLList(replaceType(type.ofType));
        } else if ((0, _definition.isNonNullType)(type)) {
            return new _definition.GraphQLNonNull(replaceType(type.ofType));
        }
        return replaceNamedType(type);
    }
    function replaceNamedType(type) {
        // Note: While this could make early assertions to get the correctly
        // typed values, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.
        return typeMap[type.name];
    }
    function replaceDirective(directive) {
        var config = directive.toConfig();
        return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
            args: (0, _mapValue.default)(config.args, extendArg)
        }));
    }
    function extendNamedType(type) {
        if ((0, _introspection.isIntrospectionType)(type) || (0, _scalars.isSpecifiedScalarType)(type)) {
            // Builtin types are not extended.
            return type;
        }
        if ((0, _definition.isScalarType)(type)) {
            return extendScalarType(type);
        }
        if ((0, _definition.isObjectType)(type)) {
            return extendObjectType(type);
        }
        if ((0, _definition.isInterfaceType)(type)) {
            return extendInterfaceType(type);
        }
        if ((0, _definition.isUnionType)(type)) {
            return extendUnionType(type);
        }
        if ((0, _definition.isEnumType)(type)) {
            return extendEnumType(type);
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
        if ((0, _definition.isInputObjectType)(type)) {
            return extendInputObjectType(type);
        } // istanbul ignore next (Not reachable. All possible types have been considered)
        false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
    }
    function extendInputObjectType(type) {
        var _typeExtensionsMap$co;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];
        return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {
            fields: function fields() {
                return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, function(field) {
                    return _objectSpread(_objectSpread({}, field), {}, {
                        type: replaceType(field.type)
                    });
                })), buildInputFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendEnumType(type) {
        var _typeExtensionsMap$ty;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];
        return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {
            values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendScalarType(type) {
        var _typeExtensionsMap$co2;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];
        var specifiedByUrl = config.specifiedByUrl;
        for(var _i8 = 0; _i8 < extensions.length; _i8++){
            var _getSpecifiedByUrl;
            var extensionNode = extensions[_i8];
            specifiedByUrl = (_getSpecifiedByUrl = getSpecifiedByUrl(extensionNode)) !== null && _getSpecifiedByUrl !== void 0 ? _getSpecifiedByUrl : specifiedByUrl;
        }
        return new _definition.GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {
            specifiedByUrl: specifiedByUrl,
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendObjectType(type) {
        var _typeExtensionsMap$co3;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];
        return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
            interfaces: function interfaces() {
                return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
            },
            fields: function fields() {
                return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendInterfaceType(type) {
        var _typeExtensionsMap$co4;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];
        return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {
            interfaces: function interfaces() {
                return [].concat(type.getInterfaces().map(replaceNamedType), buildInterfaces(extensions));
            },
            fields: function fields() {
                return _objectSpread(_objectSpread({}, (0, _mapValue.default)(config.fields, extendField)), buildFieldMap(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendUnionType(type) {
        var _typeExtensionsMap$co5;
        var config = type.toConfig();
        var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];
        return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {
            types: function types() {
                return [].concat(type.getTypes().map(replaceNamedType), buildUnionTypes(extensions));
            },
            extensionASTNodes: config.extensionASTNodes.concat(extensions)
        }));
    }
    function extendField(field) {
        return _objectSpread(_objectSpread({}, field), {}, {
            type: replaceType(field.type),
            args: (0, _mapValue.default)(field.args, extendArg)
        });
    }
    function extendArg(arg) {
        return _objectSpread(_objectSpread({}, arg), {}, {
            type: replaceType(arg.type)
        });
    }
    function getOperationTypes(nodes) {
        var opTypes = {};
        for(var _i10 = 0; _i10 < nodes.length; _i10++){
            var _node$operationTypes;
            var node = nodes[_i10];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var operationTypesNodes = (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];
            for(var _i12 = 0; _i12 < operationTypesNodes.length; _i12++){
                var operationType = operationTypesNodes[_i12];
                opTypes[operationType.operation] = getNamedType(operationType.type);
            }
        } // Note: While this could make early assertions to get the correctly
        // typed values below, that would throw immediately while type system
        // validation with validateSchema() will produce more actionable results.
        return opTypes;
    }
    function getNamedType(node) {
        var _stdTypeMap$name2;
        var name = node.name.value;
        var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];
        if (type === undefined) {
            throw new Error("Unknown type: \"".concat(name, "\"."));
        }
        return type;
    }
    function getWrappedType(node) {
        if (node.kind === _kinds.Kind.LIST_TYPE) {
            return new _definition.GraphQLList(getWrappedType(node.type));
        }
        if (node.kind === _kinds.Kind.NON_NULL_TYPE) {
            return new _definition.GraphQLNonNull(getWrappedType(node.type));
        }
        return getNamedType(node);
    }
    function buildDirective(node) {
        var locations = node.locations.map(function(_ref) {
            var value = _ref.value;
            return value;
        });
        return new _directives.GraphQLDirective({
            name: node.name.value,
            description: getDescription(node, options),
            locations: locations,
            isRepeatable: node.repeatable,
            args: buildArgumentMap(node.arguments),
            astNode: node
        });
    }
    function buildFieldMap(nodes) {
        var fieldConfigMap = Object.create(null);
        for(var _i14 = 0; _i14 < nodes.length; _i14++){
            var _node$fields;
            var node = nodes[_i14];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var nodeFields = (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];
            for(var _i16 = 0; _i16 < nodeFields.length; _i16++){
                var field = nodeFields[_i16];
                fieldConfigMap[field.name.value] = {
                    // Note: While this could make assertions to get the correctly typed
                    // value, that would throw immediately while type system validation
                    // with validateSchema() will produce more actionable results.
                    type: getWrappedType(field.type),
                    description: getDescription(field, options),
                    args: buildArgumentMap(field.arguments),
                    deprecationReason: getDeprecationReason(field),
                    astNode: field
                };
            }
        }
        return fieldConfigMap;
    }
    function buildArgumentMap(args) {
        // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
        var argsNodes = args !== null && args !== void 0 ? args : [];
        var argConfigMap = Object.create(null);
        for(var _i18 = 0; _i18 < argsNodes.length; _i18++){
            var arg = argsNodes[_i18];
            // Note: While this could make assertions to get the correctly typed
            // value, that would throw immediately while type system validation
            // with validateSchema() will produce more actionable results.
            var type = getWrappedType(arg.type);
            argConfigMap[arg.name.value] = {
                type: type,
                description: getDescription(arg, options),
                defaultValue: (0, _valueFromAST.valueFromAST)(arg.defaultValue, type),
                astNode: arg
            };
        }
        return argConfigMap;
    }
    function buildInputFieldMap(nodes) {
        var inputFieldMap = Object.create(null);
        for(var _i20 = 0; _i20 < nodes.length; _i20++){
            var _node$fields2;
            var node = nodes[_i20];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var fieldsNodes = (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];
            for(var _i22 = 0; _i22 < fieldsNodes.length; _i22++){
                var field = fieldsNodes[_i22];
                // Note: While this could make assertions to get the correctly typed
                // value, that would throw immediately while type system validation
                // with validateSchema() will produce more actionable results.
                var type = getWrappedType(field.type);
                inputFieldMap[field.name.value] = {
                    type: type,
                    description: getDescription(field, options),
                    defaultValue: (0, _valueFromAST.valueFromAST)(field.defaultValue, type),
                    astNode: field
                };
            }
        }
        return inputFieldMap;
    }
    function buildEnumValueMap(nodes) {
        var enumValueMap = Object.create(null);
        for(var _i24 = 0; _i24 < nodes.length; _i24++){
            var _node$values;
            var node = nodes[_i24];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var valuesNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];
            for(var _i26 = 0; _i26 < valuesNodes.length; _i26++){
                var value = valuesNodes[_i26];
                enumValueMap[value.name.value] = {
                    description: getDescription(value, options),
                    deprecationReason: getDeprecationReason(value),
                    astNode: value
                };
            }
        }
        return enumValueMap;
    }
    function buildInterfaces(nodes) {
        var interfaces = [];
        for(var _i28 = 0; _i28 < nodes.length; _i28++){
            var _node$interfaces;
            var node = nodes[_i28];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var interfacesNodes = (_node$interfaces = node.interfaces) !== null && _node$interfaces !== void 0 ? _node$interfaces : [];
            for(var _i30 = 0; _i30 < interfacesNodes.length; _i30++){
                var type = interfacesNodes[_i30];
                // Note: While this could make assertions to get the correctly typed
                // values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable
                // results.
                interfaces.push(getNamedType(type));
            }
        }
        return interfaces;
    }
    function buildUnionTypes(nodes) {
        var types = [];
        for(var _i32 = 0; _i32 < nodes.length; _i32++){
            var _node$types;
            var node = nodes[_i32];
            // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')
            var typeNodes = (_node$types = node.types) !== null && _node$types !== void 0 ? _node$types : [];
            for(var _i34 = 0; _i34 < typeNodes.length; _i34++){
                var type = typeNodes[_i34];
                // Note: While this could make assertions to get the correctly typed
                // values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable
                // results.
                types.push(getNamedType(type));
            }
        }
        return types;
    }
    function buildType(astNode) {
        var _typeExtensionsMap$na;
        var name = astNode.name.value;
        var description = getDescription(astNode, options);
        var extensionNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];
        switch(astNode.kind){
            case _kinds.Kind.OBJECT_TYPE_DEFINITION:
                {
                    var extensionASTNodes = extensionNodes;
                    var allNodes = [
                        astNode
                    ].concat(extensionASTNodes);
                    return new _definition.GraphQLObjectType({
                        name: name,
                        description: description,
                        interfaces: function interfaces() {
                            return buildInterfaces(allNodes);
                        },
                        fields: function fields() {
                            return buildFieldMap(allNodes);
                        },
                        astNode: astNode,
                        extensionASTNodes: extensionASTNodes
                    });
                }
            case _kinds.Kind.INTERFACE_TYPE_DEFINITION:
                {
                    var _extensionASTNodes = extensionNodes;
                    var _allNodes = [
                        astNode
                    ].concat(_extensionASTNodes);
                    return new _definition.GraphQLInterfaceType({
                        name: name,
                        description: description,
                        interfaces: function interfaces() {
                            return buildInterfaces(_allNodes);
                        },
                        fields: function fields() {
                            return buildFieldMap(_allNodes);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes
                    });
                }
            case _kinds.Kind.ENUM_TYPE_DEFINITION:
                {
                    var _extensionASTNodes2 = extensionNodes;
                    var _allNodes2 = [
                        astNode
                    ].concat(_extensionASTNodes2);
                    return new _definition.GraphQLEnumType({
                        name: name,
                        description: description,
                        values: buildEnumValueMap(_allNodes2),
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes2
                    });
                }
            case _kinds.Kind.UNION_TYPE_DEFINITION:
                {
                    var _extensionASTNodes3 = extensionNodes;
                    var _allNodes3 = [
                        astNode
                    ].concat(_extensionASTNodes3);
                    return new _definition.GraphQLUnionType({
                        name: name,
                        description: description,
                        types: function types() {
                            return buildUnionTypes(_allNodes3);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes3
                    });
                }
            case _kinds.Kind.SCALAR_TYPE_DEFINITION:
                {
                    var _extensionASTNodes4 = extensionNodes;
                    return new _definition.GraphQLScalarType({
                        name: name,
                        description: description,
                        specifiedByUrl: getSpecifiedByUrl(astNode),
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes4
                    });
                }
            case _kinds.Kind.INPUT_OBJECT_TYPE_DEFINITION:
                {
                    var _extensionASTNodes5 = extensionNodes;
                    var _allNodes4 = [
                        astNode
                    ].concat(_extensionASTNodes5);
                    return new _definition.GraphQLInputObjectType({
                        name: name,
                        description: description,
                        fields: function fields() {
                            return buildInputFieldMap(_allNodes4);
                        },
                        astNode: astNode,
                        extensionASTNodes: _extensionASTNodes5
                    });
                }
        } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)
        false || (0, _invariant.default)(0, 'Unexpected type definition node: ' + (0, _inspect.default)(astNode));
    }
}
var stdTypeMap = (0, _keyMap.default)(_scalars.specifiedScalarTypes.concat(_introspection.introspectionTypes), function(type) {
    return type.name;
});
/**
 * Given a field or enum value node, returns the string value for the
 * deprecation reason.
 */ function getDeprecationReason(node) {
    var deprecated = (0, _values.getDirectiveValues)(_directives.GraphQLDeprecatedDirective, node);
    return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;
}
/**
 * Given a scalar node, returns the string value for the specifiedByUrl.
 */ function getSpecifiedByUrl(node) {
    var specifiedBy = (0, _values.getDirectiveValues)(_directives.GraphQLSpecifiedByDirective, node);
    return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;
}
/**
 * Given an ast node, returns its string description.
 * @deprecated: provided to ease adoption and will be removed in v16.
 *
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */ function getDescription(node, options) {
    if (node.description) {
        return node.description.value;
    }
    if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        var rawValue = getLeadingCommentBlock(node);
        if (rawValue !== undefined) {
            return (0, _blockString.dedentBlockStringValue)('\n' + rawValue);
        }
    }
}
function getLeadingCommentBlock(node) {
    var loc = node.loc;
    if (!loc) {
        return;
    }
    var comments = [];
    var token = loc.startToken.prev;
    while(token != null && token.kind === _tokenKind.TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line){
        var value = String(token.value);
        comments.push(value);
        token = token.prev;
    }
    return comments.length > 0 ? comments.reverse().join('\n') : undefined;
}
}}),
"[project]/node_modules/graphql/utilities/buildASTSchema.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.buildASTSchema = buildASTSchema;
exports.buildSchema = buildSchema;
var _devAssert = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/devAssert.js [app-route] (ecmascript)"));
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
var _parser = __turbopack_context__.r("[project]/node_modules/graphql/language/parser.js [app-route] (ecmascript)");
var _validate = __turbopack_context__.r("[project]/node_modules/graphql/validation/validate.js [app-route] (ecmascript)");
var _schema = __turbopack_context__.r("[project]/node_modules/graphql/type/schema.js [app-route] (ecmascript)");
var _directives = __turbopack_context__.r("[project]/node_modules/graphql/type/directives.js [app-route] (ecmascript)");
var _extendSchema = __turbopack_context__.r("[project]/node_modules/graphql/utilities/extendSchema.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * This takes the ast of a schema document produced by the parse function in
 * src/language/parser.js.
 *
 * If no schema definition is provided, then it will look for types named Query
 * and Mutation.
 *
 * Given that AST it constructs a GraphQLSchema. The resulting schema
 * has no resolve methods, so execution will use default resolvers.
 *
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */ function buildASTSchema(documentAST, options) {
    documentAST != null && documentAST.kind === _kinds.Kind.DOCUMENT || (0, _devAssert.default)(0, 'Must provide valid Document AST.');
    if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {
        (0, _validate.assertValidSDL)(documentAST);
    }
    var emptySchemaConfig = {
        description: undefined,
        types: [],
        directives: [],
        extensions: undefined,
        extensionASTNodes: [],
        assumeValid: false
    };
    var config = (0, _extendSchema.extendSchemaImpl)(emptySchemaConfig, documentAST, options);
    if (config.astNode == null) {
        for(var _i2 = 0, _config$types2 = config.types; _i2 < _config$types2.length; _i2++){
            var type = _config$types2[_i2];
            switch(type.name){
                // Note: While this could make early assertions to get the correctly
                // typed values below, that would throw immediately while type system
                // validation with validateSchema() will produce more actionable results.
                case 'Query':
                    config.query = type;
                    break;
                case 'Mutation':
                    config.mutation = type;
                    break;
                case 'Subscription':
                    config.subscription = type;
                    break;
            }
        }
    }
    var directives = config.directives; // If specified directives were not explicitly declared, add them.
    if (!directives.some(function(directive) {
        return directive.name === 'skip';
    })) {
        directives.push(_directives.GraphQLSkipDirective);
    }
    if (!directives.some(function(directive) {
        return directive.name === 'include';
    })) {
        directives.push(_directives.GraphQLIncludeDirective);
    }
    if (!directives.some(function(directive) {
        return directive.name === 'deprecated';
    })) {
        directives.push(_directives.GraphQLDeprecatedDirective);
    }
    if (!directives.some(function(directive) {
        return directive.name === 'specifiedBy';
    })) {
        directives.push(_directives.GraphQLSpecifiedByDirective);
    }
    return new _schema.GraphQLSchema(config);
}
/**
 * A helper function to build a GraphQLSchema directly from a source
 * document.
 */ function buildSchema(source, options) {
    var document = (0, _parser.parse)(source, {
        noLocation: options === null || options === void 0 ? void 0 : options.noLocation,
        allowLegacySDLEmptyFields: options === null || options === void 0 ? void 0 : options.allowLegacySDLEmptyFields,
        allowLegacySDLImplementsInterfaces: options === null || options === void 0 ? void 0 : options.allowLegacySDLImplementsInterfaces,
        experimentalFragmentVariables: options === null || options === void 0 ? void 0 : options.experimentalFragmentVariables
    });
    return buildASTSchema(document, {
        commentDescriptions: options === null || options === void 0 ? void 0 : options.commentDescriptions,
        assumeValidSDL: options === null || options === void 0 ? void 0 : options.assumeValidSDL,
        assumeValid: options === null || options === void 0 ? void 0 : options.assumeValid
    });
}
}}),
"[project]/node_modules/graphql/utilities/lexicographicSortSchema.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.lexicographicSortSchema = lexicographicSortSchema;
var _objectValues = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/objectValues.js [app-route] (ecmascript)"));
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _keyValMap = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/keyValMap.js [app-route] (ecmascript)"));
var _schema = __turbopack_context__.r("[project]/node_modules/graphql/type/schema.js [app-route] (ecmascript)");
var _directives = __turbopack_context__.r("[project]/node_modules/graphql/type/directives.js [app-route] (ecmascript)");
var _introspection = __turbopack_context__.r("[project]/node_modules/graphql/type/introspection.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
/**
 * Sort GraphQLSchema.
 *
 * This function returns a sorted copy of the given GraphQLSchema.
 */ function lexicographicSortSchema(schema) {
    var schemaConfig = schema.toConfig();
    var typeMap = (0, _keyValMap.default)(sortByName(schemaConfig.types), function(type) {
        return type.name;
    }, sortNamedType);
    return new _schema.GraphQLSchema(_objectSpread(_objectSpread({}, schemaConfig), {}, {
        types: (0, _objectValues.default)(typeMap),
        directives: sortByName(schemaConfig.directives).map(sortDirective),
        query: replaceMaybeType(schemaConfig.query),
        mutation: replaceMaybeType(schemaConfig.mutation),
        subscription: replaceMaybeType(schemaConfig.subscription)
    }));
    //TURBOPACK unreachable
    ;
    function replaceType(type) {
        if ((0, _definition.isListType)(type)) {
            return new _definition.GraphQLList(replaceType(type.ofType));
        } else if ((0, _definition.isNonNullType)(type)) {
            return new _definition.GraphQLNonNull(replaceType(type.ofType));
        }
        return replaceNamedType(type);
    }
    function replaceNamedType(type) {
        return typeMap[type.name];
    }
    function replaceMaybeType(maybeType) {
        return maybeType && replaceNamedType(maybeType);
    }
    function sortDirective(directive) {
        var config = directive.toConfig();
        return new _directives.GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {
            locations: sortBy(config.locations, function(x) {
                return x;
            }),
            args: sortArgs(config.args)
        }));
    }
    function sortArgs(args) {
        return sortObjMap(args, function(arg) {
            return _objectSpread(_objectSpread({}, arg), {}, {
                type: replaceType(arg.type)
            });
        });
    }
    function sortFields(fieldsMap) {
        return sortObjMap(fieldsMap, function(field) {
            return _objectSpread(_objectSpread({}, field), {}, {
                type: replaceType(field.type),
                args: sortArgs(field.args)
            });
        });
    }
    function sortInputFields(fieldsMap) {
        return sortObjMap(fieldsMap, function(field) {
            return _objectSpread(_objectSpread({}, field), {}, {
                type: replaceType(field.type)
            });
        });
    }
    function sortTypes(arr) {
        return sortByName(arr).map(replaceNamedType);
    }
    function sortNamedType(type) {
        if ((0, _definition.isScalarType)(type) || (0, _introspection.isIntrospectionType)(type)) {
            return type;
        }
        if ((0, _definition.isObjectType)(type)) {
            var config = type.toConfig();
            return new _definition.GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {
                interfaces: function interfaces() {
                    return sortTypes(config.interfaces);
                },
                fields: function fields() {
                    return sortFields(config.fields);
                }
            }));
        }
        if ((0, _definition.isInterfaceType)(type)) {
            var _config = type.toConfig();
            return new _definition.GraphQLInterfaceType(_objectSpread(_objectSpread({}, _config), {}, {
                interfaces: function interfaces() {
                    return sortTypes(_config.interfaces);
                },
                fields: function fields() {
                    return sortFields(_config.fields);
                }
            }));
        }
        if ((0, _definition.isUnionType)(type)) {
            var _config2 = type.toConfig();
            return new _definition.GraphQLUnionType(_objectSpread(_objectSpread({}, _config2), {}, {
                types: function types() {
                    return sortTypes(_config2.types);
                }
            }));
        }
        if ((0, _definition.isEnumType)(type)) {
            var _config3 = type.toConfig();
            return new _definition.GraphQLEnumType(_objectSpread(_objectSpread({}, _config3), {}, {
                values: sortObjMap(_config3.values)
            }));
        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
        if ((0, _definition.isInputObjectType)(type)) {
            var _config4 = type.toConfig();
            return new _definition.GraphQLInputObjectType(_objectSpread(_objectSpread({}, _config4), {}, {
                fields: function fields() {
                    return sortInputFields(_config4.fields);
                }
            }));
        } // istanbul ignore next (Not reachable. All possible types have been considered)
        false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
    }
}
function sortObjMap(map, sortValueFn) {
    var sortedMap = Object.create(null);
    var sortedKeys = sortBy(Object.keys(map), function(x) {
        return x;
    });
    for(var _i2 = 0; _i2 < sortedKeys.length; _i2++){
        var key = sortedKeys[_i2];
        var value = map[key];
        sortedMap[key] = sortValueFn ? sortValueFn(value) : value;
    }
    return sortedMap;
}
function sortByName(array) {
    return sortBy(array, function(obj) {
        return obj.name;
    });
}
function sortBy(array, mapToKey) {
    return array.slice().sort(function(obj1, obj2) {
        var key1 = mapToKey(obj1);
        var key2 = mapToKey(obj2);
        return key1.localeCompare(key2);
    });
}
}}),
"[project]/node_modules/graphql/utilities/printSchema.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.printSchema = printSchema;
exports.printIntrospectionSchema = printIntrospectionSchema;
exports.printType = printType;
var _objectValues = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/objectValues.js [app-route] (ecmascript)"));
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _printer = __turbopack_context__.r("[project]/node_modules/graphql/language/printer.js [app-route] (ecmascript)");
var _blockString = __turbopack_context__.r("[project]/node_modules/graphql/language/blockString.js [app-route] (ecmascript)");
var _introspection = __turbopack_context__.r("[project]/node_modules/graphql/type/introspection.js [app-route] (ecmascript)");
var _scalars = __turbopack_context__.r("[project]/node_modules/graphql/type/scalars.js [app-route] (ecmascript)");
var _directives = __turbopack_context__.r("[project]/node_modules/graphql/type/directives.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
var _astFromValue = __turbopack_context__.r("[project]/node_modules/graphql/utilities/astFromValue.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Accepts options as a second argument:
 *
 *    - commentDescriptions:
 *        Provide true to use preceding comments as the description.
 *
 */ function printSchema(schema, options) {
    return printFilteredSchema(schema, function(n) {
        return !(0, _directives.isSpecifiedDirective)(n);
    }, isDefinedType, options);
}
function printIntrospectionSchema(schema, options) {
    return printFilteredSchema(schema, _directives.isSpecifiedDirective, _introspection.isIntrospectionType, options);
}
function isDefinedType(type) {
    return !(0, _scalars.isSpecifiedScalarType)(type) && !(0, _introspection.isIntrospectionType)(type);
}
function printFilteredSchema(schema, directiveFilter, typeFilter, options) {
    var directives = schema.getDirectives().filter(directiveFilter);
    var types = (0, _objectValues.default)(schema.getTypeMap()).filter(typeFilter);
    return [
        printSchemaDefinition(schema)
    ].concat(directives.map(function(directive) {
        return printDirective(directive, options);
    }), types.map(function(type) {
        return printType(type, options);
    })).filter(Boolean).join('\n\n') + '\n';
}
function printSchemaDefinition(schema) {
    if (schema.description == null && isSchemaOfCommonNames(schema)) {
        return;
    }
    var operationTypes = [];
    var queryType = schema.getQueryType();
    if (queryType) {
        operationTypes.push("  query: ".concat(queryType.name));
    }
    var mutationType = schema.getMutationType();
    if (mutationType) {
        operationTypes.push("  mutation: ".concat(mutationType.name));
    }
    var subscriptionType = schema.getSubscriptionType();
    if (subscriptionType) {
        operationTypes.push("  subscription: ".concat(subscriptionType.name));
    }
    return printDescription({}, schema) + "schema {\n".concat(operationTypes.join('\n'), "\n}");
}
/**
 * GraphQL schema define root types for each type of operation. These types are
 * the same as any other type and can be named in any manner, however there is
 * a common naming convention:
 *
 *   schema {
 *     query: Query
 *     mutation: Mutation
 *   }
 *
 * When using this naming convention, the schema description can be omitted.
 */ function isSchemaOfCommonNames(schema) {
    var queryType = schema.getQueryType();
    if (queryType && queryType.name !== 'Query') {
        return false;
    }
    var mutationType = schema.getMutationType();
    if (mutationType && mutationType.name !== 'Mutation') {
        return false;
    }
    var subscriptionType = schema.getSubscriptionType();
    if (subscriptionType && subscriptionType.name !== 'Subscription') {
        return false;
    }
    return true;
}
function printType(type, options) {
    if ((0, _definition.isScalarType)(type)) {
        return printScalar(type, options);
    }
    if ((0, _definition.isObjectType)(type)) {
        return printObject(type, options);
    }
    if ((0, _definition.isInterfaceType)(type)) {
        return printInterface(type, options);
    }
    if ((0, _definition.isUnionType)(type)) {
        return printUnion(type, options);
    }
    if ((0, _definition.isEnumType)(type)) {
        return printEnum(type, options);
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, _definition.isInputObjectType)(type)) {
        return printInputObject(type, options);
    } // istanbul ignore next (Not reachable. All possible types have been considered)
    false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
}
function printScalar(type, options) {
    return printDescription(options, type) + "scalar ".concat(type.name) + printSpecifiedByUrl(type);
}
function printImplementedInterfaces(type) {
    var interfaces = type.getInterfaces();
    return interfaces.length ? ' implements ' + interfaces.map(function(i) {
        return i.name;
    }).join(' & ') : '';
}
function printObject(type, options) {
    return printDescription(options, type) + "type ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
}
function printInterface(type, options) {
    return printDescription(options, type) + "interface ".concat(type.name) + printImplementedInterfaces(type) + printFields(options, type);
}
function printUnion(type, options) {
    var types = type.getTypes();
    var possibleTypes = types.length ? ' = ' + types.join(' | ') : '';
    return printDescription(options, type) + 'union ' + type.name + possibleTypes;
}
function printEnum(type, options) {
    var values = type.getValues().map(function(value, i) {
        return printDescription(options, value, '  ', !i) + '  ' + value.name + printDeprecated(value);
    });
    return printDescription(options, type) + "enum ".concat(type.name) + printBlock(values);
}
function printInputObject(type, options) {
    var fields = (0, _objectValues.default)(type.getFields()).map(function(f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + printInputValue(f);
    });
    return printDescription(options, type) + "input ".concat(type.name) + printBlock(fields);
}
function printFields(options, type) {
    var fields = (0, _objectValues.default)(type.getFields()).map(function(f, i) {
        return printDescription(options, f, '  ', !i) + '  ' + f.name + printArgs(options, f.args, '  ') + ': ' + String(f.type) + printDeprecated(f);
    });
    return printBlock(fields);
}
function printBlock(items) {
    return items.length !== 0 ? ' {\n' + items.join('\n') + '\n}' : '';
}
function printArgs(options, args) {
    var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    if (args.length === 0) {
        return '';
    } // If every arg does not have a description, print them on one line.
    if (args.every(function(arg) {
        return !arg.description;
    })) {
        return '(' + args.map(printInputValue).join(', ') + ')';
    }
    return '(\n' + args.map(function(arg, i) {
        return printDescription(options, arg, '  ' + indentation, !i) + '  ' + indentation + printInputValue(arg);
    }).join('\n') + '\n' + indentation + ')';
}
function printInputValue(arg) {
    var defaultAST = (0, _astFromValue.astFromValue)(arg.defaultValue, arg.type);
    var argDecl = arg.name + ': ' + String(arg.type);
    if (defaultAST) {
        argDecl += " = ".concat((0, _printer.print)(defaultAST));
    }
    return argDecl;
}
function printDirective(directive, options) {
    return printDescription(options, directive) + 'directive @' + directive.name + printArgs(options, directive.args) + (directive.isRepeatable ? ' repeatable' : '') + ' on ' + directive.locations.join(' | ');
}
function printDeprecated(fieldOrEnumVal) {
    if (!fieldOrEnumVal.isDeprecated) {
        return '';
    }
    var reason = fieldOrEnumVal.deprecationReason;
    var reasonAST = (0, _astFromValue.astFromValue)(reason, _scalars.GraphQLString);
    if (reasonAST && reason !== _directives.DEFAULT_DEPRECATION_REASON) {
        return ' @deprecated(reason: ' + (0, _printer.print)(reasonAST) + ')';
    }
    return ' @deprecated';
}
function printSpecifiedByUrl(scalar) {
    if (scalar.specifiedByUrl == null) {
        return '';
    }
    var url = scalar.specifiedByUrl;
    var urlAST = (0, _astFromValue.astFromValue)(url, _scalars.GraphQLString);
    urlAST || (0, _invariant.default)(0, 'Unexpected null value returned from `astFromValue` for specifiedByUrl');
    return ' @specifiedBy(url: ' + (0, _printer.print)(urlAST) + ')';
}
function printDescription(options, def) {
    var indentation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var firstInBlock = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    var description = def.description;
    if (description == null) {
        return '';
    }
    if ((options === null || options === void 0 ? void 0 : options.commentDescriptions) === true) {
        return printDescriptionWithComments(description, indentation, firstInBlock);
    }
    var preferMultipleLines = description.length > 70;
    var blockString = (0, _blockString.printBlockString)(description, '', preferMultipleLines);
    var prefix = indentation && !firstInBlock ? '\n' + indentation : indentation;
    return prefix + blockString.replace(/\n/g, '\n' + indentation) + '\n';
}
function printDescriptionWithComments(description, indentation, firstInBlock) {
    var prefix = indentation && !firstInBlock ? '\n' : '';
    var comment = description.split('\n').map(function(line) {
        return indentation + (line !== '' ? '# ' + line : '#');
    }).join('\n');
    return prefix + comment + '\n';
}
}}),
"[project]/node_modules/graphql/utilities/concatAST.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.concatAST = concatAST;
var _flatMap = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/flatMap.js [app-route] (ecmascript)"));
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Provided a collection of ASTs, presumably each from different files,
 * concatenate the ASTs together into batched AST, useful for validating many
 * GraphQL source files which together represent one conceptual application.
 */ function concatAST(asts) {
    return {
        kind: 'Document',
        definitions: (0, _flatMap.default)(asts, function(ast) {
            return ast.definitions;
        })
    };
}
}}),
"[project]/node_modules/graphql/utilities/separateOperations.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.separateOperations = separateOperations;
var _kinds = __turbopack_context__.r("[project]/node_modules/graphql/language/kinds.js [app-route] (ecmascript)");
var _visitor = __turbopack_context__.r("[project]/node_modules/graphql/language/visitor.js [app-route] (ecmascript)");
/**
 * separateOperations accepts a single AST document which may contain many
 * operations and fragments and returns a collection of AST documents each of
 * which contains a single operation as well the fragment definitions it
 * refers to.
 */ function separateOperations(documentAST) {
    var operations = [];
    var depGraph = Object.create(null);
    var fromName; // Populate metadata and build a dependency graph.
    (0, _visitor.visit)(documentAST, {
        OperationDefinition: function OperationDefinition(node) {
            fromName = opName(node);
            operations.push(node);
        },
        FragmentDefinition: function FragmentDefinition(node) {
            fromName = node.name.value;
        },
        FragmentSpread: function FragmentSpread(node) {
            var toName = node.name.value;
            var dependents = depGraph[fromName];
            if (dependents === undefined) {
                dependents = depGraph[fromName] = Object.create(null);
            }
            dependents[toName] = true;
        }
    }); // For each operation, produce a new synthesized AST which includes only what
    // is necessary for completing that operation.
    var separatedDocumentASTs = Object.create(null);
    var _loop = function _loop(_i2) {
        var operation = operations[_i2];
        var operationName = opName(operation);
        var dependencies = Object.create(null);
        collectTransitiveDependencies(dependencies, depGraph, operationName); // The list of definition nodes to be included for this operation, sorted
        // to retain the same order as the original document.
        separatedDocumentASTs[operationName] = {
            kind: _kinds.Kind.DOCUMENT,
            definitions: documentAST.definitions.filter(function(node) {
                return node === operation || node.kind === _kinds.Kind.FRAGMENT_DEFINITION && dependencies[node.name.value];
            })
        };
    };
    for(var _i2 = 0; _i2 < operations.length; _i2++){
        _loop(_i2);
    }
    return separatedDocumentASTs;
}
// Provides the empty string for anonymous operations.
function opName(operation) {
    return operation.name ? operation.name.value : '';
} // From a dependency graph, collects a list of transitive dependencies by
// recursing through a dependency graph.
function collectTransitiveDependencies(collected, depGraph, fromName) {
    var immediateDeps = depGraph[fromName];
    if (immediateDeps) {
        for(var _i4 = 0, _Object$keys2 = Object.keys(immediateDeps); _i4 < _Object$keys2.length; _i4++){
            var toName = _Object$keys2[_i4];
            if (!collected[toName]) {
                collected[toName] = true;
                collectTransitiveDependencies(collected, depGraph, toName);
            }
        }
    }
}
}}),
"[project]/node_modules/graphql/utilities/stripIgnoredCharacters.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.stripIgnoredCharacters = stripIgnoredCharacters;
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _source = __turbopack_context__.r("[project]/node_modules/graphql/language/source.js [app-route] (ecmascript)");
var _tokenKind = __turbopack_context__.r("[project]/node_modules/graphql/language/tokenKind.js [app-route] (ecmascript)");
var _lexer = __turbopack_context__.r("[project]/node_modules/graphql/language/lexer.js [app-route] (ecmascript)");
var _blockString = __turbopack_context__.r("[project]/node_modules/graphql/language/blockString.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Strips characters that are not significant to the validity or execution
 * of a GraphQL document:
 *   - UnicodeBOM
 *   - WhiteSpace
 *   - LineTerminator
 *   - Comment
 *   - Comma
 *   - BlockString indentation
 *
 * Note: It is required to have a delimiter character between neighboring
 * non-punctuator tokens and this function always uses single space as delimiter.
 *
 * It is guaranteed that both input and output documents if parsed would result
 * in the exact same AST except for nodes location.
 *
 * Warning: It is guaranteed that this function will always produce stable results.
 * However, it's not guaranteed that it will stay the same between different
 * releases due to bugfixes or changes in the GraphQL specification.
 *
 * Query example:
 *
 * query SomeQuery($foo: String!, $bar: String) {
 *   someField(foo: $foo, bar: $bar) {
 *     a
 *     b {
 *       c
 *       d
 *     }
 *   }
 * }
 *
 * Becomes:
 *
 * query SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}
 *
 * SDL example:
 *
 * """
 * Type description
 * """
 * type Foo {
 *   """
 *   Field description
 *   """
 *   bar: String
 * }
 *
 * Becomes:
 *
 * """Type description""" type Foo{"""Field description""" bar:String}
 */ function stripIgnoredCharacters(source) {
    var sourceObj = typeof source === 'string' ? new _source.Source(source) : source;
    if (!(sourceObj instanceof _source.Source)) {
        throw new TypeError("Must provide string or Source. Received: ".concat((0, _inspect.default)(sourceObj), "."));
    }
    var body = sourceObj.body;
    var lexer = new _lexer.Lexer(sourceObj);
    var strippedBody = '';
    var wasLastAddedTokenNonPunctuator = false;
    while(lexer.advance().kind !== _tokenKind.TokenKind.EOF){
        var currentToken = lexer.token;
        var tokenKind = currentToken.kind;
        /**
     * Every two non-punctuator tokens should have space between them.
     * Also prevent case of non-punctuator token following by spread resulting
     * in invalid token (e.g. `1...` is invalid Float token).
     */ var isNonPunctuator = !(0, _lexer.isPunctuatorTokenKind)(currentToken.kind);
        if (wasLastAddedTokenNonPunctuator) {
            if (isNonPunctuator || currentToken.kind === _tokenKind.TokenKind.SPREAD) {
                strippedBody += ' ';
            }
        }
        var tokenBody = body.slice(currentToken.start, currentToken.end);
        if (tokenKind === _tokenKind.TokenKind.BLOCK_STRING) {
            strippedBody += dedentBlockString(tokenBody);
        } else {
            strippedBody += tokenBody;
        }
        wasLastAddedTokenNonPunctuator = isNonPunctuator;
    }
    return strippedBody;
}
function dedentBlockString(blockStr) {
    // skip leading and trailing triple quotations
    var rawStr = blockStr.slice(3, -3);
    var body = (0, _blockString.dedentBlockStringValue)(rawStr);
    var lines = body.split(/\r\n|[\n\r]/g);
    if ((0, _blockString.getBlockStringIndentation)(lines) > 0) {
        body = '\n' + body;
    }
    var lastChar = body[body.length - 1];
    var hasTrailingQuote = lastChar === '"' && body.slice(-4) !== '\\"""';
    if (hasTrailingQuote || lastChar === '\\') {
        body += '\n';
    }
    return '"""' + body + '"""';
}
}}),
"[project]/node_modules/graphql/utilities/findBreakingChanges.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findBreakingChanges = findBreakingChanges;
exports.findDangerousChanges = findDangerousChanges;
exports.DangerousChangeType = exports.BreakingChangeType = void 0;
var _objectValues = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/polyfills/objectValues.js [app-route] (ecmascript)"));
var _keyMap = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/keyMap.js [app-route] (ecmascript)"));
var _inspect = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/inspect.js [app-route] (ecmascript)"));
var _invariant = _interopRequireDefault(__turbopack_context__.r("[project]/node_modules/graphql/jsutils/invariant.js [app-route] (ecmascript)"));
var _printer = __turbopack_context__.r("[project]/node_modules/graphql/language/printer.js [app-route] (ecmascript)");
var _visitor = __turbopack_context__.r("[project]/node_modules/graphql/language/visitor.js [app-route] (ecmascript)");
var _scalars = __turbopack_context__.r("[project]/node_modules/graphql/type/scalars.js [app-route] (ecmascript)");
var _definition = __turbopack_context__.r("[project]/node_modules/graphql/type/definition.js [app-route] (ecmascript)");
var _astFromValue = __turbopack_context__.r("[project]/node_modules/graphql/utilities/astFromValue.js [app-route] (ecmascript)");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
                _defineProperty(target, key, source[key]);
            });
        } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
            ownKeys(Object(source)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
        }
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var BreakingChangeType = Object.freeze({
    TYPE_REMOVED: 'TYPE_REMOVED',
    TYPE_CHANGED_KIND: 'TYPE_CHANGED_KIND',
    TYPE_REMOVED_FROM_UNION: 'TYPE_REMOVED_FROM_UNION',
    VALUE_REMOVED_FROM_ENUM: 'VALUE_REMOVED_FROM_ENUM',
    REQUIRED_INPUT_FIELD_ADDED: 'REQUIRED_INPUT_FIELD_ADDED',
    IMPLEMENTED_INTERFACE_REMOVED: 'IMPLEMENTED_INTERFACE_REMOVED',
    FIELD_REMOVED: 'FIELD_REMOVED',
    FIELD_CHANGED_KIND: 'FIELD_CHANGED_KIND',
    REQUIRED_ARG_ADDED: 'REQUIRED_ARG_ADDED',
    ARG_REMOVED: 'ARG_REMOVED',
    ARG_CHANGED_KIND: 'ARG_CHANGED_KIND',
    DIRECTIVE_REMOVED: 'DIRECTIVE_REMOVED',
    DIRECTIVE_ARG_REMOVED: 'DIRECTIVE_ARG_REMOVED',
    REQUIRED_DIRECTIVE_ARG_ADDED: 'REQUIRED_DIRECTIVE_ARG_ADDED',
    DIRECTIVE_REPEATABLE_REMOVED: 'DIRECTIVE_REPEATABLE_REMOVED',
    DIRECTIVE_LOCATION_REMOVED: 'DIRECTIVE_LOCATION_REMOVED'
});
exports.BreakingChangeType = BreakingChangeType;
var DangerousChangeType = Object.freeze({
    VALUE_ADDED_TO_ENUM: 'VALUE_ADDED_TO_ENUM',
    TYPE_ADDED_TO_UNION: 'TYPE_ADDED_TO_UNION',
    OPTIONAL_INPUT_FIELD_ADDED: 'OPTIONAL_INPUT_FIELD_ADDED',
    OPTIONAL_ARG_ADDED: 'OPTIONAL_ARG_ADDED',
    IMPLEMENTED_INTERFACE_ADDED: 'IMPLEMENTED_INTERFACE_ADDED',
    ARG_DEFAULT_VALUE_CHANGE: 'ARG_DEFAULT_VALUE_CHANGE'
});
exports.DangerousChangeType = DangerousChangeType;
/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of breaking changes covered by the other functions down below.
 */ function findBreakingChanges(oldSchema, newSchema) {
    var breakingChanges = findSchemaChanges(oldSchema, newSchema).filter(function(change) {
        return change.type in BreakingChangeType;
    });
    return breakingChanges;
}
/**
 * Given two schemas, returns an Array containing descriptions of all the types
 * of potentially dangerous changes covered by the other functions down below.
 */ function findDangerousChanges(oldSchema, newSchema) {
    var dangerousChanges = findSchemaChanges(oldSchema, newSchema).filter(function(change) {
        return change.type in DangerousChangeType;
    });
    return dangerousChanges;
}
function findSchemaChanges(oldSchema, newSchema) {
    return [].concat(findTypeChanges(oldSchema, newSchema), findDirectiveChanges(oldSchema, newSchema));
}
function findDirectiveChanges(oldSchema, newSchema) {
    var schemaChanges = [];
    var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());
    for(var _i2 = 0, _directivesDiff$remov2 = directivesDiff.removed; _i2 < _directivesDiff$remov2.length; _i2++){
        var oldDirective = _directivesDiff$remov2[_i2];
        schemaChanges.push({
            type: BreakingChangeType.DIRECTIVE_REMOVED,
            description: "".concat(oldDirective.name, " was removed.")
        });
    }
    for(var _i4 = 0, _directivesDiff$persi2 = directivesDiff.persisted; _i4 < _directivesDiff$persi2.length; _i4++){
        var _ref2 = _directivesDiff$persi2[_i4];
        var _oldDirective = _ref2[0];
        var newDirective = _ref2[1];
        var argsDiff = diff(_oldDirective.args, newDirective.args);
        for(var _i6 = 0, _argsDiff$added2 = argsDiff.added; _i6 < _argsDiff$added2.length; _i6++){
            var newArg = _argsDiff$added2[_i6];
            if ((0, _definition.isRequiredArgument)(newArg)) {
                schemaChanges.push({
                    type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,
                    description: "A required arg ".concat(newArg.name, " on directive ").concat(_oldDirective.name, " was added.")
                });
            }
        }
        for(var _i8 = 0, _argsDiff$removed2 = argsDiff.removed; _i8 < _argsDiff$removed2.length; _i8++){
            var oldArg = _argsDiff$removed2[_i8];
            schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,
                description: "".concat(oldArg.name, " was removed from ").concat(_oldDirective.name, ".")
            });
        }
        if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {
            schemaChanges.push({
                type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,
                description: "Repeatable flag was removed from ".concat(_oldDirective.name, ".")
            });
        }
        for(var _i10 = 0, _oldDirective$locatio2 = _oldDirective.locations; _i10 < _oldDirective$locatio2.length; _i10++){
            var location = _oldDirective$locatio2[_i10];
            if (newDirective.locations.indexOf(location) === -1) {
                schemaChanges.push({
                    type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,
                    description: "".concat(location, " was removed from ").concat(_oldDirective.name, ".")
                });
            }
        }
    }
    return schemaChanges;
}
function findTypeChanges(oldSchema, newSchema) {
    var schemaChanges = [];
    var typesDiff = diff((0, _objectValues.default)(oldSchema.getTypeMap()), (0, _objectValues.default)(newSchema.getTypeMap()));
    for(var _i12 = 0, _typesDiff$removed2 = typesDiff.removed; _i12 < _typesDiff$removed2.length; _i12++){
        var oldType = _typesDiff$removed2[_i12];
        schemaChanges.push({
            type: BreakingChangeType.TYPE_REMOVED,
            description: (0, _scalars.isSpecifiedScalarType)(oldType) ? "Standard scalar ".concat(oldType.name, " was removed because it is not referenced anymore.") : "".concat(oldType.name, " was removed.")
        });
    }
    for(var _i14 = 0, _typesDiff$persisted2 = typesDiff.persisted; _i14 < _typesDiff$persisted2.length; _i14++){
        var _ref4 = _typesDiff$persisted2[_i14];
        var _oldType = _ref4[0];
        var newType = _ref4[1];
        if ((0, _definition.isEnumType)(_oldType) && (0, _definition.isEnumType)(newType)) {
            schemaChanges.push.apply(schemaChanges, findEnumTypeChanges(_oldType, newType));
        } else if ((0, _definition.isUnionType)(_oldType) && (0, _definition.isUnionType)(newType)) {
            schemaChanges.push.apply(schemaChanges, findUnionTypeChanges(_oldType, newType));
        } else if ((0, _definition.isInputObjectType)(_oldType) && (0, _definition.isInputObjectType)(newType)) {
            schemaChanges.push.apply(schemaChanges, findInputObjectTypeChanges(_oldType, newType));
        } else if ((0, _definition.isObjectType)(_oldType) && (0, _definition.isObjectType)(newType)) {
            schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        } else if ((0, _definition.isInterfaceType)(_oldType) && (0, _definition.isInterfaceType)(newType)) {
            schemaChanges.push.apply(schemaChanges, findFieldChanges(_oldType, newType).concat(findImplementedInterfacesChanges(_oldType, newType)));
        } else if (_oldType.constructor !== newType.constructor) {
            schemaChanges.push({
                type: BreakingChangeType.TYPE_CHANGED_KIND,
                description: "".concat(_oldType.name, " changed from ") + "".concat(typeKindName(_oldType), " to ").concat(typeKindName(newType), ".")
            });
        }
    }
    return schemaChanges;
}
function findInputObjectTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));
    for(var _i16 = 0, _fieldsDiff$added2 = fieldsDiff.added; _i16 < _fieldsDiff$added2.length; _i16++){
        var newField = _fieldsDiff$added2[_i16];
        if ((0, _definition.isRequiredInputField)(newField)) {
            schemaChanges.push({
                type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,
                description: "A required field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
            });
        } else {
            schemaChanges.push({
                type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,
                description: "An optional field ".concat(newField.name, " on input type ").concat(oldType.name, " was added.")
            });
        }
    }
    for(var _i18 = 0, _fieldsDiff$removed2 = fieldsDiff.removed; _i18 < _fieldsDiff$removed2.length; _i18++){
        var oldField = _fieldsDiff$removed2[_i18];
        schemaChanges.push({
            type: BreakingChangeType.FIELD_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
    }
    for(var _i20 = 0, _fieldsDiff$persisted2 = fieldsDiff.persisted; _i20 < _fieldsDiff$persisted2.length; _i20++){
        var _ref6 = _fieldsDiff$persisted2[_i20];
        var _oldField = _ref6[0];
        var _newField = _ref6[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);
        if (!isSafe) {
            schemaChanges.push({
                type: BreakingChangeType.FIELD_CHANGED_KIND,
                description: "".concat(oldType.name, ".").concat(_oldField.name, " changed type from ") + "".concat(String(_oldField.type), " to ").concat(String(_newField.type), ".")
            });
        }
    }
    return schemaChanges;
}
function findUnionTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());
    for(var _i22 = 0, _possibleTypesDiff$ad2 = possibleTypesDiff.added; _i22 < _possibleTypesDiff$ad2.length; _i22++){
        var newPossibleType = _possibleTypesDiff$ad2[_i22];
        schemaChanges.push({
            type: DangerousChangeType.TYPE_ADDED_TO_UNION,
            description: "".concat(newPossibleType.name, " was added to union type ").concat(oldType.name, ".")
        });
    }
    for(var _i24 = 0, _possibleTypesDiff$re2 = possibleTypesDiff.removed; _i24 < _possibleTypesDiff$re2.length; _i24++){
        var oldPossibleType = _possibleTypesDiff$re2[_i24];
        schemaChanges.push({
            type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,
            description: "".concat(oldPossibleType.name, " was removed from union type ").concat(oldType.name, ".")
        });
    }
    return schemaChanges;
}
function findEnumTypeChanges(oldType, newType) {
    var schemaChanges = [];
    var valuesDiff = diff(oldType.getValues(), newType.getValues());
    for(var _i26 = 0, _valuesDiff$added2 = valuesDiff.added; _i26 < _valuesDiff$added2.length; _i26++){
        var newValue = _valuesDiff$added2[_i26];
        schemaChanges.push({
            type: DangerousChangeType.VALUE_ADDED_TO_ENUM,
            description: "".concat(newValue.name, " was added to enum type ").concat(oldType.name, ".")
        });
    }
    for(var _i28 = 0, _valuesDiff$removed2 = valuesDiff.removed; _i28 < _valuesDiff$removed2.length; _i28++){
        var oldValue = _valuesDiff$removed2[_i28];
        schemaChanges.push({
            type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,
            description: "".concat(oldValue.name, " was removed from enum type ").concat(oldType.name, ".")
        });
    }
    return schemaChanges;
}
function findImplementedInterfacesChanges(oldType, newType) {
    var schemaChanges = [];
    var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());
    for(var _i30 = 0, _interfacesDiff$added2 = interfacesDiff.added; _i30 < _interfacesDiff$added2.length; _i30++){
        var newInterface = _interfacesDiff$added2[_i30];
        schemaChanges.push({
            type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,
            description: "".concat(newInterface.name, " added to interfaces implemented by ").concat(oldType.name, ".")
        });
    }
    for(var _i32 = 0, _interfacesDiff$remov2 = interfacesDiff.removed; _i32 < _interfacesDiff$remov2.length; _i32++){
        var oldInterface = _interfacesDiff$remov2[_i32];
        schemaChanges.push({
            type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,
            description: "".concat(oldType.name, " no longer implements interface ").concat(oldInterface.name, ".")
        });
    }
    return schemaChanges;
}
function findFieldChanges(oldType, newType) {
    var schemaChanges = [];
    var fieldsDiff = diff((0, _objectValues.default)(oldType.getFields()), (0, _objectValues.default)(newType.getFields()));
    for(var _i34 = 0, _fieldsDiff$removed4 = fieldsDiff.removed; _i34 < _fieldsDiff$removed4.length; _i34++){
        var oldField = _fieldsDiff$removed4[_i34];
        schemaChanges.push({
            type: BreakingChangeType.FIELD_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " was removed.")
        });
    }
    for(var _i36 = 0, _fieldsDiff$persisted4 = fieldsDiff.persisted; _i36 < _fieldsDiff$persisted4.length; _i36++){
        var _ref8 = _fieldsDiff$persisted4[_i36];
        var _oldField2 = _ref8[0];
        var newField = _ref8[1];
        schemaChanges.push.apply(schemaChanges, findArgChanges(oldType, _oldField2, newField));
        var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);
        if (!isSafe) {
            schemaChanges.push({
                type: BreakingChangeType.FIELD_CHANGED_KIND,
                description: "".concat(oldType.name, ".").concat(_oldField2.name, " changed type from ") + "".concat(String(_oldField2.type), " to ").concat(String(newField.type), ".")
            });
        }
    }
    return schemaChanges;
}
function findArgChanges(oldType, oldField, newField) {
    var schemaChanges = [];
    var argsDiff = diff(oldField.args, newField.args);
    for(var _i38 = 0, _argsDiff$removed4 = argsDiff.removed; _i38 < _argsDiff$removed4.length; _i38++){
        var oldArg = _argsDiff$removed4[_i38];
        schemaChanges.push({
            type: BreakingChangeType.ARG_REMOVED,
            description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(oldArg.name, " was removed.")
        });
    }
    for(var _i40 = 0, _argsDiff$persisted2 = argsDiff.persisted; _i40 < _argsDiff$persisted2.length; _i40++){
        var _ref10 = _argsDiff$persisted2[_i40];
        var _oldArg = _ref10[0];
        var newArg = _ref10[1];
        var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);
        if (!isSafe) {
            schemaChanges.push({
                type: BreakingChangeType.ARG_CHANGED_KIND,
                description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed type from ") + "".concat(String(_oldArg.type), " to ").concat(String(newArg.type), ".")
            });
        } else if (_oldArg.defaultValue !== undefined) {
            if (newArg.defaultValue === undefined) {
                schemaChanges.push({
                    type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                    description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " defaultValue was removed.")
                });
            } else {
                // Since we looking only for client's observable changes we should
                // compare default values in the same representation as they are
                // represented inside introspection.
                var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);
                var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);
                if (oldValueStr !== newValueStr) {
                    schemaChanges.push({
                        type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,
                        description: "".concat(oldType.name, ".").concat(oldField.name, " arg ").concat(_oldArg.name, " has changed defaultValue from ").concat(oldValueStr, " to ").concat(newValueStr, ".")
                    });
                }
            }
        }
    }
    for(var _i42 = 0, _argsDiff$added4 = argsDiff.added; _i42 < _argsDiff$added4.length; _i42++){
        var _newArg = _argsDiff$added4[_i42];
        if ((0, _definition.isRequiredArgument)(_newArg)) {
            schemaChanges.push({
                type: BreakingChangeType.REQUIRED_ARG_ADDED,
                description: "A required arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
            });
        } else {
            schemaChanges.push({
                type: DangerousChangeType.OPTIONAL_ARG_ADDED,
                description: "An optional arg ".concat(_newArg.name, " on ").concat(oldType.name, ".").concat(oldField.name, " was added.")
            });
        }
    }
    return schemaChanges;
}
function isChangeSafeForObjectOrInterfaceField(oldType, newType) {
    if ((0, _definition.isListType)(oldType)) {
        return (0, _definition.isListType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) || // moving from nullable to non-null of the same underlying type is safe
        (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
    }
    if ((0, _definition.isNonNullType)(oldType)) {
        // if they're both non-null, make sure the underlying types are compatible
        return (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);
    }
    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name || // moving from nullable to non-null of the same underlying type is safe
    (0, _definition.isNonNullType)(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType);
}
function isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {
    if ((0, _definition.isListType)(oldType)) {
        // if they're both lists, make sure the underlying types are compatible
        return (0, _definition.isListType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);
    }
    if ((0, _definition.isNonNullType)(oldType)) {
        return(// compatible
        (0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) || // moving from non-null to nullable of the same underlying type is safe
        !(0, _definition.isNonNullType)(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType));
    } // if they're both named types, see if their names are equivalent
    return (0, _definition.isNamedType)(newType) && oldType.name === newType.name;
}
function typeKindName(type) {
    if ((0, _definition.isScalarType)(type)) {
        return 'a Scalar type';
    }
    if ((0, _definition.isObjectType)(type)) {
        return 'an Object type';
    }
    if ((0, _definition.isInterfaceType)(type)) {
        return 'an Interface type';
    }
    if ((0, _definition.isUnionType)(type)) {
        return 'a Union type';
    }
    if ((0, _definition.isEnumType)(type)) {
        return 'an Enum type';
    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')
    if ((0, _definition.isInputObjectType)(type)) {
        return 'an Input type';
    } // istanbul ignore next (Not reachable. All possible named types have been considered)
    false || (0, _invariant.default)(0, 'Unexpected type: ' + (0, _inspect.default)(type));
}
function stringifyValue(value, type) {
    var ast = (0, _astFromValue.astFromValue)(value, type);
    ast != null || (0, _invariant.default)(0);
    var sortedAST = (0, _visitor.visit)(ast, {
        ObjectValue: function ObjectValue(objectNode) {
            var fields = [].concat(objectNode.fields).sort(function(fieldA, fieldB) {
                return fieldA.name.value.localeCompare(fieldB.name.value);
            });
            return _objectSpread(_objectSpread({}, objectNode), {}, {
                fields: fields
            });
        }
    });
    return (0, _printer.print)(sortedAST);
}
function diff(oldArray, newArray) {
    var added = [];
    var removed = [];
    var persisted = [];
    var oldMap = (0, _keyMap.default)(oldArray, function(_ref11) {
        var name = _ref11.name;
        return name;
    });
    var newMap = (0, _keyMap.default)(newArray, function(_ref12) {
        var name = _ref12.name;
        return name;
    });
    for(var _i44 = 0; _i44 < oldArray.length; _i44++){
        var oldItem = oldArray[_i44];
        var newItem = newMap[oldItem.name];
        if (newItem === undefined) {
            removed.push(oldItem);
        } else {
            persisted.push([
                oldItem,
                newItem
            ]);
        }
    }
    for(var _i46 = 0; _i46 < newArray.length; _i46++){
        var _newItem = newArray[_i46];
        if (oldMap[_newItem.name] === undefined) {
            added.push(_newItem);
        }
    }
    return {
        added: added,
        persisted: persisted,
        removed: removed
    };
}
}}),
"[project]/node_modules/graphql/utilities/findDeprecatedUsages.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.findDeprecatedUsages = findDeprecatedUsages;
var _validate = __turbopack_context__.r("[project]/node_modules/graphql/validation/validate.js [app-route] (ecmascript)");
var _NoDeprecatedCustomRule = __turbopack_context__.r("[project]/node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.js [app-route] (ecmascript)");
/**
 * A validation rule which reports deprecated usages.
 *
 * Returns a list of GraphQLError instances describing each deprecated use.
 *
 * @deprecated Please use `validate` with `NoDeprecatedCustomRule` instead:
 *
 * ```
 * import { validate, NoDeprecatedCustomRule } from 'graphql'
 *
 * const errors = validate(schema, document, [NoDeprecatedCustomRule])
 * ```
 */ function findDeprecatedUsages(schema, ast) {
    return (0, _validate.validate)(schema, ast, [
        _NoDeprecatedCustomRule.NoDeprecatedCustomRule
    ]);
}
}}),
"[project]/node_modules/graphql/utilities/index.js [app-route] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { m: module, e: exports } = __turbopack_context__;
{
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getIntrospectionQuery", {
    enumerable: true,
    get: function get() {
        return _getIntrospectionQuery.getIntrospectionQuery;
    }
});
Object.defineProperty(exports, "getOperationAST", {
    enumerable: true,
    get: function get() {
        return _getOperationAST.getOperationAST;
    }
});
Object.defineProperty(exports, "getOperationRootType", {
    enumerable: true,
    get: function get() {
        return _getOperationRootType.getOperationRootType;
    }
});
Object.defineProperty(exports, "introspectionFromSchema", {
    enumerable: true,
    get: function get() {
        return _introspectionFromSchema.introspectionFromSchema;
    }
});
Object.defineProperty(exports, "buildClientSchema", {
    enumerable: true,
    get: function get() {
        return _buildClientSchema.buildClientSchema;
    }
});
Object.defineProperty(exports, "buildASTSchema", {
    enumerable: true,
    get: function get() {
        return _buildASTSchema.buildASTSchema;
    }
});
Object.defineProperty(exports, "buildSchema", {
    enumerable: true,
    get: function get() {
        return _buildASTSchema.buildSchema;
    }
});
Object.defineProperty(exports, "extendSchema", {
    enumerable: true,
    get: function get() {
        return _extendSchema.extendSchema;
    }
});
Object.defineProperty(exports, "getDescription", {
    enumerable: true,
    get: function get() {
        return _extendSchema.getDescription;
    }
});
Object.defineProperty(exports, "lexicographicSortSchema", {
    enumerable: true,
    get: function get() {
        return _lexicographicSortSchema.lexicographicSortSchema;
    }
});
Object.defineProperty(exports, "printSchema", {
    enumerable: true,
    get: function get() {
        return _printSchema.printSchema;
    }
});
Object.defineProperty(exports, "printType", {
    enumerable: true,
    get: function get() {
        return _printSchema.printType;
    }
});
Object.defineProperty(exports, "printIntrospectionSchema", {
    enumerable: true,
    get: function get() {
        return _printSchema.printIntrospectionSchema;
    }
});
Object.defineProperty(exports, "typeFromAST", {
    enumerable: true,
    get: function get() {
        return _typeFromAST.typeFromAST;
    }
});
Object.defineProperty(exports, "valueFromAST", {
    enumerable: true,
    get: function get() {
        return _valueFromAST.valueFromAST;
    }
});
Object.defineProperty(exports, "valueFromASTUntyped", {
    enumerable: true,
    get: function get() {
        return _valueFromASTUntyped.valueFromASTUntyped;
    }
});
Object.defineProperty(exports, "astFromValue", {
    enumerable: true,
    get: function get() {
        return _astFromValue.astFromValue;
    }
});
Object.defineProperty(exports, "TypeInfo", {
    enumerable: true,
    get: function get() {
        return _TypeInfo.TypeInfo;
    }
});
Object.defineProperty(exports, "visitWithTypeInfo", {
    enumerable: true,
    get: function get() {
        return _TypeInfo.visitWithTypeInfo;
    }
});
Object.defineProperty(exports, "coerceInputValue", {
    enumerable: true,
    get: function get() {
        return _coerceInputValue.coerceInputValue;
    }
});
Object.defineProperty(exports, "concatAST", {
    enumerable: true,
    get: function get() {
        return _concatAST.concatAST;
    }
});
Object.defineProperty(exports, "separateOperations", {
    enumerable: true,
    get: function get() {
        return _separateOperations.separateOperations;
    }
});
Object.defineProperty(exports, "stripIgnoredCharacters", {
    enumerable: true,
    get: function get() {
        return _stripIgnoredCharacters.stripIgnoredCharacters;
    }
});
Object.defineProperty(exports, "isEqualType", {
    enumerable: true,
    get: function get() {
        return _typeComparators.isEqualType;
    }
});
Object.defineProperty(exports, "isTypeSubTypeOf", {
    enumerable: true,
    get: function get() {
        return _typeComparators.isTypeSubTypeOf;
    }
});
Object.defineProperty(exports, "doTypesOverlap", {
    enumerable: true,
    get: function get() {
        return _typeComparators.doTypesOverlap;
    }
});
Object.defineProperty(exports, "assertValidName", {
    enumerable: true,
    get: function get() {
        return _assertValidName.assertValidName;
    }
});
Object.defineProperty(exports, "isValidNameError", {
    enumerable: true,
    get: function get() {
        return _assertValidName.isValidNameError;
    }
});
Object.defineProperty(exports, "BreakingChangeType", {
    enumerable: true,
    get: function get() {
        return _findBreakingChanges.BreakingChangeType;
    }
});
Object.defineProperty(exports, "DangerousChangeType", {
    enumerable: true,
    get: function get() {
        return _findBreakingChanges.DangerousChangeType;
    }
});
Object.defineProperty(exports, "findBreakingChanges", {
    enumerable: true,
    get: function get() {
        return _findBreakingChanges.findBreakingChanges;
    }
});
Object.defineProperty(exports, "findDangerousChanges", {
    enumerable: true,
    get: function get() {
        return _findBreakingChanges.findDangerousChanges;
    }
});
Object.defineProperty(exports, "findDeprecatedUsages", {
    enumerable: true,
    get: function get() {
        return _findDeprecatedUsages.findDeprecatedUsages;
    }
});
var _getIntrospectionQuery = __turbopack_context__.r("[project]/node_modules/graphql/utilities/getIntrospectionQuery.js [app-route] (ecmascript)");
var _getOperationAST = __turbopack_context__.r("[project]/node_modules/graphql/utilities/getOperationAST.js [app-route] (ecmascript)");
var _getOperationRootType = __turbopack_context__.r("[project]/node_modules/graphql/utilities/getOperationRootType.js [app-route] (ecmascript)");
var _introspectionFromSchema = __turbopack_context__.r("[project]/node_modules/graphql/utilities/introspectionFromSchema.js [app-route] (ecmascript)");
var _buildClientSchema = __turbopack_context__.r("[project]/node_modules/graphql/utilities/buildClientSchema.js [app-route] (ecmascript)");
var _buildASTSchema = __turbopack_context__.r("[project]/node_modules/graphql/utilities/buildASTSchema.js [app-route] (ecmascript)");
var _extendSchema = __turbopack_context__.r("[project]/node_modules/graphql/utilities/extendSchema.js [app-route] (ecmascript)");
var _lexicographicSortSchema = __turbopack_context__.r("[project]/node_modules/graphql/utilities/lexicographicSortSchema.js [app-route] (ecmascript)");
var _printSchema = __turbopack_context__.r("[project]/node_modules/graphql/utilities/printSchema.js [app-route] (ecmascript)");
var _typeFromAST = __turbopack_context__.r("[project]/node_modules/graphql/utilities/typeFromAST.js [app-route] (ecmascript)");
var _valueFromAST = __turbopack_context__.r("[project]/node_modules/graphql/utilities/valueFromAST.js [app-route] (ecmascript)");
var _valueFromASTUntyped = __turbopack_context__.r("[project]/node_modules/graphql/utilities/valueFromASTUntyped.js [app-route] (ecmascript)");
var _astFromValue = __turbopack_context__.r("[project]/node_modules/graphql/utilities/astFromValue.js [app-route] (ecmascript)");
var _TypeInfo = __turbopack_context__.r("[project]/node_modules/graphql/utilities/TypeInfo.js [app-route] (ecmascript)");
var _coerceInputValue = __turbopack_context__.r("[project]/node_modules/graphql/utilities/coerceInputValue.js [app-route] (ecmascript)");
var _concatAST = __turbopack_context__.r("[project]/node_modules/graphql/utilities/concatAST.js [app-route] (ecmascript)");
var _separateOperations = __turbopack_context__.r("[project]/node_modules/graphql/utilities/separateOperations.js [app-route] (ecmascript)");
var _stripIgnoredCharacters = __turbopack_context__.r("[project]/node_modules/graphql/utilities/stripIgnoredCharacters.js [app-route] (ecmascript)");
var _typeComparators = __turbopack_context__.r("[project]/node_modules/graphql/utilities/typeComparators.js [app-route] (ecmascript)");
var _assertValidName = __turbopack_context__.r("[project]/node_modules/graphql/utilities/assertValidName.js [app-route] (ecmascript)");
var _findBreakingChanges = __turbopack_context__.r("[project]/node_modules/graphql/utilities/findBreakingChanges.js [app-route] (ecmascript)");
var _findDeprecatedUsages = __turbopack_context__.r("[project]/node_modules/graphql/utilities/findDeprecatedUsages.js [app-route] (ecmascript)");
}}),

};

//# sourceMappingURL=node_modules_graphql_utilities_3d3880e9._.js.map