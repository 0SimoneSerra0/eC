{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/lib/graphql/resolvers/product.resolver.ts"],"sourcesContent":["import { Resolver, Query, ObjectType, Field, Float, ID, Arg } from \"type-graphql\"\nimport { PrismaClient } from \"@prisma/client\";\n\n@ObjectType()\nclass Review {\n  @Field( () => ID)\n  user!: string\n\n  @Field()\n  date!: string\n\n  @Field()\n  content!: string\n\n  @Field(() => Float) // perchÃ© number di default diventa Int\n  stars!: number\n}\n\n@ObjectType()\nclass Product {\n  @Field()\n  id!: string\n\n  @Field()\n  name!: string\n\n  @Field()\n  price!: number\n\n  @Field()\n  description!: string\n\n  @Field()\n  rating!: number\n\n  @Field()\n  img!: string\n\n  @Field( () => [Review])\n  reviews!: Review[]\n}\n\n\nconst a : Review = {user: \"Giacomo\", date: \"n/a\", content: \"Bello schifo\", stars: 0.1}\nconst prisma = new PrismaClient();\n@Resolver(Product)\nexport class ProductResolver {\n  @Query(() => [Product])\n  async products(): Promise<Product[]> {\n    return prisma.product.findMany();\n  }\n\n  @Query(() => Product, { nullable: true })\n  async product(@Arg(\"id\") id: string): Promise<Product | null> {\n    return prisma.product.findUnique({\n      where: { id: Number(id) }, // WHERE id = $1\n    });\n  }\n}"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAEA,MACM;IAEJ,KAAa;IAGb,KAAa;IAGb,QAAgB;IAGhB,MAAc;AAChB;;+LAXgB,uKAAA,CAAA,KAAE;;;;;;;;;;;;+LASH,uKAAA,CAAA,QAAK;;;;;;AAIpB,MACM;IAEJ,GAAW;IAGX,KAAa;IAGb,MAAc;IAGd,YAAoB;IAGpB,OAAe;IAGf,IAAY;IAGZ,QAAkB;AACpB;;;;;;;;;;;;;;;;;;;;;;;;;;+LAFgB;YAAC;SAAO;;;;;;AAKxB,MAAM,IAAa;IAAC,MAAM;IAAW,MAAM;IAAO,SAAS;IAAgB,OAAO;AAAG;AACrF,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,MAAM;IACX,MACM,WAA+B;QACnC,OAAO,OAAO,OAAO,CAAC,QAAQ;IAChC;IAEA,MACM,QAAQ,AAAW,EAAU,EAA2B;QAC5D,OAAO,OAAO,OAAO,CAAC,UAAU,CAAC;YAC/B,OAAO;gBAAE,IAAI,OAAO;YAAI;QAC1B;IACF;AACF;;+LAXe;YAAC;SAAQ;;;;;;+LAKT;QAAW,UAAU","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/lib/graphql/schema.ts"],"sourcesContent":["import \"reflect-metadata\"\nimport { buildSchema } from \"type-graphql\"\nimport { ProductResolver } from \"./resolvers/product.resolver\" \n\nexport const createSchema = () => {\n  return buildSchema({\n    resolvers: [ProductResolver],\n    emitSchemaFile: false,\n  })\n}"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AACA;;;;AAEO,MAAM,eAAe;IAC1B,OAAO,CAAA,GAAA,yKAAA,CAAA,cAAW,AAAD,EAAE;QACjB,WAAW;YAAC,2JAAA,CAAA,kBAAe;SAAC;QAC5B,gBAAgB;IAClB;AACF","debugId":null}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/app/api/graphql/route.ts"],"sourcesContent":["import { createYoga } from \"graphql-yoga\"\nimport { NextRequest } from \"next/server\"\nimport { createSchema } from \"@/lib/graphql/schema\"\n\nconst yoga = createYoga<{\n  req: NextRequest\n}>({\n  schema: await createSchema(),\n  graphqlEndpoint: \"/api/graphql\",\n  fetchAPI: { Request, Response },\n})\n\nexport { yoga as GET, yoga as POST }"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAEA,MAAM,OAAO,CAAA,GAAA,kJAAA,CAAA,aAAU,AAAD,EAEnB;IACD,QAAQ,MAAM,CAAA,GAAA,iIAAA,CAAA,eAAY,AAAD;IACzB,iBAAiB;IACjB,UAAU;QAAE;QAAS;IAAS;AAChC","debugId":null}}]
}