{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/metadata.max.json.js"],"sourcesContent":["// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6],0,0,0,0,0,0,0,[[\"6[2-467]\\\\d{3}\",[5]],[\"4\\\\d{4}\",[5]],0,0,0,0,[\"(?:0[1-9]|[1589]\\\\d)\\\\d{4}\",[6]]]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[[\"[78]\\\\d{5}\",[6]],[\"690\\\\d{6}|[356]\\\\d{5}\",[6,9]],[\"180[02]\\\\d{4}\",[8]],[\"[19]\\\\d{5}\",[6]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[2-4679][2-8]\\\\d{6}\",[8]],[\"5[024-68]\\\\d{7}\",[9]],[\"400\\\\d{6}|800\\\\d{2,9}\"],[\"900[02]\\\\d{5}\",[9]],0,0,[\"600[25]\\\\d{5}\",[9]],0,0,[\"700[05]\\\\d{5}\",[9]]]],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[25][0-8]|[34][0-4]|6[0-5])[2-9]\\\\d{6}\"],[\"7\\\\d{8}\"]]],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\",[[\"268(?:4(?:6[0-38]|84)|56[0-2])\\\\d{4}\"],[\"268(?:464|7(?:1[3-9]|[28]\\\\d|3[0246]|64|7[0-689]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"26840[69]\\\\d{4}\"],[\"26848[01]\\\\d{4}\"]]],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\",[[\"264(?:292|4(?:6[12]|9[78]))\\\\d{4}\"],[\"264(?:235|4(?:69|76)|5(?:3[6-9]|8[1-4])|7(?:29|72))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"264724\\\\d{4}\"]]],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"4505[0-2]\\\\d{3}|(?:[2358][16-9]\\\\d[2-9]|4410)\\\\d{4}|(?:[2358][2-5][2-9]|4(?:[2-57-9][2-9]|6\\\\d))\\\\d{5}\",[8]],[\"6(?:[78][2-9]|9\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{4}\",[7]],[\"900[1-9]\\\\d\\\\d\",[6]],[\"700[2-9]\\\\d{4}\",[8]],0,0,0,0,[\"808[1-9]\\\\d\\\\d\",[6]]]],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:1[0-25]|47)\\\\d|2(?:2[2-46]|3[1-8]|4[2-69]|5[2-7]|6[1-9]|8[1-7])|3[12]2)\\\\d{5}\"],[\"(?:33|4[1349]|55|77|88|9[13-9])\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[016]\\\\d{5}\"],0,0,0,0,[\"60(?:2[78]|3[5-9]|4[02-9]|5[0-46-9]|[6-8]\\\\d|9[0-2])\\\\d{4}\"],[\"80[1-4]\\\\d{5}\"]]],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]],0,0,0,0,0,0,[[\"2\\\\d(?:[0134][25-9]|[25-9]\\\\d)\\\\d{5}\"],[\"9[1-79]\\\\d{7}\"]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\",0,0,[[\"3(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\\\d{5}|(?:2(?:2(?:2[59]|44|52)|3(?:26|44)|47[35]|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|(?:2(?:657|9(?:54|66))|3(?:48[27]|7(?:55|77)|8(?:65|78)))[2-8]\\\\d{5}|(?:2(?:284|3(?:02|23)|477|622|920)|3(?:4(?:46|89|92)|541))[2-7]\\\\d{5}|(?:(?:11[1-8]|670)\\\\d|2(?:2(?:0[45]|1[2-6]|3[3-6])|3(?:[06]4|7[45])|494|6(?:04|1[2-8]|[36][45]|4[3-6])|80[45]|9(?:[17][4-6]|[48][45]|9[3-6]))|3(?:364|4(?:1[2-8]|[25][4-6]|3[3-6]|84)|5(?:1[2-9]|[38][4-6])|6(?:2[45]|44)|7[069][45]|8(?:0[45]|1[2-7]|3[4-6]|5[3-6]|7[2-6]|8[3-68])))\\\\d{6}|(?:2(?:2(?:62|81)|320|9(?:42|83))|3(?:329|4(?:62|7[16])|5(?:43|64)|7(?:18|5[17])))[2-6]\\\\d{5}|2(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|(?:2(?:257|3(?:24|46|92)|9(?:01|23|64))|3(?:4(?:42|64)|5(?:25|37|4[47]|71)|7(?:35|72)|825))[3-6]\\\\d{5}|(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|25|[45][25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[035-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[14]|4[13]|5[468]|7[3-5]|8[26])|8(?:2[67]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\",[10]],[\"93(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\\\d{5}|9(?:2(?:2(?:2[59]|44|52)|3(?:26|44)|47[35]|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|9(?:2(?:657|9(?:54|66))|3(?:48[27]|7(?:55|77)|8(?:65|78)))[2-8]\\\\d{5}|9(?:2(?:284|3(?:02|23)|477|622|920)|3(?:4(?:46|89|92)|541))[2-7]\\\\d{5}|(?:675\\\\d|9(?:11[1-8]\\\\d|2(?:2(?:0[45]|1[2-6]|3[3-6])|3(?:[06]4|7[45])|494|6(?:04|1[2-8]|[36][45]|4[3-6])|80[45]|9(?:[17][4-6]|[48][45]|9[3-6]))|3(?:364|4(?:1[2-8]|[25][4-6]|3[3-6]|84)|5(?:1[2-9]|[38][4-6])|6(?:2[45]|44)|7[069][45]|8(?:0[45]|1[2-7]|3[4-6]|5[3-6]|7[2-6]|8[3-68]))))\\\\d{6}|9(?:2(?:2(?:62|81)|320|9(?:42|83))|3(?:329|4(?:62|7[16])|5(?:43|64)|7(?:18|5[17])))[2-6]\\\\d{5}|92(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|9(?:2(?:257|3(?:24|46|92)|9(?:01|23|64))|3(?:4(?:42|64)|5(?:25|37|4[47]|71)|7(?:35|72)|825))[3-6]\\\\d{5}|9(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|25|[45][25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[035-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[14]|4[13]|5[468]|7[3-5]|8[26])|8(?:2[67]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\"],[\"800\\\\d{7,8}\"],[\"60[04579]\\\\d{7}\",[10]],0,0,[\"810\\\\d{7}\",[10]]]],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\",[[\"6846(?:22|33|44|55|77|88|9[19])\\\\d{4}\"],[\"684(?:2(?:48|5[2468]|7[26])|7(?:3[13]|70|82))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:48|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\",\"(?:31|4)6|51|6(?:485|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1(?:11\\\\d|[2-9]\\\\d{3,11})|(?:316|463)\\\\d{3,10}|648[34]\\\\d{3,9}|(?:51|66|73)2\\\\d{3,10}|(?:2(?:1[467]|2[13-8]|5[2357]|6[1-46-8]|7[1-8]|8[124-7]|9[1458])|3(?:1[1-578]|3[23568]|4[5-7]|5[1378]|6[1-38]|8[3-68])|4(?:2[1-8]|35|7[1368]|8[2457])|5(?:2[1-8]|3[357]|4[147]|5[12578]|6[37])|6(?:13|2[1-47]|4[135-7]|5[468])|7(?:2[1-8]|35|4[13478]|5[68]|6[16-8]|7[1-6]|9[45]))\\\\d{4,10}\"],[\"6(?:485|(?:5[0-3579]|6[013-9]|[7-9]\\\\d)\\\\d)\\\\d{3,9}\",[7,8,9,10,11,12,13]],[\"800\\\\d{6,10}\",[9,10,11,12,13]],[\"(?:8[69][2-68]|9(?:0[01]|3[019]))\\\\d{6,10}\",[9,10,11,12,13]],0,0,0,0,[\"5(?:0[1-9]|17|[79]\\\\d)\\\\d{2,10}|7[28]0\\\\d{6,10}\",[5,6,7,8,9,10,11,12,13]],[\"8(?:10|2[018])\\\\d{6,10}|828\\\\d{5}\",[8,9,10,11,12,13]]]],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:(?:[0-26-9]\\\\d|3[0-8]|5[0135-9])\\\\d|4(?:[02-9]\\\\d|10))|3(?:(?:[0-3589]\\\\d|6[1-9]|7[0-35-9])\\\\d|4(?:[0-578]\\\\d|90))|7(?:[013-57-9]\\\\d|2[0-8])\\\\d)\\\\d\\\\d|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4])|[34]\\\\d\\\\d)|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]],0,0,0,0,0,0,[[\"5(?:2\\\\d|8[1-9])\\\\d{4}\"],[\"(?:290|5[69]\\\\d|6(?:[03]0|22|4[0-2]|[69]\\\\d)|7(?:[34]\\\\d|7[07])|9(?:6[45]|9[4-8]))\\\\d{4}\"],[\"800\\\\d{4}\"],[\"900\\\\d{4}\"],0,0,0,0,[\"(?:28\\\\d|501)\\\\d{4}\"]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",[[\"18[1-8]\\\\d{3,6}\",[6,7,8,9]],[\"4946\\\\d{2,6}|(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"20\\\\d{4,8}|60[12]\\\\d{5,6}|7(?:099\\\\d{4,5}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d|(?:606|7(?:0[78]|1|3\\\\d))\\\\d{7}|(?:10|29|3[09]|70[1-5]\\\\d)\\\\d{4,8}\"]],\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[12]428|3655[02])\\\\d{4}|(?:2(?:22[0-79]|63[0-28])|3654)\\\\d{5}|(?:(?:1[28]|46)\\\\d|2(?:[014-6]2|[23]3))\\\\d{6}\"],[\"36554\\\\d{4}|(?:[16]0|4[04]|5[015]|7[07]|99)\\\\d{7}\"],[\"88\\\\d{7}\"],[\"900200\\\\d{3}\"]]],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:[05-79][2-9]|1[4579]|[23][24-9]|4[2-4689]|8[2457-9])|49[2-579]|5(?:0[2-49]|[13][2-9]|[268][2-4679]|4[4689]|5[2-79]|7[2-69]|9[2-4689]))\\\\d{5}\",[8]],[\"6040\\\\d{5}|6(?:03|[1-356]|44|7\\\\d)\\\\d{6}\"],[\"8[08]\\\\d{6}\",[8]],[\"9[0246]\\\\d{6}\",[8]],0,0,[\"703[235]0\\\\d{3}|70(?:2[0-5]|3[0146]|[56]0)\\\\d{4}\",[8]],0,0,[\"8[12]\\\\d{6}\",[8]]]],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\",[[\"246521[0369]\\\\d{3}|246(?:2(?:2[78]|7[0-4])|4(?:1[024-6]|2\\\\d|3[2-9])|5(?:20|[34]\\\\d|54|7[1-3])|6(?:2\\\\d|38)|7[35]7|9(?:1[89]|63))\\\\d{4}\"],[\"246(?:(?:2(?:[3568]\\\\d|4[0-57-9])|3(?:5[2-9]|6[0-6])|4(?:46|5\\\\d)|69[5-7]|8(?:[2-5]\\\\d|83))\\\\d|52(?:1[147]|20))\\\\d{3}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:246976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"246(?:292|367|4(?:1[7-9]|3[01]|4[47-9]|67)|7(?:1[2-9]|2\\\\d|3[016]|53))\\\\d{4}\"],0,[\"24631\\\\d{5}\"]]],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:[15]|28|4[14])|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|2[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4(?:31\\\\d\\\\d|423)|5222)\\\\d{3}(?:\\\\d{2})?|8332[6-9]\\\\d\\\\d|(?:3(?:03[56]|224)|4(?:22[25]|653))\\\\d{3,4}|(?:3(?:42[47]|529|823)|4(?:027|525|65(?:28|8))|562|6257|7(?:1(?:5[3-5]|6[12]|7[156]|89)|22[589]56|32|42675|52(?:[25689](?:56|8)|[347]8)|71(?:6[1267]|75|89)|92374)|82(?:2[59]|32)56|9(?:03[23]56|23(?:256|373)|31|5(?:1|2[4589]56)))\\\\d{3}|(?:3(?:02[348]|22[35]|324|422)|4(?:22[67]|32[236-9]|6(?:2[46]|5[57])|953)|5526|6(?:024|6655)|81)\\\\d{4,5}|(?:2(?:7(?:1[0-267]|2[0-289]|3[0-29]|4[01]|5[1-3]|6[013]|7[0178]|91)|8(?:0[125]|1[1-6]|2[0157-9]|3[1-69]|41|6[1-35]|7[1-5]|8[1-8]|9[0-6])|9(?:0[0-2]|1[0-4]|2[568]|3[3-6]|5[5-7]|6[0136-9]|7[0-7]|8[014-9]))|3(?:0(?:2[025-79]|3[2-4])|181|22[12]|32[2356]|824)|4(?:02[09]|22[348]|32[045]|523|6(?:27|54))|666(?:22|53)|7(?:22[57-9]|42[56]|82[35])8|8(?:0[124-9]|2(?:181|2[02-4679]8)|4[12]|[5-7]2)|9(?:[04]2|2(?:2|328)|81))\\\\d{4}|(?:2(?:[23]\\\\d|[45])\\\\d\\\\d|3(?:1(?:2[5-7]|[5-7])|425|822)|4(?:033|1\\\\d|[257]1|332|4(?:2[246]|5[25])|6(?:2[35]|56|62)|8(?:23|54)|92[2-5])|5(?:02[03489]|22[457]|32[35-79]|42[46]|6(?:[18]|53)|724|826)|6(?:023|2(?:2[2-5]|5[3-5]|8)|32[3478]|42[34]|52[47]|6(?:[18]|6(?:2[34]|5[24]))|[78]2[2-5]|92[2-6])|7(?:02|21\\\\d|[3-589]1|6[12]|72[24])|8(?:217|3[12]|[5-7]1)|9[24]1)\\\\d{5}|(?:(?:3[2-8]|5[2-57-9]|6[03-589])1|4[4689][18])\\\\d{5}|[59]1\\\\d{5}\"],[\"(?:1[13-9]\\\\d|644)\\\\d{7}|(?:3[78]|44|66)[02-9]\\\\d{7}\",[10]],[\"80[03]\\\\d{7}\",[10]],0,0,0,0,0,[\"96(?:0[469]|1[0-47]|3[389]|43|6[69]|7[78])\\\\d{6}\",[10]]]],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"80[2-8]\\\\d{5}|(?:1[0-69]|[23][2-8]|4[23]|5\\\\d|6[013-57-9]|71|8[1-79]|9[2-4])\\\\d{6}\",[8]],[\"4[5-9]\\\\d{7}\",[9]],[\"800[1-9]\\\\d{4}\",[8]],[\"(?:70(?:2[0-57]|3[04-7]|44|6[04-69]|7[0579])|90\\\\d\\\\d)\\\\d{4}\",[8]],0,0,[\"78(?:0[578]|1[014-8]|2[25]|3[15-8]|48|5[05]|60|7[06-8]|9\\\\d)\\\\d{4}\",[8]],0,0,[\"7879\\\\d{4}\",[8]]]],\"BF\":[\"226\",\"00\",\"(?:[025-7]\\\\d|44)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[024-7]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:49|5[23]|6[5-7]|9[016-9])|4(?:4[569]|5[4-6]|6[5-7]|7[0179])|5(?:[34]\\\\d|50|6[5-7]))\\\\d{4}\"],[\"(?:0[1-7]|44|5[0-8]|[67]\\\\d)\\\\d{6}\"]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2\\\\d{5,7}|(?:43[1-6]|70[1-9])\\\\d{4,5}|(?:[36]\\\\d|4[124-7]|[57][1-9]|8[1-6]|9[1-7])\\\\d{5,6}\",[6,7,8]],[\"(?:43[07-9]|99[69]\\\\d)\\\\d{5}|(?:8[7-9]|98)\\\\d{7}\",[8,9]],[\"(?:00800\\\\d\\\\d|800)\\\\d{5}\",[8,12]],[\"90\\\\d{6}\",[8]],0,0,0,0,0,[\"700\\\\d{5}\",[8]]]],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[02-4679]\"]]],0,0,0,0,0,0,[[\"(?:1(?:3[1356]|6[0156]|7\\\\d)\\\\d|6(?:1[16]\\\\d|500|6(?:0\\\\d|3[12]|44|55|7[7-9]|88)|9[69][69])|7(?:[07]\\\\d\\\\d|1(?:11|78)))\\\\d{4}\"],[\"(?:3(?:[0-79]\\\\d|8[0-57-9])\\\\d|6(?:3(?:00|33|6[16])|441|6(?:3[03-9]|[69]\\\\d|7[0-689])))\\\\d{4}\"],[\"8[02369]\\\\d{6}\"],[\"(?:87|9[0-8])\\\\d{6}\"],0,0,0,0,0,[\"84\\\\d{6}\"]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]],0,0,0,0,0,0,[[\"(?:22|31)\\\\d{6}\"],[\"(?:29|6[124-9]|7[125-9])\\\\d{6}\"]]],\"BJ\":[\"229\",\"00\",\"(?:01\\\\d|[24-689])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"0\"]]],0,0,0,0,0,0,[[\"2090\\\\d{4}|(?:012\\\\d\\\\d|2(?:02|1[037]|2[45]|3[68]|4\\\\d))\\\\d{5}\"],[\"(?:01(?:2[5-9]|[4-69]\\\\d)|4[0-8]|[56]\\\\d|9[013-9])\\\\d{6}\"],0,0,0,0,[\"81\\\\d{6}\",[8]],0,[\"857[58]\\\\d{4}\",[8]]]],\"BL\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|3[3-7]|5[12]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\",[[\"441(?:[46]\\\\d\\\\d|5(?:4\\\\d|60|89))\\\\d{4}\"],[\"441(?:[2378]\\\\d|5[0-39]|9[02])\\\\d{5}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[[\"22[0-7]\\\\d{4}|(?:2[013-9]|[34]\\\\d|5[0-25-9])\\\\d{5}\"],[\"(?:22[89]|[78]\\\\d\\\\d)\\\\d{4}\"],0,0,0,0,0,0,[\"5[34]\\\\d{5}\"]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"8001\\\\d{5}|(?:[2-467]\\\\d|50)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[235]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\",0,0,0,[[\"(?:2(?:2\\\\d\\\\d|5(?:11|[258]\\\\d|9[67])|6(?:12|2\\\\d|9[34])|8(?:2[34]|39|62))|3(?:3\\\\d\\\\d|4(?:6\\\\d|8[24])|8(?:25|42|5[257]|86|9[25])|9(?:[27]\\\\d|3[2-4]|4[248]|5[24]|6[2-6]))|4(?:4\\\\d\\\\d|6(?:11|[24689]\\\\d|72)))\\\\d{4}\",[8]],[\"[67]\\\\d{7}\",[8]],[\"8001[07]\\\\d{4}\",[9]],0,0,0,0,0,[\"50\\\\d{6}\",[8]]]],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\",[[\"(?:318[023]|41(?:6[023]|70)|7(?:1[578]|2[05]|50)\\\\d)\\\\d{3}\"],[\"(?:31(?:8[14-8]|9[14578])|416[14-9]|7(?:0[01]|7[07]|8\\\\d|9[056])\\\\d)\\\\d{3}\"]]],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"[1-467]\\\\d{9,10}|55[0-46-9]\\\\d{8}|[34]\\\\d{7}|55\\\\d{7,8}|(?:5[0-46-9]|[89]\\\\d)\\\\d{7,9}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37|86)\",\"300|4(?:0(?:0|20)|370|864)\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\",0,0,[[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-5]\\\\d{7}\",[10]],[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])(?:7|9\\\\d)\\\\d{7}\",[10,11]],[\"800\\\\d{6,7}\",[9,10]],[\"[59]00\\\\d{6,7}\",[9,10]],0,0,0,0,0,[\"(?:30[03]\\\\d{3}|4(?:0(?:0\\\\d|20)|370|864))\\\\d{4}|300\\\\d{5}\",[8,10]]]],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\",[[\"242(?:3(?:02|[236][1-9]|4[0-24-9]|5[0-68]|7[347]|8[0-4]|9[2-467])|461|502|6(?:0[1-5]|12|2[013]|[45]0|7[67]|8[78]|9[89])|7(?:02|88))\\\\d{4}\"],[\"242(?:3(?:5[79]|7[56]|95)|4(?:[23][1-9]|4[1-35-9]|5[1-8]|6[2-8]|7\\\\d|81)|5(?:2[45]|3[35]|44|5[1-46-9]|65|77)|6[34]6|7(?:27|38)|8(?:0[1-9]|1[02-9]|2\\\\d|3[0-4]|[89]9))\\\\d{4}\"],[\"242300\\\\d{4}|8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"242225\\\\d{4}\"]]],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]],0,0,0,0,0,0,[[\"(?:2[3-6]|[34][5-7]|5[236]|6[2-46]|7[246]|8[2-4])\\\\d{5}\",[7]],[\"(?:1[67]|77)\\\\d{6}\",[8]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"(?:2(?:4[0-48]|6[0-24]|9[0578])|3(?:1[0-35-9]|55|[69]\\\\d|7[013]|81)|4(?:6[03]|7[1267]|9[0-5])|5(?:3[03489]|4[0489]|7[1-47]|88|9[0-49])|6(?:2[1-35]|5[149]|8[013467]))\\\\d{4}\",[7]],[\"(?:321|7[1-8]\\\\d)\\\\d{5}\",[8]],[\"(?:0800|800\\\\d)\\\\d{6}\",[10]],[\"90\\\\d{5}\",[7]],0,0,0,0,[\"79(?:1(?:[0-2]\\\\d|3[0-8])|2[0-7]\\\\d)\\\\d{3}\",[8]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,[[\"(?:1(?:5(?:1[1-5]|[24]\\\\d|6[2-4]|9[1-7])|6(?:[235]\\\\d|4[1-7])|7\\\\d\\\\d)|2(?:1(?:[246]\\\\d|3[0-35-9]|5[1-9])|2(?:[235]\\\\d|4[0-8])|3(?:[26]\\\\d|3[02-79]|4[024-7]|5[03-7])))\\\\d{5}\",[9]],[\"(?:2(?:5[5-79]|9[1-9])|(?:33|44)\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{3,7}|8(?:0[13]|20\\\\d)\\\\d{7}\"],[\"(?:810|902)\\\\d{7}\",[10]],0,0,0,0,[\"249\\\\d{6}\",[9]]],\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]],0,0,0,0,0,0,[[\"(?:2(?:[02]\\\\d|36|[68]0)|[3-58](?:[02]\\\\d|[68]0)|7(?:[02]\\\\d|32|[68]0))\\\\d{4}\",[7]],[\"6[0-35-7]\\\\d{5}\",[7]],[\"0800\\\\d{7}\",[11]]]],\"CA\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|5[07]|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|7[39])|9(?:0[25]|42))[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:2[125-9]|33|44|66|77|88)|6(?:22|33))[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"(?:(?:[189]|5\\\\d)\\\\d|2)\\\\d{7}|[1-68]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:12|573)\\\\d\\\\d|276)\\\\d{5}|[1-6]\\\\d{6}\"],[\"88\\\\d{5}|(?:8[0-69]|9[017-9])\\\\d{7}\",[7,9]]]],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]],0,0,0,0,0,0,[[\"2[12]\\\\d{6}\"],[\"7[024-7]\\\\d{6}\"],0,[\"8776\\\\d{4}\"]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]],0,0,0,0,0,0,[[\"222[1-589]\\\\d{5}\"],[\"026(?:1[0-5]|6[6-9])\\\\d{4}|0(?:[14-6]\\\\d\\\\d|2(?:40|5[5-8]|6[07-9]))\\\\d{5}\"],0,[\"80[0-2]\\\\d{6}\"]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[12467]|3[1-4]|4[134]|5[256]|6[12]|[7-9]1)\\\\d{7}\",[9]],[\"(?:6[89]|7[235-9])\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"90[016]\\\\d{6}\",[9]],[\"878\\\\d{6}\",[9]],[\"860\\\\d{9}\",[12]],[\"5[18]\\\\d{7}\",[9]],[\"74[0248]\\\\d{6}\",[9]],0,[\"84[0248]\\\\d{6}\",[9]]]],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]],0,0,0,0,0,0,[[\"2(?:[15]\\\\d{3}|7(?:2(?:0[23]|1[2357]|2[245]|3[45]|4[3-5])|3(?:06|1[69]|[2-6]7)))\\\\d{5}\"],[\"0[157]\\\\d{8}\"]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[13-7]|4[1-5])\\\\d{3}\"],[\"[578]\\\\d{4}\"]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]],0,0,0,0,0,0,[[\"2(?:1982[0-6]|3314[05-9])\\\\d{3}|(?:2(?:1(?:160|962)|3(?:2\\\\d\\\\d|3(?:[03467]\\\\d|1[0-35-9]|2[1-9]|5[0-24-9]|8[0-3])|600)|646[59])|80[1-9]\\\\d\\\\d|9(?:3(?:[0-57-9]\\\\d\\\\d|6(?:0[02-9]|[1-9]\\\\d))|6(?:[0-8]\\\\d\\\\d|9(?:[02-79]\\\\d|1[05-9]))|7[1-9]\\\\d\\\\d|9(?:[03-9]\\\\d\\\\d|1(?:[0235-9]\\\\d|4[0-24-9])|2(?:[0-79]\\\\d|8[0-46-9]))))\\\\d{4}|(?:22|3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|8[1-9]|9[2458])\\\\d{7}\",[9]],[\"\",[9]],[\"(?:123|8)00\\\\d{6}\",[9,11]],0,0,0,0,0,[\"44\\\\d{7}\",[9]],[\"600\\\\d{7,8}\",[10,11]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]],0,0,0,0,0,0,[[\"2(?:22|33)\\\\d{6}\",[9]],[\"(?:24[23]|6(?:[25-9]\\\\d|40))\\\\d{6}\",[9]],[\"88\\\\d{6,7}\"]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"(?:(?:1[03-689]|2\\\\d)\\\\d\\\\d|6)\\\\d{8}|1\\\\d{10}|[126]\\\\d{6}(?:\\\\d(?:\\\\d{2})?)?|86\\\\d{5,6}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{5,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]|3(?:[157]|35|49|9[1-68])|4(?:1[124-9]|2[179]|6[47-9]|7|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:07|1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3|4[13]|5[1-5]|7[0-79]|9[0-35-9])|(?:4[35]|59|85)[1-9]\",\"(?:10|2[0-57-9])(?:1[02]|9[56])|8078|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))1\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|80781|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))12\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|807812|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:078|1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,[[\"(?:10(?:[02-79]\\\\d\\\\d|[18](?:0[1-9]|[1-9]\\\\d))|2(?:[02-57-9]\\\\d{3}|1(?:[18](?:0[1-9]|[1-9]\\\\d)|[2-79]\\\\d\\\\d))|(?:41[03]|8078|9(?:78|94))\\\\d\\\\d)\\\\d{5}|(?:10|2[0-57-9])(?:1(?:00|23)\\\\d\\\\d|95\\\\d{3,4})|(?:41[03]|9(?:78|94))(?:100\\\\d\\\\d|95\\\\d{3,4})|8078123|(?:43[35]|754|851)\\\\d{7,8}|(?:43[35]|754|851)(?:1(?:00\\\\d|23)\\\\d|95\\\\d{3,4})|(?:3(?:11|7[179])|4(?:[15]1|3[12])|5(?:1\\\\d|2[37]|3[12]|51|7[13-79]|9[15])|7(?:[39]1|5[57]|6[09])|8(?:71|98))(?:[02-8]\\\\d{7}|1(?:0(?:0\\\\d\\\\d(?:\\\\d{3})?|[1-9]\\\\d{5})|[13-9]\\\\d{6}|2(?:[0-24-9]\\\\d{5}|3\\\\d(?:\\\\d{4})?))|9(?:[0-46-9]\\\\d{6}|5\\\\d{3}(?:\\\\d(?:\\\\d{2})?)?))|(?:3(?:1[02-9]|35|49|5\\\\d|7[02-68]|9[1-68])|4(?:1[24-9]|2[179]|3[46-9]|5[2-9]|6[47-9]|7\\\\d|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[17]\\\\d|2[248]|3[04-9]|4[3-6]|5[0-3689]|6[2368]|9[02-9])|8(?:1[236-8]|2[5-7]|3\\\\d|5[2-9]|7[02-9]|8[36-8]|9[1-7])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))(?:[02-8]\\\\d{6}|1(?:0(?:0\\\\d\\\\d(?:\\\\d{2})?|[1-9]\\\\d{4})|[13-9]\\\\d{5}|2(?:[0-24-9]\\\\d{4}|3\\\\d(?:\\\\d{3})?))|9(?:[0-46-9]\\\\d{5}|5\\\\d{3,5}))\",[7,8,9,10,11]],[\"1740[0-5]\\\\d{6}|1(?:[38]\\\\d|4[57]|[59][0-35-9]|6[25-7]|7[0-35-8])\\\\d{8}\",[11]],[\"(?:(?:10|21)8|8)00\\\\d{7}\",[10,12]],[\"16[08]\\\\d{5}\",[8]],0,0,0,0,0,[\"10(?:10\\\\d{4}|96\\\\d{3,4})|400\\\\d{7}|950\\\\d{7,8}|(?:2[0-57-9]|3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))96\\\\d{3,4}\",[7,8,9,10,11]]],\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:46|60\\\\d\\\\d)\\\\d{6}|(?:1\\\\d|[39])\\\\d{9}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"46\"]],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6|90\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|9[14]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\",0,0,0,[[\"601055(?:[0-4]\\\\d|50)\\\\d\\\\d|6010(?:[0-4]\\\\d|5[0-4])\\\\d{4}|(?:46|60(?:[18][1-9]|[24-7][2-9]))\\\\d{6}\",[8,10]],[\"333301[0-5]\\\\d{3}|3333(?:00|2[5-9]|[3-9]\\\\d)\\\\d{4}|(?:3(?:(?:0[0-5]|1\\\\d|5[01]|70)\\\\d|2(?:[0-3]\\\\d|4[1-9])|3(?:00|3[0-24-9]))|9(?:101|408))\\\\d{6}\",[10]],[\"1800\\\\d{7}\",[11]],[\"(?:19(?:0[01]|4[78])|901)\\\\d{7}\",[10,11]]]],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\",0,0,0,[[\"210[7-9]\\\\d{4}|2(?:[024-7]\\\\d|1[1-9])\\\\d{5}\",[8]],[\"(?:3005\\\\d|6500[01])\\\\d{3}|(?:5[07]|6[0-4]|7[0-3]|8[3-9])\\\\d{6}\",[8]],[\"800\\\\d{7}\",[10]],[\"90[059]\\\\d{7}\",[10]],0,0,0,0,[\"(?:210[0-6]|4\\\\d{3}|5100)\\\\d{4}\",[8]]]],\"CU\":[\"53\",\"119\",\"(?:[2-7]|8\\\\d\\\\d)\\\\d{7}|[2-47]\\\\d{6}|[34]\\\\d{5}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[56]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3[23]|4[89])\\\\d{4,6}|(?:31|4[36]|8(?:0[25]|78)\\\\d)\\\\d{6}|(?:2[1-4]|4[1257]|7\\\\d)\\\\d{5,6}\"],[\"(?:5\\\\d|6[2-4])\\\\d{6}\",[8]],[\"800\\\\d{7}\",[10]],0,0,0,0,0,0,[\"807\\\\d{7}\",[10]]]],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]],0,0,0,0,0,0,[[\"2(?:2[1-7]|3[0-8]|4[12]|5[1256]|6\\\\d|7[1-3]|8[1-5])\\\\d{4}\"],[\"(?:36|5[1-389]|9\\\\d)\\\\d{5}\"],[\"800\\\\d{4}\"],0,0,0,0,0,[\"(?:3[3-5]|4[356])\\\\d{5}\"]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\",[[\"9(?:4(?:3[0-5]|4[14]|6\\\\d)|50\\\\d|7(?:2[014]|3[02-9]|4[4-9]|6[357]|77|8[7-9])|8(?:3[39]|[46]\\\\d|7[01]|8[57-9]))\\\\d{4}\"],[\"953[01]\\\\d{4}|9(?:5[12467]|6[5-9])\\\\d{5}\"],0,0,0,0,0,[\"955\\\\d{5}\",[8]],0,[\"60[0-2]\\\\d{4}\",[7]]]],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]],0,0,0,0,0,0,[[\"2[2-6]\\\\d{6}\"],[\"9(?:10|[4-79]\\\\d)\\\\d{5}\"],[\"800\\\\d{5}\"],[\"90[09]\\\\d{5}\"],[\"700\\\\d{5}\"],0,[\"(?:50|77)\\\\d{6}\"],0,0,[\"80[1-9]\\\\d{5}\"]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[1257-9]|4[16-9]|5[13-9])\\\\d{7}\",[9]],[\"(?:60[1-8]\\\\d|7(?:0(?:[2-5]\\\\d|60)|19[0-4]|[2379]\\\\d\\\\d))\\\\d{5}\",[9]],[\"800\\\\d{6}\",[9]],[\"9(?:0[05689]|76)\\\\d{6}\",[9]],[\"70[01]\\\\d{6}\",[9]],[\"9(?:3\\\\d{9}|6\\\\d{7,10})\"],[\"9(?:5\\\\d|7[2-4])\\\\d{6}\",[9]],0,[\"9[17]0\\\\d{6}\",[9]],[\"8[134]\\\\d{7}\",[9]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[03568]\",\"15(?:[0568]|31)\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"32\\\\d{9,11}|49[1-6]\\\\d{10}|322\\\\d{6}|49[0-7]\\\\d{3,9}|(?:[34]0|[68]9)\\\\d{3,13}|(?:2(?:0[1-689]|[1-3569]\\\\d|4[0-8]|7[1-7]|8[0-7])|3(?:[3569]\\\\d|4[0-79]|7[1-7]|8[1-8])|4(?:1[02-9]|[2-48]\\\\d|5[0-6]|6[0-8]|7[0-79])|5(?:0[2-8]|[124-6]\\\\d|[38][0-8]|[79][0-7])|6(?:0[02-9]|[1-358]\\\\d|[47][0-8]|6[1-9])|7(?:0[2-8]|1[1-9]|[27][0-7]|3\\\\d|[4-6][0-8]|8[0-5]|9[013-7])|8(?:0[2-9]|1[0-79]|2\\\\d|3[0-46-9]|4[0-6]|5[013-9]|6[1-8]|7[0-8]|8[0-24-6])|9(?:0[6-9]|[1-4]\\\\d|[589][0-7]|6[0-8]|7[0-467]))\\\\d{3,12}\",[5,6,7,8,9,10,11,12,13,14,15]],[\"15310\\\\d{6}|1(?:5[0-25-9]\\\\d|7[013-5])\\\\d{7}|1(?:6[023]|7[26-9])\\\\d{7,8}\",[10,11]],[\"800\\\\d{7,12}\",[10,11,12,13,14,15]],[\"(?:137[7-9]|900(?:[135]|9\\\\d))\\\\d{6}\",[10,11]],[\"700\\\\d{8}\",[11]],[\"1(?:6(?:013|255|399)|7(?:(?:[015]1|[69]3)3|[2-4]55|[78]99))\\\\d{7,8}|15(?:(?:[03-68]00|113)\\\\d|2\\\\d55|7\\\\d99|9\\\\d33)\\\\d{7}\",[12,13]],[\"18(?:1\\\\d{5,11}|[2-9]\\\\d{8})\",[8,9,10,11,12,13,14]],[\"16(?:4\\\\d{1,10}|[89]\\\\d{1,11})\",[4,5,6,7,8,9,10,11,12,13,14]],0,[\"180\\\\d{5,11}|13(?:7[1-6]\\\\d\\\\d|8)\\\\d{4}\",[7,8,9,10,11,12,13,14]]]],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]],0,0,0,0,0,0,[[\"2(?:1[2-5]|7[45])\\\\d{5}\"],[\"77\\\\d{6}\"]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:[0-59][1-9]|[6-8]\\\\d)|3(?:[0-3][1-9]|4[13]|5[1-58]|6[1347-9]|7\\\\d|8[1-8]|9[1-79])|4(?:[0-25][1-9]|[34][2-9]|6[13-579]|7[13579]|8[1-47]|9[127])|5(?:[0-36][1-9]|4[146-9]|5[3-57-9]|7[568]|8[1-358]|9[1-69])|6(?:[0135][1-9]|2[1-68]|4[2-8]|6[1689]|[78]\\\\d|9[15689])|7(?:[0-69][1-9]|7[3-9]|8[147])|8(?:[16-9][1-9]|2[1-58])|9(?:[1-47-9][1-9]|6\\\\d))\\\\d{5}\"],[\"(?:2[6-8]|37|6[78]|96)\\\\d{6}|(?:2[0-59]|3[0-689]|[457]\\\\d|6[0-69]|8[126-9]|9[1-47-9])[1-9]\\\\d{5}\"],[\"80\\\\d{6}\"],[\"90\\\\d{6}\"]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\",[[\"767(?:2(?:55|66)|4(?:2[01]|4[0-25-9])|50[0-4])\\\\d{4}\"],[\"767(?:2(?:[2-4689]5|7[5-7])|31[5-7]|61[1-8]|70[1-6])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\",[[\"8(?:[04]9[2-9]\\\\d\\\\d|29(?:2(?:[0-59]\\\\d|6[04-9]|7[0-27]|8[0237-9])|3(?:[0-35-9]\\\\d|4[7-9])|[45]\\\\d\\\\d|6(?:[0-27-9]\\\\d|[3-5][1-9]|6[0135-8])|7(?:0[013-9]|[1-37]\\\\d|4[1-35689]|5[1-4689]|6[1-57-9]|8[1-79]|9[1-8])|8(?:0[146-9]|1[0-48]|[248]\\\\d|3[1-79]|5[01589]|6[013-68]|7[124-8]|9[0-8])|9(?:[0-24]\\\\d|3[02-46-9]|5[0-79]|60|7[0169]|8[57-9]|9[02-9])))\\\\d{4}\"],[\"8[024]9[2-9]\\\\d{6}\"],[\"8(?:00(?:14|[2-9]\\\\d)|(?:33|44|55|66|77|88)[2-9]\\\\d)\\\\d{5}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"9619\\\\d{5}|(?:1\\\\d|2[013-79]|3[0-8]|4[013-689])\\\\d{6}\"],[\"(?:5(?:4[0-29]|5\\\\d|6[0-3])|6(?:[569]\\\\d|7[0-6])|7[7-9]\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"80[3-689]1\\\\d{5}\",[9]],0,0,0,0,[\"98[23]\\\\d{6}\",[9]],[\"80[12]1\\\\d{5}\",[9]]]],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"[2-7][2-7]\\\\d{6}\",[8]],[\"964[0-2]\\\\d{5}|9(?:39|[57][89]|6[0-36-9]|[89]\\\\d)\\\\d{6}\",[9]],[\"1800\\\\d{7}|1[78]00\\\\d{6}\",[10,11]],0,0,0,0,0,[\"[2-7]890\\\\d{4}\",[8]]]],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"(?:3[23589]|4[3-8]|6\\\\d|7[1-9]|88)\\\\d{5}\",[7]],[\"(?:5\\\\d{5}|8(?:1(?:0(?:0(?:00|[178]\\\\d)|[3-9]\\\\d\\\\d)|(?:1(?:0[2-6]|1\\\\d)|(?:2[0-59]|[3-79]\\\\d)\\\\d)\\\\d)|2(?:0(?:0(?:00|4\\\\d)|(?:19|[2-7]\\\\d)\\\\d)|(?:(?:[124-69]\\\\d|3[5-9])\\\\d|7(?:[0-79]\\\\d|8[13-9])|8(?:[2-6]\\\\d|7[01]))\\\\d)|[349]\\\\d{4}))\\\\d\\\\d|5(?:(?:[02]\\\\d|5[0-478])\\\\d|1(?:[0-8]\\\\d|95)|6(?:4[0-4]|5[1-589]))\\\\d{3}\",[7,8]],[\"800(?:(?:0\\\\d\\\\d|1)\\\\d|[2-9])\\\\d{3}\"],[\"(?:40\\\\d\\\\d|900)\\\\d{4}\",[7,8]],[\"70[0-2]\\\\d{5}\",[8]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{8})\",\"$1 $2\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"13[23]\\\\d{6}|(?:15|57)\\\\d{6,7}|(?:2\\\\d|3|4[05-8]|5[05]|6[24-689]|8[2468]|9[235-7])\\\\d{7}\",[8,9]],[\"1[0-25]\\\\d{8}\",[10]],[\"800\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]]]],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\",[[\"528[89]\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[0167]\\\\d|2[0-8]|5[0-3]|8[0-7]))\\\\d{6}\"],[\"80[0-7]\\\\d{6}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"(?:592(?:4[0-2]|93)|80[89]\\\\d\\\\d)\\\\d{4}\"]]],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1[12568]|[24]0|55|6[146])|8\\\\d\\\\d)\\\\d{4}\"],[\"(?:17[1-3]|7\\\\d\\\\d)\\\\d{4}\"]]],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]],0,0,0,0,0,0,[[\"96906(?:0[0-8]|1[1-9]|[2-9]\\\\d)\\\\d\\\\d|9(?:69(?:0[0-57-9]|[1-9]\\\\d)|73(?:[0-8]\\\\d|9[1-9]))\\\\d{4}|(?:8(?:[1356]\\\\d|[28][0-8]|[47][1-9])|9(?:[135]\\\\d|[268][0-8]|4[1-9]|7[124-9]))\\\\d{6}\"],[\"(?:590[16]00\\\\d|9(?:6906(?:09|10)|7390\\\\d\\\\d))\\\\d\\\\d|(?:6\\\\d|7[1-48])\\\\d{7}\"],[\"[89]00\\\\d{6}\"],[\"80[367]\\\\d{6}\"],[\"70\\\\d{7}\"],0,[\"51\\\\d{7}\"],0,0,[\"90[12]\\\\d{6}\"]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"11667[01]\\\\d{3}|(?:11(?:1(?:1[124]|2[2-7]|3[1-5]|5[5-8]|8[6-8])|2(?:13|3[6-8]|5[89]|7[05-9]|8[2-6])|3(?:2[01]|3[0-289]|4[1289]|7[1-4]|87)|4(?:1[69]|3[2-49]|4[0-3]|6[5-8]|7\\\\d)|5(?:1[578]|44|5[0-4])|6(?:1[578]|2[69]|39|4[5-7]|5[0-5]|6[0-59]|8[015-8]))|2(?:2(?:11[1-9]|22[0-7]|33\\\\d|44[1467]|66[1-68])|5(?:11[124-6]|33[2-8]|44[1467]|55[14]|66[1-3679]|77[124-79]|880))|3(?:3(?:11[0-46-8]|(?:22|55)[0-6]|33[0134689]|44[04]|66[01467])|4(?:44[0-8]|55[0-69]|66[0-3]|77[1-5]))|4(?:6(?:119|22[0-24-7]|33[1-5]|44[13-69]|55[14-689]|660|88[1-4])|7(?:(?:11|22)[1-9]|33[13-7]|44[13-6]|55[1-689]))|5(?:7(?:227|55[05]|(?:66|77)[14-8])|8(?:11[149]|22[013-79]|33[0-68]|44[013-8]|550|66[1-5]|77\\\\d)))\\\\d{4}\"],[\"700[1-9]\\\\d{5}|(?:7(?:0[1-9]|1[0-8]|22|77|86|99)|9\\\\d\\\\d)\\\\d{6}\"]]],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{5})\",\"$1\",[\"20[2-59]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[1-3]0|[68])0|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[14]|2[09]|50|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"(?:19|[2568])[1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",[[\"1[3-7][1-8]\\\\d{3,6}|(?:19[1-8]|[23568][1-8]\\\\d|9(?:00|[1-8]\\\\d))\\\\d{2,6}\",[5,6,7,8,9]],[\"4946\\\\d{2,6}|(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"20\\\\d{4,8}|60[12]\\\\d{5,6}|7(?:099\\\\d{4,5}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d|(?:606|7(?:0[78]|1|3\\\\d))\\\\d{7}|(?:10|29|3[09]|70[1-5]\\\\d)\\\\d{4,8}\"]],\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,[[\"603\\\\d{4}|(?:3[0-5]|6[25-7]|8[58])\\\\d{5}\",[7]],[\"(?:[279]\\\\d|45|5[01568]|8[034679])\\\\d{5}\",[7]],[\"0800\\\\d{7}\",[11]]],\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5],0,0,0,0,0,0,0,[[\"[2-47]\\\\d{4}\"],[\"[56]\\\\d{4}\"]]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]],0,0,0,0,0,0,[[\"31(?:00[67]|208|309)\\\\d\\\\d|(?:3(?:[2357]0[1-9]|602|804|905)|(?:820|9[2-6]\\\\d)\\\\d)\\\\d{3}\"],[\"31(?:00[67]|208|309)\\\\d\\\\d|(?:3(?:[2357]0[1-9]|602|804|905)|(?:820|9[2-7]\\\\d)\\\\d)\\\\d{3}\"]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\",0,0,0,[[\"(?:20|[34]\\\\d|8[19])\\\\d{4}\"],[\"(?:[27][1-9]|5\\\\d|9[16])\\\\d{4}\"],[\"80[257-9]\\\\d{3}\"],[\"90(?:[13-5][15-7]|2[125-7]|9\\\\d)\\\\d\\\\d\"],0,0,0,0,[\"(?:6[0-36]|88)\\\\d{4}\"]]],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:26[013-9]|59[1-35-9])\\\\d{6}|(?:[13]\\\\d|2[0-57-9]|4[1-9]|5[0-8])\\\\d{7}\"],[\"(?:6(?:[0-24-8]\\\\d|3[0-8]|9[589])|7[3-9]\\\\d)\\\\d{6}\"],[\"80[0-5]\\\\d{6}\"],[\"836(?:0[0-36-9]|[1-9]\\\\d)\\\\d{4}|8(?:1[2-9]|2[2-47-9]|3[0-57-9]|[569]\\\\d|8[0-35-9])\\\\d{6}\"],0,0,[\"80[6-9]\\\\d{6}\"],0,[\"9\\\\d{8}\"],[\"8(?:1[01]|2[0156]|4[024]|84)\\\\d{6}\"]]],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\",0,0,[[\"[01]1\\\\d{6}\",[8]],[\"(?:(?:0[2-7]|7[467])\\\\d|6(?:0[0-4]|10|[256]\\\\d))\\\\d{5}|[2-7]\\\\d{6}\"]]],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0-35])|4(?:(?:[0-5]\\\\d|70)\\\\d|69[7-9])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|(?:2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d|1(?:[0-7]\\\\d|8[0-3]))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d)\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\",[[\"473(?:2(?:3[0-2]|69)|3(?:2[89]|86)|4(?:[06]8|3[5-9]|4[0-4]|5[59]|73|90)|63[68]|7(?:58|84)|800|938)\\\\d{4}\"],[\"473(?:4(?:0[2-79]|1[04-9]|2[0-5]|49|5[6-8])|5(?:2[01]|3[3-8])|901)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:[256]\\\\d|4[124-9]|7[0-4])|4(?:1\\\\d|2[2-7]|3[1-79]|4[2-8]|7[239]|9[1-7]))\\\\d{6}\"],[\"5(?:(?:(?:0555|1(?:[17]77|555))[5-9]|757(?:7[7-9]|8[01]))\\\\d|22252[0-4])\\\\d\\\\d|5(?:0(?:0[17]0|505)|1(?:0[01]0|1(?:07|33|51))|2(?:0[02]0|2[25]2)|3(?:0[03]0|3[35]3)|(?:40[04]|900)0|5222)[0-4]\\\\d{3}|(?:5(?:0(?:0(?:0\\\\d|11|22|3[0-6]|44|5[05]|77|88|9[09])|(?:[14]\\\\d|77)\\\\d|22[02])|1(?:1(?:[03][01]|[124]\\\\d|5[2-6]|7[0-4])|4\\\\d\\\\d)|[23]555|4(?:4\\\\d\\\\d|555)|5(?:[0157-9]\\\\d\\\\d|200|333|444)|6[89]\\\\d\\\\d|7(?:[0147-9]\\\\d\\\\d|5(?:00|[57]5))|8(?:0(?:[018]\\\\d|2[0-4])|5(?:55|8[89])|8(?:55|88))|9(?:090|[1-35-9]\\\\d\\\\d))|790\\\\d\\\\d)\\\\d{4}\"],[\"800\\\\d{6}\"],0,0,0,0,0,[\"70[67]\\\\d{6}\"]]],\"GF\":[\"594\",\"00\",\"(?:[56]94\\\\d|7093)\\\\d{5}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]|9[47]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"594(?:[02-49]\\\\d|1[0-5]|5[6-9]|6[0-3]|80)\\\\d{4}\"],[\"(?:694(?:[0-249]\\\\d|3[0-8])|7093[0-3])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:396|76\\\\d)\\\\d|476[0-6])\\\\d{4}\"]]],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"3082[0-5]\\\\d{4}|3(?:0(?:[237]\\\\d|8[01])|[167](?:2[0-6]|7\\\\d|80)|2(?:2[0-5]|7\\\\d|80)|3(?:2[0-3]|7\\\\d|80)|4(?:2[013-9]|3[01]|7\\\\d|80)|5(?:2[0-7]|7\\\\d|80)|8(?:2[0-2]|7\\\\d|80)|9(?:[28]0|7\\\\d))\\\\d{5}\",[9]],[\"(?:2(?:[0346-9]\\\\d|5[67])|5(?:[03-7]\\\\d|9[1-9]))\\\\d{6}\",[9]],[\"800\\\\d{5}\",[8]]]],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d|60)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]],0,0,0,0,0,0,[[\"2190[0-2]\\\\d{3}|2(?:0(?:[02]\\\\d|3[01])|16[24-9]|2[2-5]\\\\d)\\\\d{4}\"],[\"5251[0-4]\\\\d{3}|(?:5(?:[146-8]\\\\d\\\\d|250)|60(?:1[01]|6\\\\d))\\\\d{4}\"]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]],0,0,0,0,0,0,[[\"(?:19|3[1-7]|[68][1-9]|70|9\\\\d)\\\\d{4}\"],[\"[245]\\\\d{5}\"],[\"80\\\\d{4}\"],0,0,0,0,0,[\"3[89]\\\\d{4}\"]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:4(?:[23]\\\\d\\\\d|4(?:1[024679]|[6-9]\\\\d))|5(?:5(?:3\\\\d|4[0-7])|6[67]\\\\d|7(?:1[04]|2[035]|3[58]|48))|8\\\\d{3})\\\\d{3}\"],[\"556\\\\d{4}|(?:[23679]\\\\d|4[015]|5[0-489])\\\\d{5}\"]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]],0,0,0,0,0,0,[[\"3(?:0(?:24|3[12]|4[1-35-7]|5[13]|6[189]|[78]1|9[1478])|1\\\\d\\\\d)\\\\d{4}\",[8]],[\"6[0-356]\\\\d{7}\",[9]],0,0,0,0,0,0,[\"722\\\\d{6}\",[9]]]],\"GP\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1-9]|5[3-579]|[68][0-689]|7[08]|9\\\\d)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]],0,0,0,0,0,0,[[\"33[0-24-9]\\\\d[46]\\\\d{4}|3(?:33|5\\\\d)\\\\d[7-9]\\\\d{4}\"],[\"(?:222|55\\\\d)\\\\d{6}\"],[\"80\\\\d[1-9]\\\\d{5}\"],[\"90\\\\d[1-9]\\\\d{5}\"]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"2(?:1\\\\d\\\\d|2(?:2[1-46-9]|[36][1-8]|4[1-7]|5[1-4]|7[1-5]|[89][1-9])|3(?:1\\\\d|2[1-57]|[35][1-3]|4[13]|7[1-7]|8[124-6]|9[1-79])|4(?:1\\\\d|2[1-8]|3[1-4]|4[13-5]|6[1-578]|9[1-5])|5(?:1\\\\d|[29][1-4]|3[1-5]|4[124]|5[1-6])|6(?:1\\\\d|[269][1-6]|3[1245]|4[1-7]|5[13-9]|7[14]|8[1-5])|7(?:1\\\\d|2[1-5]|3[1-6]|4[1-7]|5[1-57]|6[135]|9[125-7])|8(?:1\\\\d|2[1-5]|[34][1-4]|9[1-57]))\\\\d{6}\",[10]],[\"68[57-9]\\\\d{7}|(?:69|94)\\\\d{8}\",[10]],[\"800\\\\d{7,9}\"],[\"90[19]\\\\d{7}\",[10]],[\"70\\\\d{8}\",[10]],0,[\"5005000\\\\d{3}\",[10]],0,0,[\"8(?:0[16]|12|[27]5|50)\\\\d{7}\",[10]]]],\"GT\":[\"502\",\"00\",\"80\\\\d{6}|(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-8]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[[\"[267][2-9]\\\\d{6}\",[8]],[\"(?:[3-5]\\\\d\\\\d|80[0-4])\\\\d{5}\",[8]],[\"18[01]\\\\d{8}\",[11]],[\"19\\\\d{9}\",[11]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"671$1\",0,\"671\",[[\"671(?:2\\\\d\\\\d|3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[02-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[478])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]],0,0,0,0,0,0,[[\"443\\\\d{6}\",[9]],[\"9(?:5\\\\d|6[569]|77)\\\\d{6}\",[9]],0,0,0,0,0,0,[\"40\\\\d{5}\",[7]]]],\"GY\":[\"592\",\"001\",\"(?:[2-8]\\\\d{3}|9008)\\\\d{3}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:1[6-9]|2[0-35-9]|3[1-4]|5[3-9]|6\\\\d|7[0-79])|3(?:2[25-9]|3\\\\d)|4(?:4[0-24]|5[56])|50[0-6]|77[1-57])\\\\d{4}\"],[\"(?:510|6\\\\d\\\\d|7(?:[0-5]\\\\d|6[019]|70))\\\\d{4}\"],[\"(?:289|8(?:00|6[28]|88|99))\\\\d{4}\"],[\"9008\\\\d{3}\"],0,0,0,0,[\"515\\\\d{4}\"]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[[\"(?:2(?:[13-9]\\\\d|2[013-9])\\\\d|3(?:(?:[1569][0-24-9]|4[0-246-9]|7[0-24-69])\\\\d|8(?:4[0-8]|[579]\\\\d|6[0-5]))|58(?:0[1-9]|1[2-9]))\\\\d{4}\",[8]],[\"(?:4(?:44[0-35-9]|6(?:4[0-57-9]|6[0-4])|7(?:3[0-4]|4[0-48]|6[0-5]))|5(?:35[4-8]|73[0-6]|95[0-8])|6(?:26[013-8]|(?:66|78)[0-5])|70(?:7[1-8]|8[0-8])|84(?:4[0-2]|8[0-35-9])|9(?:29[013-9]|39[014-9]|59[0-4]|899))\\\\d{4}|(?:4(?:4[0-35-9]|6[0-357-9]|7[0-25])|5(?:[1-59][0-46-9]|6[0-4689]|7[0-246-9])|6(?:0[1-9]|[13-59]\\\\d|[268][0-57-9]|7[0-79])|70[1-59]|84[0-39]|9(?:0[1-9]|1[02-9]|[2358][0-8]|[467]\\\\d))\\\\d{5}\",[8]],[\"800\\\\d{6}\",[9]],[\"900(?:[0-24-9]\\\\d{7}|3\\\\d{1,4})\",[5,6,7,8,11]],[\"8(?:1[0-4679]\\\\d|2(?:[0-36]\\\\d|7[0-4])|3(?:[034]\\\\d|2[09]|70))\\\\d{4}\",[8]],0,[\"30(?:0[1-9]|[15-7]\\\\d|2[047]|89)\\\\d{4}\",[8]],[\"7(?:1(?:0[0-38]|1[0-3679]|3[013]|69|9[0136])|2(?:[02389]\\\\d|1[18]|7[27-9])|3(?:[0-38]\\\\d|7[0-369]|9[2357-9])|47\\\\d|5(?:[178]\\\\d|5[0-5])|6(?:0[0-7]|2[236-9]|[35]\\\\d)|7(?:[27]\\\\d|8[7-9])|8(?:[23689]\\\\d|7[1-9])|9(?:[025]\\\\d|6[0-246-8]|7[0-36-9]|8[238]))\\\\d{4}\",[8]]],\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]],0,0,0,0,0,0,[[\"2(?:2(?:0[0-59]|1[1-9]|[23]\\\\d|4[02-7]|5[57]|6[245]|7[0135689]|8[01346-9]|9[0-2])|4(?:0[578]|2[3-59]|3[13-9]|4[0-68]|5[1-3589])|5(?:0[2357-9]|1[1-356]|4[03-5]|5\\\\d|6[014-69]|7[04]|80)|6(?:[056]\\\\d|17|2[067]|3[047]|4[0-378]|[78][0-8]|9[01])|7(?:0[5-79]|6[46-9]|7[02-9]|8[034]|91)|8(?:79|8[0-357-9]|9[1-57-9]))\\\\d{4}\",[8]],[\"[37-9]\\\\d{7}\",[8]],[\"8002\\\\d{7}\",[11]]]],\"HR\":[\"385\",\"00\",\"[2-69]\\\\d{8}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{6}\",[7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6|7[245]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1\\\\d{7}|(?:2[0-3]|3[1-5]|4[02-47-9]|5[1-3])\\\\d{6,7}\",[8,9]],[\"9(?:(?:0[1-9]|[12589]\\\\d)\\\\d\\\\d|7(?:[0679]\\\\d\\\\d|5(?:[01]\\\\d|44|55|77|9[5-79])))\\\\d{4}|98\\\\d{6}\",[8,9]],[\"80\\\\d{5,7}\"],[\"6[01459]\\\\d{6}|6[01]\\\\d{5}\",[7,8]],[\"7[45]\\\\d{6}\",[8]],0,[\"62\\\\d{6,7}|72\\\\d{6}\",[8,9]]]],\"HT\":[\"509\",\"00\",\"[2-589]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]],0,0,0,0,0,0,[[\"2(?:2\\\\d|5[1-5]|81|9[149])\\\\d{5}\"],[\"(?:[34]\\\\d|5[56])\\\\d{6}\"],[\"8\\\\d{7}\"],0,0,0,0,0,[\"9(?:[67][0-4]|8[0-3589]|9\\\\d)\\\\d{5}\"]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\",0,0,0,0,0,[[\"(?:1\\\\d|[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6[23689]|8[2-57-9]|9[2-69])\\\\d{6}\",[8]],[\"(?:[257]0|3[01])\\\\d{7}\",[9]],[\"(?:[48]0\\\\d|680[29])\\\\d{5}\"],[\"9[01]\\\\d{6}\",[8]],0,0,[\"38\\\\d{7}\",[9]],0,[\"21\\\\d{7}\",[9]]]],\"ID\":[\"62\",\"00[89]\",\"00[1-9]\\\\d{9,14}|(?:[1-36]|8\\\\d{5})\\\\d{6}|00\\\\d{9}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2[124]\\\\d{7,8}|619\\\\d{8}|2(?:1(?:14|500)|2\\\\d{3})\\\\d{3}|61\\\\d{5,8}|(?:2(?:[35][1-4]|6[0-8]|7[1-6]|8\\\\d|9[1-8])|3(?:1|[25][1-8]|3[1-68]|4[1-3]|6[1-3568]|7[0-469]|8\\\\d)|4(?:0[1-589]|1[01347-9]|2[0-36-8]|3[0-24-68]|43|5[1-378]|6[1-5]|7[134]|8[1245])|5(?:1[1-35-9]|2[25-8]|3[124-9]|4[1-3589]|5[1-46]|6[1-8])|6(?:[25]\\\\d|3[1-69]|4[1-6])|7(?:02|[125][1-9]|[36]\\\\d|4[1-8]|7[0-36-9])|9(?:0[12]|1[013-8]|2[0-479]|5[125-8]|6[23679]|7[159]|8[01346]))\\\\d{5,8}\",[7,8,9,10,11]],[\"8[1-35-9]\\\\d{7,10}\",[9,10,11,12]],[\"00(?:1803\\\\d{5,11}|7803\\\\d{7})|(?:177\\\\d|800)\\\\d{5,7}\",[8,9,10,11,12,13,14,15,16,17]],[\"809\\\\d{7}\",[10]],0,0,[\"(?:1500|8071\\\\d{3})\\\\d{3}\",[7,10]],0,0,[\"804\\\\d{7}\",[10]]]],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1\\\\d|21)\\\\d{6,7}|(?:2[24-9]|4(?:0[24]|5\\\\d|7)|5(?:0[45]|1\\\\d|8)|6(?:1\\\\d|[237-9])|9(?:1\\\\d|[35-9]))\\\\d{5}|(?:23|4(?:[1-469]|8\\\\d)|5[23679]|6[4-6]|7[14]|9[04])\\\\d{7}\"],[\"8(?:22|[35-9]\\\\d)\\\\d{6}\",[9]],[\"1800\\\\d{6}\",[10]],[\"15(?:1[2-8]|[2-8]0|9[089])\\\\d{6}\",[10]],[\"700\\\\d{6}\",[9]],[\"88210[1-9]\\\\d{4}|8(?:[35-79]5\\\\d\\\\d|8(?:[013-9]\\\\d\\\\d|2(?:[01][1-9]|[2-9]\\\\d)))\\\\d{5}\",[10]],[\"818\\\\d{6}\",[9]],0,[\"76\\\\d{7}\",[9]],[\"18[59]0\\\\d{6}\",[10]]]],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\",0,0,0,0,0,[[\"153\\\\d{8,9}|29[1-9]\\\\d{5}|(?:2[0-8]|[3489]\\\\d)\\\\d{6}\",[8,11,12]],[\"55(?:4(?:[01]0|5[0-2])|57[0-289])\\\\d{4}|5(?:(?:[0-2][02-9]|[36]\\\\d|[49][2-9]|8[3-7])\\\\d|5(?:01|2\\\\d|3[0-3]|4[34]|5[0-25689]|6[6-8]|7[0-267]|8[7-9]|9[1-9]))\\\\d{5}\",[9]],[\"1(?:255|80[019]\\\\d{3})\\\\d{3}\",[7,10]],[\"1212\\\\d{4}|1(?:200|9(?:0[0-2]|19))\\\\d{6}\",[8,10]],0,[\"151\\\\d{8,9}\",[11,12]],[\"1599\\\\d{6}\",[10]],0,[\"7(?:38(?:[05]\\\\d|8[08])|8(?:33|55|77|81)\\\\d)\\\\d{4}|7(?:18|2[23]|3[237]|47|6[258]|7\\\\d|82|9[2-9])\\\\d{6}\",[9]],[\"1700\\\\d{6}\",[10]]]],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0\",\"1624$1\",0,\"74576|(?:16|7[56])24\",[[\"1624(?:230|[5-8]\\\\d\\\\d)\\\\d{3}\"],[\"76245[06]\\\\d{4}|7(?:4576|[59]24\\\\d|624[0-4689])\\\\d{5}\"],[\"808162\\\\d{4}\"],[\"8(?:440[49]06|72299\\\\d)\\\\d{3}|(?:8(?:45|70)|90[0167])624\\\\d{4}\"],[\"70\\\\d{8}\"],0,[\"3440[49]06\\\\d{3}|(?:3(?:08162|3\\\\d{4}|45624|7(?:0624|2299))|55\\\\d{4})\\\\d{4}\"],0,[\"56\\\\d{8}\"]]],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\",0,0,0,0,0,[[\"2717(?:[2-7]\\\\d|95)\\\\d{4}|(?:271[0-689]|782[0-6])[2-7]\\\\d{5}|(?:170[24]|2(?:(?:[02][2-79]|90)\\\\d|80[13468])|(?:3(?:23|80)|683|79[1-7])\\\\d|4(?:20[24]|72[2-8])|552[1-7])\\\\d{6}|(?:11|33|4[04]|80)[2-7]\\\\d{7}|(?:342|674|788)(?:[0189][2-7]|[2-7]\\\\d)\\\\d{5}|(?:1(?:2[0-249]|3[0-25]|4[145]|[59][14]|6[014]|7[1257]|8[01346])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568]|9[14])|3(?:26|4[13]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[014-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|2[14]|3[134]|4[47]|5[15]|[67]1)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91))[2-7]\\\\d{6}|(?:1(?:2[35-8]|3[346-9]|4[236-9]|[59][0235-9]|6[235-9]|7[34689]|8[257-9])|2(?:1[134689]|3[24-8]|4[2-8]|5[25689]|6[2-4679]|7[3-79]|8[2-479]|9[235-9])|3(?:01|1[79]|2[1245]|4[5-8]|5[125689]|6[235-7]|7[157-9]|8[2-46-8])|4(?:1[14578]|2[5689]|3[2-467]|5[4-7]|6[35]|73|8[2689]|9[2389])|5(?:[16][146-9]|2[14-8]|3[1346]|4[14-69]|5[46]|7[2-4]|8[2-8]|9[246])|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])|7(?:1[013-9]|2[0235-9]|3[2679]|4[1-35689]|5[2-46-9]|[67][02-9]|8[013-7]|9[089])|8(?:1[1357-9]|2[235-8]|3[03-57-9]|4[0-24-9]|5\\\\d|6[2457-9]|7[1-6]|8[1256]|9[2-4]))\\\\d[2-7]\\\\d{5}\",[10]],[\"(?:61279|7(?:887[02-9]|9(?:313|79[07-9]))|8(?:079[04-9]|(?:84|91)7[02-8]))\\\\d{5}|(?:6(?:12|[2-47]1|5[17]|6[13]|80)[0189]|7(?:1(?:2[0189]|9[0-5])|2(?:[14][017-9]|8[0-59])|3(?:2[5-8]|[34][017-9]|9[016-9])|4(?:1[015-9]|[29][89]|39|8[389])|5(?:[15][017-9]|2[04-9]|9[7-9])|6(?:0[0-47]|1[0-257-9]|2[0-4]|3[19]|5[4589])|70[0289]|88[089]|97[02-8])|8(?:0(?:6[67]|7[02-8])|70[017-9]|84[01489]|91[0-289]))\\\\d{6}|(?:7(?:31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[0189]\\\\d|7[02-8])\\\\d{5}|(?:6(?:[09]\\\\d|1[04679]|2[03689]|3[05-9]|4[0489]|50|6[069]|7[07]|8[7-9])|7(?:0\\\\d|2[0235-79]|3[05-8]|40|5[0346-8]|6[6-9]|7[1-9]|8[0-79]|9[089])|8(?:0[01589]|1[0-57-9]|2[235-9]|3[03-57-9]|[45]\\\\d|6[02457-9]|7[1-69]|8[0-25-9]|9[02-9])|9\\\\d\\\\d)\\\\d{7}|(?:6(?:(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|8[124-6])\\\\d|7(?:[235689]\\\\d|4[0189]))|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-5])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]|881))[0189]\\\\d{5}\",[10]],[\"000800\\\\d{7}|1(?:600\\\\d{6}|80(?:0\\\\d{4,9}|3\\\\d{9}))\"],[\"186[12]\\\\d{9}\",[13]],0,0,[\"140\\\\d{7}\",[10]],0,0,[\"1860\\\\d{7}\",[11]]]],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]],0,0,0,0,0,0,[[\"37\\\\d{5}\"],[\"38\\\\d{5}\"]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1\\\\d{7}|(?:2[13-5]|3[02367]|4[023]|5[03]|6[026])\\\\d{6,7}\",[8,9]],[\"7[3-9]\\\\d{8}\",[10]]]],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])(?:[03-57]\\\\d{7}|[16]\\\\d{3}(?:\\\\d{4})?|[289]\\\\d{3}(?:\\\\d(?:\\\\d{3})?)?)|94(?:000[09]|(?:12\\\\d|30[0-2])\\\\d|2(?:121|[2689]0\\\\d)|4(?:111|40\\\\d))\\\\d{4}\",[6,7,10]],[\"9(?:(?:0[0-5]|[13]\\\\d|2[0-3])\\\\d\\\\d|9(?:[0-46]\\\\d\\\\d|5(?:10|5\\\\d)|8(?:[12]\\\\d|88)|9(?:0[0-3]|[19]\\\\d|21|69|77|8[7-9])))\\\\d{5}\",[10]],0,0,0,0,[\"96(?:0[12]|2[16-8]|3(?:08|[14]5|[23]|66)|4(?:0|80)|5[01]|6[89]|86|9[19])\",[4,5]]]],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"(?:4(?:1[0-24-69]|2[0-7]|[37][0-8]|4[0-24589]|5[0-68]|6\\\\d|8[0-36-8])|5(?:05|[156]\\\\d|2[02578]|3[0-579]|4[03-7]|7[0-2578]|8[0-35-9]|9[013-689])|872)\\\\d{4}\",[7]],[\"(?:38[589]\\\\d\\\\d|6(?:1[1-8]|2[0-6]|3[026-9]|4[014679]|5[0159]|6[0-69]|70|8[06-8]|9\\\\d)|7(?:5[057]|[6-9]\\\\d)|8(?:2[0-59]|[3-69]\\\\d|8[238]))\\\\d{4}\"],[\"80[0-8]\\\\d{4}\",[7]],[\"90(?:0\\\\d|1[5-79]|2[015-79]|3[135-79]|4[125-7]|5[25-79]|7[1-37]|8[0-35-7])\\\\d{3}\",[7]],0,[\"(?:689|8(?:7[18]|80)|95[48])\\\\d{4}\",[7]],[\"809\\\\d{4}\",[7]],0,[\"49[0-24-79]\\\\d{4}\",[7]]],\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:43|55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]|43\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\",[6,7,8,9,10,11]],[\"3[2-9]\\\\d{7,8}|(?:31|43)\\\\d{8}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],[\"3[2-8]\\\\d{9,10}\",[11,12]],0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97\\\\d))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\",[[\"8766060\\\\d{3}|(?:658(?:2(?:[0-8]\\\\d|9[0-46-9])|[3-9]\\\\d\\\\d)|876(?:52[35]|6(?:0[1-3579]|1[0235-9]|[23]\\\\d|40|5[06]|6[2-589]|7[0-25-9]|8[04]|9[4-9])|7(?:0[2-689]|[1-6]\\\\d|8[056]|9[45])|9(?:0[1-8]|1[02378]|[2-8]\\\\d|9[2-468])))\\\\d{4}\"],[\"(?:658295|876(?:2(?:0[1-9]|[13-9]\\\\d|2[013-9])|[348]\\\\d\\\\d|5(?:0[1-9]|[1-9]\\\\d)|6(?:4[89]|6[67])|7(?:0[07]|7\\\\d|8[1-47-9]|9[0-36-9])|9(?:[01]9|9[0579])))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"87(?:000|90[01])\\\\d{3}|(?:2(?:6(?:2[0-35-9]|3[0-578]|4[24-7]|5[0-24-8]|[6-8][023]|9[0-3])|7(?:0[1-79]|10|2[014-7]|3[0-689]|4[019]|5[0-3578]))|32(?:0[1-69]|1[1-35-7]|2[024-7]|3\\\\d|4[0-3]|[5-7][023])|53(?:0[0-3]|[13][023]|2[0-59]|49|5[0-35-9]|6[15]|7[45]|8[1-6]|9[0-36-9])|6(?:2(?:[05]0|22)|3(?:00|33)|4(?:0[0-25]|1[2-7]|2[0569]|[38][07-9]|4[025689]|6[0-589]|7\\\\d|9[0-2])|5(?:[01][056]|2[034]|3[0-57-9]|4[178]|5[0-69]|6[0-35-9]|7[1-379]|8[0-68]|9[0239]))|87(?:20|7[078]|99))\\\\d{4}\",[8]],[\"7(?:[78][0-25-9]|9\\\\d)\\\\d{6}\",[9]],[\"80\\\\d{6}\",[8]],[\"9\\\\d{7}\",[8]],[\"70\\\\d{7}\",[9]],0,[\"8(?:10|8\\\\d)\\\\d{5}\",[8]],[\"74(?:66|77)\\\\d{5}\",[9]],0,[\"85\\\\d{6}\",[8]]]],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[0459]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[26-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9]|9[29])|5(?:2|3(?:[045]|9[0-8])|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|60)|49|51|6(?:[0-24]|36|5[0-3589]|7[23]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3(?:[045]|9(?:[0-58]|6[4-9]|7[0-35689]))|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|60|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[2-57-9]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|7(?:2[2-468]|3[78])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\",0,\"(000[259]\\\\d{6})$|(?:(?:003768)0?)|0\",\"$1\",0,0,[[\"(?:1(?:1[235-8]|2[3-6]|3[3-9]|4[2-6]|[58][2-8]|6[2-7]|7[2-9]|9[1-9])|(?:2[2-9]|[36][1-9])\\\\d|4(?:[2-578]\\\\d|6[02-8]|9[2-59])|5(?:[2-589]\\\\d|6[1-9]|7[2-8])|7(?:[25-9]\\\\d|3[4-9]|4[02-9])|8(?:[2679]\\\\d|3[2-9]|4[5-9]|5[1-9]|8[03-9])|9(?:[2-58]\\\\d|[679][1-9]))\\\\d{6}\",[9]],[\"[7-9]0[1-9]\\\\d{7}\",[10]],[\"00777(?:[01]|5\\\\d)\\\\d\\\\d|(?:00(?:7778|882[1245])|(?:120|800\\\\d)\\\\d\\\\d)\\\\d{4}|00(?:37|66|78)\\\\d{6,13}\"],[\"990\\\\d{6}\",[9]],[\"60\\\\d{7}\",[9]],0,[\"570\\\\d{6}\",[9]],[\"20\\\\d{8}\",[10]],[\"50[1-9]\\\\d{7}\",[10]]]],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4[245]|5[1-79]|6[01457-9])\\\\d{5,7}|(?:4[136]|5[08]|62)\\\\d{7}|(?:[24]0|66)\\\\d{6,7}\",[7,8,9]],[\"(?:1(?:0[0-8]|1[0-7]|2[014]|30)|7\\\\d\\\\d)\\\\d{6}\",[9]],[\"800[02-8]\\\\d{5,6}\",[9,10]],[\"900[02-9]\\\\d{5}\",[9]]]],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|[235-9]\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"312(?:5[0-79]\\\\d|9(?:[0-689]\\\\d|7[0-24-9]))\\\\d{3}|(?:3(?:1(?:2[0-46-8]|3[1-9]|47|[56]\\\\d)|2(?:22|3[0-479]|6[0-7])|4(?:22|5[6-9]|6\\\\d)|5(?:22|3[4-7]|59|6\\\\d)|6(?:22|5[35-7]|6\\\\d)|7(?:22|3[468]|4[1-9]|59|[67]\\\\d)|9(?:22|4[1-8]|6\\\\d))|6(?:09|12|2[2-4])\\\\d)\\\\d{5}\",[9]],[\"312(?:58\\\\d|973)\\\\d{3}|(?:2(?:0[0-35]|2\\\\d)|5[0-24-7]\\\\d|600|7(?:[07]\\\\d|55)|88[08]|9(?:12|9[05-9]))\\\\d{6}\",[9]],[\"800\\\\d{6,7}\"]]],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"23(?:4(?:[2-4]|[56]\\\\d)|[568]\\\\d\\\\d)\\\\d{4}|23[236-9]\\\\d{5}|(?:2[4-6]|3[2-6]|4[2-4]|[5-7][2-5])(?:(?:[237-9]|4[56]|5\\\\d)\\\\d{5}|6\\\\d{5,6})\",[8,9]],[\"(?:(?:1[28]|3[18]|9[67])\\\\d|6[016-9]|7(?:[07-9]|[16]\\\\d)|8(?:[013-79]|8\\\\d))\\\\d{6}|(?:1\\\\d|9[0-57-9])\\\\d{6}|(?:2[3-6]|3[2-6]|4[2-4]|[5-7][2-5])48\\\\d{5}\",[8,9]],[\"1800(?:1\\\\d|2[019])\\\\d{4}\",[10]],[\"1900(?:1\\\\d|2[09])\\\\d{4}\",[10]]]],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\",0,0,0,0,0,[[\"(?:[24]\\\\d|3[1-9]|50|65(?:02[12]|12[56]|22[89]|[3-5]00)|7(?:27\\\\d\\\\d|3100|5(?:02[12]|12[56]|22[89]|[34](?:00|81)|500))|8[0-5])\\\\d{3}\"],[\"(?:6200[01]|7(?:310[1-9]|5(?:02[03-9]|12[0-47-9]|22[0-7]|[34](?:0[1-9]|8[02-9])|50[1-9])))\\\\d{3}|(?:63\\\\d\\\\d|7(?:(?:[0146-9]\\\\d|2[0-689])\\\\d|3(?:[02-9]\\\\d|1[1-9])|5(?:[0-2][013-9]|[34][1-79]|5[1-9]|[6-9]\\\\d)))\\\\d{4}\",[8]],0,0,0,0,0,0,[\"30(?:0[01]\\\\d\\\\d|12(?:11|20))\\\\d\\\\d\",[8]]]],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]],0,0,0,0,0,0,[[\"7[4-7]\\\\d{5}\"],[\"[34]\\\\d{6}\"],0,[\"8\\\\d{6}\"]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\",[[\"869(?:2(?:29|36)|302|4(?:6[015-9]|70)|56[5-7])\\\\d{4}\"],[\"869(?:48[89]|55[6-8]|66\\\\d|76[02-7])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:195|2)\\\\d|3[19]|4[159]|5[37]|6[17]|7[39]|85)\\\\d{6}\"],[\"19[1-3]\\\\d{7}\",[10]]]],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\",0,0,0,[[\"(?:2|3[1-3]|[46][1-4]|5[1-5])[1-9]\\\\d{6,7}|(?:3[1-3]|[46][1-4]|5[1-5])1\\\\d{2,3}\",[5,6,8,9,10]],[\"1(?:05(?:[0-8]\\\\d|9[0-6])|22[13]\\\\d)\\\\d{4,5}|1(?:0[0-46-9]|[16-9]\\\\d|2[013-9])\\\\d{6,7}\",[9,10]],[\"00(?:308\\\\d{6,7}|798\\\\d{7,9})|(?:00368|[38]0)\\\\d{7}\",[9,11,12,13,14]],[\"60[2-9]\\\\d{6}\",[9]],[\"50\\\\d{8,9}\",[10,11]],0,[\"1(?:5(?:22|33|44|66|77|88|99)|6(?:[07]0|44|6[0168]|88)|8(?:00|33|55|77|99))\\\\d{4}\",[8]],[\"15\\\\d{7,8}\",[9,10]],[\"70\\\\d{8}\",[10]]]],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]],0,0,0,0,0,0,[[\"2(?:[23]\\\\d\\\\d|4(?:[1-35-9]\\\\d|44)|5(?:0[034]|[2-46]\\\\d|5[1-3]|7[1-7]))\\\\d{4}\",[8]],[\"(?:41\\\\d\\\\d|5(?:(?:[05]\\\\d|1[0-7]|6[56])\\\\d|2(?:22|5[25])|7(?:55|77)|88[58])|6(?:(?:0[034679]|5[015-9]|6\\\\d)\\\\d|1(?:00|11|6[16])|2[26]2|3[36]3|4[46]4|7(?:0[013-9]|[67]\\\\d)|8[68]8|9(?:[069]\\\\d|3[039]))|9(?:(?:[04679]\\\\d|8[057-9])\\\\d|1(?:00|1[01]|99)|2(?:00|2\\\\d)|3(?:00|3[03])|5(?:00|5\\\\d)))\\\\d{4}\",[8]],[\"18\\\\d{5}\",[7]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\",[[\"345(?:2(?:22|3[23]|44|66)|333|444|6(?:23|38|40)|7(?:30|4[35-79]|6[6-9]|77)|8(?:00|1[45]|4[89]|88)|9(?:14|4[035-9]))\\\\d{4}\"],[\"345(?:32[1-9]|42[0-4]|5(?:1[67]|2[5-79]|4[6-9]|50|76)|649|82[56]|9(?:1[679]|2[2-9]|3[06-9]|90))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:345976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33622|7\",[[\"(?:33622|7(?:1(?:0(?:[23]\\\\d|4[0-3]|59|63)|1(?:[23]\\\\d|4[0-79]|59)|2(?:[23]\\\\d|59)|3(?:2\\\\d|3[0-79]|4[0-35-9]|59)|4(?:[24]\\\\d|3[013-9]|5[1-9]|97)|5(?:2\\\\d|3[1-9]|4[0-7]|59)|6(?:[2-4]\\\\d|5[19]|61)|72\\\\d|8(?:[27]\\\\d|3[1-46-9]|4[0-5]|59))|2(?:1(?:[23]\\\\d|4[46-9]|5[3469])|2(?:2\\\\d|3[0679]|46|5[12679])|3(?:[2-4]\\\\d|5[139])|4(?:2\\\\d|3[1-35-9]|59)|5(?:[23]\\\\d|4[0-8]|59|61)|6(?:2\\\\d|3[1-9]|4[0-4]|59)|7(?:[2379]\\\\d|40|5[279])|8(?:[23]\\\\d|4[0-3]|59)|9(?:2\\\\d|3[124578]|59))))\\\\d{5}\",[10]],[\"7(?:0[0-25-8]|47|6[0-4]|7[15-8]|85)\\\\d{7}\",[10]],[\"8(?:00|108\\\\d{3})\\\\d{7}\"],[\"809\\\\d{7}\",[10]],[\"808\\\\d{7}\",[10]],0,0,0,[\"751\\\\d{7}\",[10]]],\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[13]|[35-7][14]|41|8[1468])\\\\d{6}\",[8]],[\"(?:20(?:[23579]\\\\d|8[78])|30[24]\\\\d)\\\\d{6}|30\\\\d{7}\",[9,10]]]],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-6]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\",0,0,0,0,0,[[\"7(?:62|8[0-6]|9[04-9])\\\\d{4}|(?:[14-69]\\\\d|2(?:[14-69]\\\\d|[78][1-9])|7[2-57]|8[02-9])\\\\d{5}\"],[\"(?:(?:3|81)\\\\d|7(?:[01]\\\\d|6[013-9]|8[7-9]|9[1-3]))\\\\d{5}\"],0,[\"9[01]\\\\d{6}\",[8]],0,0,0,0,0,[\"80\\\\d{6}\",[8]]]],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\",[[\"758(?:234|4(?:30|5\\\\d|6[2-9]|8[0-2])|57[0-2]|(?:63|75)8)\\\\d{4}\"],[\"758(?:28[4-7]|384|4(?:6[01]|8[4-9])|5(?:1[89]|20|84)|7(?:1[2-9]|2\\\\d|3[0-3])|812)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\",0,0,0,[[\"(?:2(?:01|1[27]|2[024]|3\\\\d|6[02-578]|96)|3(?:[24]0|33|7[0135-7]|8[048]|9[0269]))\\\\d{4}\",[7]],[\"(?:6(?:(?:4[5-9]|5[0-46-9])\\\\d|6(?:[024-6]\\\\d|[17]0|3[7-9]))\\\\d|7(?:[37-9]\\\\d|42|56))\\\\d{4}\"],[\"8002[28]\\\\d\\\\d|80(?:05\\\\d|9)\\\\d{4}\"],[\"90(?:02[258]|1(?:23|3[14])|66[136])\\\\d\\\\d\",[7]],0,[\"697(?:42|56|[78]\\\\d)\\\\d{4}\",[9]],[\"870(?:28|87)\\\\d\\\\d\",[7]]]],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:12[2-9]|602|8[12]\\\\d|9(?:1\\\\d|22|9[245]))\\\\d{6}|(?:11|2[13-7]|3[1-8]|4[157]|5[12457]|6[35-7])[2-57]\\\\d{6}\"],[\"7(?:[0-25-8]\\\\d|4[0-4])\\\\d{6}\"],0,0,0,0,[\"1973\\\\d{5}\"]]],\"LR\":[\"231\",\"00\",\"(?:[2457]\\\\d|33|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4[67]|[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-578]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2\\\\d{7}\",[8]],[\"(?:(?:(?:22|33)0|555|7(?:6[01]|7\\\\d)|88\\\\d)\\\\d|4(?:240|[67]))\\\\d{5}|[56]\\\\d{6}\",[7,9]],0,[\"332(?:02|[34]\\\\d)\\\\d{4}\",[9]]]],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]],0,0,0,0,0,0,[[\"2\\\\d{7}\"],[\"[56]\\\\d{7}\"],[\"800[1256]\\\\d{4}\"]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(0-$1)\",1]],\"0\",0,\"[08]\",0,0,0,[[\"(?:3[1478]|4[124-6]|52)\\\\d{6}\"],[\"6\\\\d{7}\"],[\"80[02]\\\\d{5}\"],[\"9(?:0[0239]|10)\\\\d{5}\"],[\"70[05]\\\\d{5}\"],0,[\"70[67]\\\\d{5}\"],0,[\"[89]01\\\\d{5}\"],[\"808\\\\d{5}\"]]],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\",0,0,0,[[\"(?:35[013-9]|80[2-9]|90[89])\\\\d{1,8}|(?:2[2-9]|3[0-46-9]|[457]\\\\d|8[13-9]|9[2-579])\\\\d{2,9}\"],[\"6(?:[269][18]|5[1568]|7[189]|81)\\\\d{6}\",[9]],[\"800\\\\d{5}\",[8]],[\"90[015]\\\\d{5}\",[8]],0,0,0,0,[\"20(?:1\\\\d{5}|[2-689]\\\\d{1,7})\",[4,5,6,7,8,9,10]],[\"801\\\\d{5}\",[8]]]],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]],0,0,0,0,0,0,[[\"6\\\\d{7}\"],[\"2333[0-8]\\\\d{3}|2(?:[0-24-9]\\\\d\\\\d|3(?:0[07]|[14-9]\\\\d|2[02-9]|3[0-24-9]))\\\\d{4}\"],[\"80\\\\d{6}\"],[\"90\\\\d{6}\"],0,0,0,0,0,[\"81\\\\d{6}\"]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:0[56]|[1-6]\\\\d|7[124579]|8[124])|3(?:1\\\\d|2[2356])|4(?:[17]\\\\d|2[1-357]|5[2-4]|8[124])|5(?:[1347]\\\\d|2[1-469]|5[13-5]|8[1-4])|6(?:[1-479]\\\\d|5[2-57]|8[1-5])|7(?:[13]\\\\d|2[13-79])|8(?:[124]\\\\d|5[124]|84))\\\\d{6}\"],[\"9[1-6]\\\\d{7}\"]]],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-46-9]|3[3-9]|9)|8(?:0[89]|92)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:2(?:[0-25-79]\\\\d|3[1-578]|4[02-46-8]|8[0235-7])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[014-9]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[0167]\\\\d|2[0-8]|5[0-3]|8[0-7]))\\\\d{6}\"],[\"80[0-7]\\\\d{6}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"(?:592(?:4[0-2]|93)|80[89]\\\\d\\\\d)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:870|9[2-47-9]\\\\d)\\\\d{5}\",[8]],[\"4(?:[469]\\\\d|5[1-9])\\\\d{5}|(?:3|6\\\\d)\\\\d{7}\"],[\"(?:800|90\\\\d)\\\\d{5}\",[8]]]],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:2[1-9]|3[1-79])\\\\d|5(?:33|5[257]))\\\\d{5}\"],[\"562\\\\d{5}|(?:6\\\\d|7[16-9])\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[056]\\\\d{5}\"],0,0,[\"803\\\\d{5}\"],0,[\"3[08]\\\\d{6}\"],[\"808\\\\d{5}\"]]],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:20[2-8]|3(?:[0-2][2-7]|3[24-7])|4(?:0[2-467]|1[2467])|5(?:0[2467]|1[24-7]|2[2-467]))\\\\d{5}\",[8]],[\"6(?:[07-9]\\\\d|3[024]|6[0-25])\\\\d{5}\",[8]],[\"80(?:[0-2578]|9\\\\d)\\\\d{5}\"],[\"9(?:4[1568]|5[178])\\\\d{5}\",[8]],0,0,[\"77[1-9]\\\\d{5}\",[8]],0,[\"78[1-49]\\\\d{5}\",[8]]]],\"MF\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|3[03-7]|5[0-268]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\",0,0,[[\"2072[29]\\\\d{4}|20(?:2\\\\d|4[47]|5[3467]|6[279]|7[356]|8[268]|9[2457])\\\\d{5}\"],[\"3[2-47-9]\\\\d{7}\"],0,0,0,0,0,0,[\"22\\\\d{7}\"]]],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\",0,0,0,0,0,[[\"(?:247|528|625)\\\\d{4}\"],[\"(?:(?:23|54)5|329|45[35-8])\\\\d{4}\"],0,0,0,0,0,0,[\"635\\\\d{4}\"]]],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:2(?:62|77)0|3444)\\\\d|4[56]440)\\\\d{3}|(?:34|4[357])700\\\\d{3}|(?:2(?:[0-3]\\\\d|5[0-578]|6[01]|82)|3(?:1[3-68]|[23][2-68]|4[23568])|4(?:[23][2-68]|4[3-68]|5[2568]|6[25-8]|7[24-68]|8[4-68]))\\\\d{5}\"],[\"7(?:3555|(?:474|9[019]7)7)\\\\d{3}|7(?:[0-25-8]\\\\d\\\\d|3(?:[1-478]\\\\d|6[01])|4(?:2\\\\d|60|7[01578])|9(?:[2-4]\\\\d|5[01]|7[015]))\\\\d{4}\"],[\"800\\\\d{5}\"],[\"5\\\\d{7}\"],0,0,0,0,0,[\"8(?:0[1-9]|[1-9]\\\\d)\\\\d{5}\"]]],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]],0,0,0,0,0,0,[[\"2(?:07[0-8]|12[67])\\\\d{4}|(?:2(?:02|1[4-689])|4(?:0[0-4]|4[1-59]))\\\\d{5}\"],[\"2(?:0(?:01|79)|17\\\\d)\\\\d{4}|(?:5[0-3]|[679]\\\\d|8[2-59])\\\\d{6}\"],[\"80\\\\d{6}\"]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"4(?:[2-46]|5[3-5])|5|6(?:[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-5]|(?:60|86)[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|452|678|86\",\"[12]|452|6788|86\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:12|[28]\\\\d|3[56]|7[3-6]|9[0-6])\\\\d|4(?:2[29]|7[0-2]|83)|6)|2(?:2(?:00|8[34])|4(?:0\\\\d|22|7[0-2]|83)|51\\\\d\\\\d)|4(?:2(?:2\\\\d\\\\d|48[013])|3(?:20\\\\d|4(?:70|83)|56)|420\\\\d|5(?:2\\\\d|470))|6(?:0(?:[23]|88\\\\d)|(?:124|[56]2\\\\d)\\\\d|2472|3(?:20\\\\d|470)|4(?:2[04]\\\\d|472)|7(?:3\\\\d\\\\d|4[67]0|8(?:[01459]\\\\d|8))))\\\\d{4}|5(?:2(?:2\\\\d{5,6}|47[02]\\\\d{4})|(?:3472|4(?:2(?:1|86)|470)|522\\\\d|6(?:20\\\\d|483)|7(?:20\\\\d|48[01])|8(?:20\\\\d|47[02])|9(?:20\\\\d|470))\\\\d{4})|7(?:(?:0470|4(?:25\\\\d|470)|5(?:202|470|96\\\\d))\\\\d{4}|1(?:20\\\\d{4,5}|4(?:70|83)\\\\d{4}))|8(?:1(?:2\\\\d{5,6}|4(?:10|7[01]\\\\d)\\\\d{3})|2(?:2\\\\d{5,6}|(?:320|490\\\\d)\\\\d{3})|(?:3(?:2\\\\d\\\\d|470)|4[24-7]|5(?:(?:2\\\\d|51)\\\\d|4(?:[1-35-9]\\\\d|4[0-57-9]))|6[23])\\\\d{4})|(?:1[2-6]\\\\d|4(?:2[24-8]|3[2-7]|[46][2-6]|5[3-5])|5(?:[27][2-8]|3[2-68]|4[24-8]|5[23]|6[2-4]|8[24-7]|9[2-7])|6(?:[19]20|42[03-6]|(?:52|7[45])\\\\d)|7(?:[04][24-8]|[15][2-7]|22|3[2-4])|8(?:1[2-689]|2[2-8]|(?:[35]2|64)\\\\d))\\\\d{4}|25\\\\d{5,6}|(?:2[2-9]|6(?:1[2356]|[24][2-6]|3[24-6]|5[2-4]|6[2-8]|7[235-7]|8[245]|9[24])|8(?:3[24]|5[245]))\\\\d{4}\",[6,7,8,9]],[\"(?:17[01]|9(?:2(?:[0-4]|[56]\\\\d\\\\d)|(?:3(?:[0-36]|4\\\\d)|(?:6\\\\d|8[89]|9[4-8])\\\\d|7(?:3|40|[5-9]\\\\d))\\\\d|4(?:(?:[0245]\\\\d|[1379])\\\\d|88)|5[0-6])\\\\d)\\\\d{4}|9[69]1\\\\d{6}|9(?:[68]\\\\d|9[089])\\\\d{5}\",[7,8,9,10]],[\"80080(?:0[1-9]|2\\\\d)\\\\d{3}\",[10]],0,0,0,0,0,[\"1333\\\\d{4}\",[8]]]],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[12]2[1-3]\\\\d{5,6}|(?:(?:[12](?:1|27)|5[368])\\\\d\\\\d|7(?:0(?:[0-5]\\\\d|7[078]|80)|128))\\\\d{4}|[12](?:3[2-8]|4[2-68]|5[1-4689])\\\\d{6,7}\"],[\"(?:83[01]|92[0139])\\\\d{5}|(?:5[05]|6[069]|72|8[015689]|9[013-9])\\\\d{6}\",[8]],0,0,0,0,0,0,[\"712[0-79]\\\\d{4}|7(?:1[013-9]|[5-9]\\\\d)\\\\d{5}\",[8]]]],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]],0,0,0,0,0,0,[[\"(?:28[2-9]|8(?:11|[2-57-9]\\\\d))\\\\d{5}\",[8]],[\"6800[0-79]\\\\d{3}|6(?:[235]\\\\d\\\\d|6(?:0[0-5]|[1-9]\\\\d)|8(?:0[1-9]|[14-8]\\\\d|2[5-9]|[39][0-4]))\\\\d{4}\",[8]],[\"0800\\\\d{3}\",[7]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\",[[\"670(?:2(?:3[3-7]|56|8[4-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MQ\":[\"596\",\"00\",\"(?:596\\\\d|7091)\\\\d{5}|(?:69|[89]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]|8(?:0[6-9]|[36])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:596(?:[03-7]\\\\d|1[05]|2[7-9]|8[0-39]|9[04-9])|80[6-9]\\\\d\\\\d|9(?:477[6-9]|767[4589]))\\\\d{4}\"],[\"(?:69[67]\\\\d\\\\d|7091[0-3])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],[\"8[129]\\\\d{7}\"],0,0,0,0,[\"9(?:397[0-3]|477[0-5]|76(?:6\\\\d|7[0-367]))\\\\d{4}\"]]],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]],0,0,0,0,0,0,[[\"(?:25[08]|35\\\\d|45[1-7])\\\\d{5}\"],[\"[2-4][0-46-9]\\\\d{6}\"],[\"800\\\\d{5}\"]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\",[[\"6644(?:1[0-3]|91)\\\\d{4}\"],[\"664(?:3(?:49|9[1-6])|49[2-6])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]],0,0,0,0,0,0,[[\"20(?:3[1-4]|6[059])\\\\d{4}|2(?:0[19]|[1-357]\\\\d|60)\\\\d{5}\"],[\"(?:7(?:210|[79]\\\\d\\\\d)|9(?:[29]\\\\d\\\\d|69[67]|8(?:1[1-3]|89|97)))\\\\d{4}\"],[\"800(?:02|[3467]\\\\d)\\\\d{3}\"],[\"5(?:0(?:0(?:37|43)|(?:6\\\\d|70|9[0168])\\\\d)|[12]\\\\d0[1-5])\\\\d{3}\"],0,0,[\"501\\\\d{5}\"],[\"7117\\\\d{4}\"],[\"3550\\\\d{4}\"]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,[[\"(?:2(?:[0346-8]\\\\d|1[0-8])|4(?:[013568]\\\\d|2[4-8]|71|90)|54(?:[3-5]\\\\d|71)|6\\\\d\\\\d|8(?:14|3[129]))\\\\d{4}\",[7,8]],[\"5(?:4(?:2[1-389]|7[1-9])|87[15-8])\\\\d{4}|(?:5(?:2[5-9]|4[3-689]|[57]\\\\d|8[0-689]|9[0-8])|7(?:0[0-6]|3[013]))\\\\d{5}\",[8]],[\"802\\\\d{7}|80[0-2]\\\\d{4}\",[7,10]],[\"30\\\\d{5}\",[7]],0,0,0,[\"219\\\\d{4}\",[7]],[\"3(?:20|9\\\\d)\\\\d{4}\",[7]]],\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[[\"(?:3(?:0[0-4]|3[0-59])|6(?:[58][024689]|6[024-68]|7[02468]))\\\\d{4}\",[7]],[\"(?:46[46]|[79]\\\\d\\\\d)\\\\d{4}\",[7]],[\"800\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]],0,0,[\"4(?:0[01]|50)\\\\d{4}\",[7]]],\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[2-9]|2[12]\\\\d\\\\d)\\\\d{5}\"],[\"111\\\\d{6}|(?:31|77|[89][89])\\\\d{7}\",[9]]]],\"MX\":[\"52\",\"0[09]\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:0[01]|2\\\\d|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[267][1-9]|3[1-8]|[45]\\\\d|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-36-9]|6[0-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1346][1-9]|[27]\\\\d|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[0-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69]\\\\d|7[12]|8[1-8]))\\\\d{7}\"],[\"(?:2(?:2\\\\d|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[267][1-9]|3[1-8]|[45]\\\\d|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-36-9]|6[0-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1346][1-9]|[27]\\\\d|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[0-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69]\\\\d|7[12]|8[1-8]))\\\\d{7}\"],[\"8(?:00|88)\\\\d{7}\"],[\"900\\\\d{7}\"],[\"500\\\\d{7}\"],0,0,0,0,[\"300\\\\d{7}\"]],\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"427[01]\\\\d{4}|(?:3(?:2[0-36-9]|3[0-368]|4[0-278]|5[0-24-8]|6[0-467]|7[1246-9]|8\\\\d|9[0-57])\\\\d|4(?:2[0-689]|[3-79]\\\\d|8[1-35689])|5(?:2[0-589]|[3468]\\\\d|5[0-489]|7[1-9]|9[23])|6(?:2[2-9]|3[1357-9]|[46]\\\\d|5[0-6]|7[0-35-9]|85|9[015-8])|7(?:[2579]\\\\d|3[03-68]|4[0-8]|6[5-9]|8[0-35-9])|8(?:[24][2-8]|3[2-5]|5[2-7]|6[2-589]|7[2-578]|[89][2-9])|9(?:0[57]|13|[25-7]\\\\d|[3489][0-8]))\\\\d{5}\",[8,9]],[\"1(?:1888[689]|4400|8(?:47|8[27])[0-4])\\\\d{4}|1(?:0(?:[23568]\\\\d|4[0-6]|7[016-9]|9[0-8])|1(?:[1-5]\\\\d\\\\d|6(?:0[5-9]|[1-9]\\\\d)|7(?:[0-4]\\\\d|5[0-7]))|(?:[269]\\\\d|[37][1-9]|4[235-9])\\\\d|5(?:31|9\\\\d\\\\d)|8(?:1[23]|[236]\\\\d|4[06]|5(?:46|[7-9])|7[016-9]|8[01]|9[0-8]))\\\\d{5}\",[9,10]],[\"1[378]00\\\\d{6}\",[10]],[\"1600\\\\d{6}\",[10]],0,0,0,0,[\"15(?:4(?:6[0-4]\\\\d|8(?:0[125]|[17]\\\\d|21|3[01]|4[01589]|5[014]|6[02]))|6(?:32[0-6]|78\\\\d))\\\\d{4}\",[10]]]],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"2(?:[1346]\\\\d|5[0-2]|[78][12]|93)\\\\d{5}\",[8]],[\"8[2-79]\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"64426\\\\d{3}|6(?:1(?:2[2-7]|3[01378]|4[0-4])|254|32[0237]|4(?:27|41|5[25])|52[236-8]|626|7(?:2[2-4]|30))\\\\d{4,5}|6(?:1(?:(?:0\\\\d|2[0189]|3[24-69]|4[5-9])\\\\d|17|69|7[014])|2(?:17|5[0-36-8]|69|70)|3(?:17|2[14-689]|34|6[289]|7[01]|81)|4(?:17|2[0-2]|4[06]|5[0137]|69|7[01])|5(?:17|2[0459]|69|7[01])|6(?:17|25|38|42|69|7[01])|7(?:17|2[569]|3[13]|6[89]|7[01]))\\\\d{4}\"],[\"(?:60|8[1245])\\\\d{7}\",[9]],[\"80\\\\d{7}\",[9]],[\"8701\\\\d{5}\",[9]],0,0,0,0,[\"8(?:3\\\\d\\\\d|86)\\\\d{5}\"]]],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]],0,0,0,0,0,0,[[\"(?:2[03-9]|3[0-5]|4[1-7]|88)\\\\d{4}\"],[\"(?:[579]\\\\d|8[0-79])\\\\d{4}\"],[\"050\\\\d{3}\"],[\"36\\\\d{4}\"]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[0467]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:20|3[1-8]|4[13-5]|5[14]|6[14578]|7[1-578])|1(?:4[145]|5[14]|6[14-68]|7[169]|88))\\\\d{4}\"],[\"(?:23|7[0467]|[89]\\\\d)\\\\d{6}\"],[\"08\\\\d{6}\"],[\"09\\\\d{6}\"]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\",0,0,[[\"(?:1(?:06|17|28|39)|3[0-2]\\\\d)\\\\d{3}\"],[\"(?:14|3[58])\\\\d{4}\"]]],\"NG\":[\"234\",\"009\",\"(?:20|9\\\\d)\\\\d{8}|[78]\\\\d{9,13}\",[10,11,12,13,14],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"20[129]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"20(?:[1259]\\\\d|3[013-9]|4[1-8]|6[024-689]|7[1-79]|8[2-9])\\\\d{6}\",[10]],[\"(?:702[0-24-9]|819[01])\\\\d{6}|(?:7(?:0[13-9]|[12]\\\\d)|8(?:0[1-9]|1[0-8])|9(?:0[1-9]|1[1-6]))\\\\d{7}\",[10]],[\"800\\\\d{7,11}\"],0,0,0,[\"700\\\\d{7,11}\"]]],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]],0,0,0,0,0,0,[[\"2\\\\d{7}\"],[\"(?:5(?:5[0-7]|[78]\\\\d)|6(?:20|3[035]|4[045]|5[05]|77|8[1-9]|9[059])|(?:7[5-8]|8\\\\d)\\\\d)\\\\d{5}\"],[\"1800\\\\d{4}\"]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:[035]\\\\d|1[13-578]|6[124-8]|7[24]|8[0-467])|2(?:[0346]\\\\d|2[2-46-9]|5[125]|9[479])|3(?:[03568]\\\\d|1[3-8]|2[01]|4[1-8])|4(?:[0356]\\\\d|1[1-368]|7[58]|8[15-8]|9[23579])|5(?:[0358]\\\\d|[19][1-9]|2[1-57-9]|4[13-8]|6[126]|7[0-3578])|7\\\\d\\\\d)\\\\d{6}\",[9]],[\"(?:6[1-58]|970\\\\d)\\\\d{7}\",[9,11]],[\"800\\\\d{4,7}\",[7,8,9,10]],[\"90[069]\\\\d{4,7}\",[7,8,9,10]],0,0,[\"140(?:1[035]|2[0346]|3[03568]|4[0356]|5[0358]|8[458])|(?:140(?:1[16-8]|2[259]|3[124]|4[17-9]|5[124679]|7)|8[478]\\\\d{6})\\\\d\",[5,6,9]],[\"66\\\\d{7}\",[9]],[\"(?:85|91)\\\\d{7}\",[9]]]],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\",[[\"(?:2[1-4]|3[1-3578]|5[1-35-7]|6[1-4679]|7[0-8])\\\\d{6}\",[8]],[\"(?:4[015-8]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],[\"81[23]\\\\d{5}\",[8]],[\"(?:0[235-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"(?:1[0-6]\\\\d|99[02-6])\\\\d{5}|(?:2[13-79]|3[135-8]|4[146-9]|5[135-7]|6[13-9]|7[15-9]|8[1-46-9]|9[1-7])[2-6]\\\\d{5}\",[8]],[\"9(?:00|6[0-3]|7[024-6]|8[0-24-68])\\\\d{7}\",[10]],[\"1(?:66001|800\\\\d\\\\d)\\\\d{5}\",[11]]]],\"NR\":[\"674\",\"00\",\"(?:222|444|(?:55|8\\\\d)\\\\d|666|777|999)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-9]\"]]],0,0,0,0,0,0,[[\"444\\\\d{4}\"],[\"(?:222|55[3-9]|666|777|8\\\\d\\\\d|999)\\\\d{4}\"]]],\"NU\":[\"683\",\"00\",\"(?:[4-7]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,[[\"[47]\\\\d{3}\",[4]],[\"(?:[56]|888[1-9])\\\\d{3}\"]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[1289]\\\\d{9}|50\\\\d{5}(?:\\\\d{2,3})?|[27-9]\\\\d{7,8}|(?:[34]\\\\d|6[0-35-9])\\\\d{6}|8\\\\d{4,6}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|8|90\",\"50(?:[0367]|88)|8|90\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[589]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"240\\\\d{5}|(?:3[2-79]|[49][2-9]|6[235-9]|7[2-57-9])\\\\d{6}\",[8]],[\"2(?:[0-27-9]\\\\d|6)\\\\d{6,7}|2(?:1\\\\d|75)\\\\d{5}\",[8,9,10]],[\"508\\\\d{6,7}|80\\\\d{6,8}\",[8,9,10]],[\"(?:1[13-57-9]\\\\d{5}|50(?:0[08]|30|66|77|88))\\\\d{3}|90\\\\d{6,8}\",[7,8,9,10]],[\"70\\\\d{7}\",[9]],0,[\"8(?:1[16-9]|22|3\\\\d|4[045]|5[459]|6[235-9]|7[0-3579]|90)\\\\d{2,7}\"]],\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]],0,0,0,0,0,0,[[\"2[1-6]\\\\d{6}\",[8]],[\"(?:1505|90[1-9]\\\\d)\\\\d{4}|(?:7[126-9]|9[1-9])\\\\d{6}\",[8]],[\"8007\\\\d{4,5}|(?:500|800[05])\\\\d{4}\"],[\"900\\\\d{5}\",[8]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"(?:1(?:0\\\\d|1[479]|2[37]|3[0137]|4[17]|5[05]|6[058]|7[0167]|8[2358]|9[1389])|2(?:[0235-79]\\\\d|1[0-7]|4[013-9]|8[02-9])|3(?:[047-9]\\\\d|1[0-8]|2[0-5]|33|5[0-35]|6[068])|4(?:00|3[0-579]|4\\\\d|7[0-57-9])|5(?:[01]\\\\d|2[0-7]|[56]0|79)|7(?:0[09]|2[0-26-8]|3[03]|4[04]|5[05-9]|6[0156]|7[0-24-9]|8[4-9]|90)|8(?:09|2[89]|3\\\\d|4[0-24-689]|5[014]|8[02])|9(?:0[5-9]|1[0135-8]|2[036-9]|3[35-79]|40|5[0457-9]|6[05-9]|7[04-9]|8[35-8]|9\\\\d))\\\\d{4}\",[7]],[\"(?:1[16]1|21[89]|6\\\\d{3}|8(?:1[01]|7[23]))\\\\d{4}\",[7,8]],[\"800\\\\d{4,5}|(?:00800|800\\\\d)\\\\d{6}\"],[\"(?:8(?:22|55|60|7[78]|86)|9(?:00|81))\\\\d{4}\",[7]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"(?:(?:(?:4[34]|5[14])[0-8]|687)\\\\d|7(?:173|(?:3[0-8]|55)\\\\d)|8(?:10[05689]|6(?:0[06-9]|1[6-9]|29)|7(?:0[0569]|[56]0)))\\\\d{4}|(?:1[0-8]|4[12]|5[236]|6[1-7]|7[246]|8[2-4])\\\\d{6}\",[8]],[\"9\\\\d{8}\",[9]],[\"800\\\\d{5}\",[8]],[\"805\\\\d{5}\",[8]],[\"80[24]\\\\d{5}\",[8]],0,0,0,0,[\"801\\\\d{5}\",[8]]],\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]],0,0,0,0,0,0,[[\"4(?:0[4-689]|9[4-68])\\\\d{5}\",[8]],[\"8[7-9]\\\\d{6}\",[8]],[\"80[0-5]\\\\d{6}\",[9]],0,0,0,[\"44\\\\d{4}\",[6]],0,[\"499\\\\d{5}\",[8]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,[[\"(?:(?:3[0-2]|4[257]|5[34]|9[78])\\\\d|64[1-9]|85[02-46-9])\\\\d{4}\",[7]],[\"(?:7\\\\d|8[1-38])\\\\d{6}\",[8]],[\"180\\\\d{4}\",[7]],0,0,0,0,[\"27[01]\\\\d{4}\",[7]],[\"2(?:0[0-57]|7[568])\\\\d{4}\",[7]]],\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:(?:2[3-8]|3[2-68]|4[2-9]|5[2-6]|6[2-58]|7[24578])\\\\d{3}|88(?:22\\\\d\\\\d|42))\\\\d{4}|(?:2|8[2-8]\\\\d\\\\d)\\\\d{5}\",[6,8,9,10]],[\"(?:8(?:1[37]|9[5-8])|9(?:0[5-9]|1[0-24-9]|[235-7]\\\\d|4[2-9]|8[135-9]|9[1-9]))\\\\d{7}\",[10]],[\"1800\\\\d{7,9}\",[11,12,13]]]],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:(?:21|42)[2-9]|58[126])\\\\d{7}|(?:2[25]|4[0146-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\\\\d{6,7}|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8]))[2-9]\\\\d{5,6}\",[9,10]],[\"3(?:[0-247]\\\\d|3[0-79]|55|64)\\\\d{7}\",[10]],[\"800\\\\d{5}(?:\\\\d{3})?\",[8,11]],[\"900\\\\d{5}\",[8]],[\"122\\\\d{6}\",[9]],0,[\"(?:2(?:[125]|3[2358]|4[2-4]|9[2-8])|4(?:[0-246-9]|5[3479])|5(?:[1-35-7]|4[2-467])|6(?:0[468]|[1-8])|7(?:[14]|2[236])|8(?:[16]|2[2-689]|3[23578]|4[3478]|5[2356])|9(?:1|22|3[27-9]|4[2-6]|6[3569]|9[2-7]))111\\\\d{6}\",[11,12]]]],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"47\\\\d{7}|(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])(?:[02-9]\\\\d{6}|1(?:[0-8]\\\\d{5}|9\\\\d{3}(?:\\\\d{2})?))\",[7,9]],[\"2131[89]\\\\d{4}|21(?:1[013-5]|2\\\\d|3[2-9])\\\\d{5}|(?:45|5[0137]|6[069]|7[2389]|88)\\\\d{7}\",[9]],[\"800\\\\d{6,7}\",[9,10]],[\"70[01346-8]\\\\d{6}\",[9]],0,0,[\"804\\\\d{6}\",[9]],[\"64\\\\d{4,7}\",[6,7,8,9]],[\"39\\\\d{7}\",[9]],[\"801\\\\d{6}\",[9]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|8\\\\d\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4[1-35-9]|5[0-47-9]|80[6-9]\\\\d\\\\d)\\\\d{4}\"],[\"(?:4[02-489]|5[02-9]|708(?:4[0-5]|5[0-6]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\",[9]],[\"8[129]\\\\d{7}\",[9]]]],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\",[[\"(?:787|939)[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:22[2-47-9]|42[45]|82[014-68]|92[3569])\\\\d{5}\",[8]],[\"5[69]\\\\d{7}\",[9]],[\"1800\\\\d{6}\",[10]],0,0,0,0,0,0,[\"1700\\\\d{6}\",[10]]]],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]],0,0,0,0,0,0,[[\"2(?:[12]\\\\d|3[1-689]|4[1-59]|[57][1-9]|6[1-35689]|8[1-69]|9[1256])\\\\d{6}\"],[\"6(?:[06]92(?:30|9\\\\d)|[35]92(?:[049]\\\\d|3[034]))\\\\d{3}|(?:(?:16|6[0356])93|9(?:[1-36]\\\\d\\\\d|480))\\\\d{5}\"],[\"80[02]\\\\d{6}\"],[\"(?:6(?:0[178]|4[68])\\\\d|76(?:0[1-57]|1[2-47]|2[237]))\\\\d{5}\"],[\"884[0-4689]\\\\d{5}\"],[\"600\\\\d{6}|6[06]92(?:0\\\\d|3[349]|49)\\\\d{3}\"],[\"70(?:38[01]|596|(?:7\\\\d|8[17])\\\\d)\\\\d{4}\"],[\"6(?:222\\\\d|89(?:00|88|99))\\\\d{4}\"],[\"30\\\\d{7}\"],[\"80(?:8\\\\d|9[1579])\\\\d{5}\"]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:55|77)|345|488|5(?:35|44|87)|6(?:22|54|79)|7(?:33|47)|8(?:24|55|76)|900)\\\\d{4}\"],[\"(?:(?:46|83)[0-5]|(?:6[2-4689]|78)0)\\\\d{4}|(?:45|77|88)\\\\d{5}\"]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"(?:[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36])\\\\d{5,7}|(?:2(?:2[4-68]|[4-68]\\\\d|7[15]|9[1-5])|3(?:18|3[167]|4[2357]|51|[67]\\\\d)|4(?:3[12]|5[13]|9[1-47])|5(?:[1-4]\\\\d|5[02-4])|6(?:3[1-3]|44|7[1-8])|7(?:4[0-4]|5\\\\d|6[1-578]|75|8[0-8])|858)\\\\d{5,6}\",[7,8,9]],[\"9(?:51|6[129]|7[1-6]|8[1-7]|9[1-5])\\\\d{6}\",[9]],[\"9800\\\\d{5,7}\",[9,10,11]],0,0,0,[\"[2-9]0\\\\d{4,7}\",[6,7,8,9]],0,[\"8700[0-4]\\\\d{4}\",[9]]]],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[136]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]],0,0,0,0,0,0,[[\"4(?:1111|2022)\\\\d{3}|4(?:[04]\\\\d\\\\d|14[0-6]|999)\\\\d{4}\",[8]],[\"[35-7]\\\\d{7}\",[8]],[\"800\\\\d{4}|(?:0080[01]|800)\\\\d{6}\",[7,9,11]],0,0,0,0,[\"2[136]\\\\d{5}\",[7]]]],\"RE\":[\"262\",\"00\",\"709\\\\d{6}|(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[26-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-6]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:[06][0-6]|1[0-3]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|7[0-37]|8[0-8]|9[0-479]))|7092[0-3])\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,[\"9(?:399[0-3]|479[0-6]|76(?:2[278]|3[0-37]))\\\\d{4}\"],[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[236-8]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[23][13-6]\\\\d{7}|(?:2(?:19\\\\d|[3-6]\\\\d9)|31\\\\d\\\\d)\\\\d\\\\d\"],[\"(?:630|702)0\\\\d{5}|(?:6(?:00|2\\\\d)|7(?:0[013-9]|1[0-3]|[2-7]\\\\d|8[03-8]|9[0-39]))\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"90[0136]\\\\d{6}\",[9]],0,0,[\"(?:37\\\\d|80[578])\\\\d{6}\",[9]],0,0,[\"801\\\\d{6}\",[9]]],0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:11[1-9]\\\\d|(?:2[389]|39)(?:0[2-9]|[2-9]\\\\d))\\\\d{3,8}|(?:1[02-9]|2[0-24-7]|3[0-8])[2-9]\\\\d{4,9}\",[7,8,9,10,11,12]],[\"6(?:[0-689]|7\\\\d)\\\\d{6,7}\",[8,9,10]],[\"800\\\\d{3,9}\"],[\"(?:78\\\\d|90[0169])\\\\d{3,7}\",[6,7,8,9,10]],0,0,[\"7[06]\\\\d{4,10}\"]]],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,0,[[\"336(?:[013-9]\\\\d|2[013-9])\\\\d{5}|(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15-7]|6[0-35-79]|7[1-37-9]))\\\\d{7}\",[10]],[\"9\\\\d{9}\",[10]],[\"8(?:0[04]|108\\\\d{3})\\\\d{7}\"],[\"80[39]\\\\d{7}\",[10]],[\"808\\\\d{7}\",[10]]],\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:06|2[23568]\\\\d)\\\\d{6}\"],[\"7[237-9]\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"900\\\\d{6}\",[9]]]],\"SA\":[\"966\",\"00\",\"(?:[15]\\\\d|800|92)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,0,0,0,0,[[\"1(?:1\\\\d|2[24-8]|3[35-8]|4[3-68]|6[2-5]|7[235-7])\\\\d{6}\",[9]],[\"579[01]\\\\d{5}|5(?:[013-689]\\\\d|7[0-8])\\\\d{6}\",[9]],[\"800\\\\d{7}\",[10]],[\"925\\\\d{6}\",[9]],0,0,0,0,0,[\"920\\\\d{6}\",[9]]]],\"SB\":[\"677\",\"0[01]\",\"[6-9]\\\\d{6}|[1-6]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"6[89]|7|8[4-9]|9(?:[1-8]|9[0-8])\"]]],0,0,0,0,0,0,[[\"(?:1[4-79]|[23]\\\\d|4[0-2]|5[03]|6[0-37])\\\\d{3}\",[5]],[\"48\\\\d{3}|(?:(?:6[89]|7[1-9]|8[4-9])\\\\d|9(?:1[2-9]|2[013-9]|3[0-2]|[46]\\\\d|5[0-46-9]|7[0-689]|8[0-79]|9[0-8]))\\\\d{4}\"],[\"1[38]\\\\d{3}\",[5]],0,0,0,0,0,[\"5[12]\\\\d{3}\",[5]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"(?:[2489]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,[[\"4[2-46]\\\\d{5}\"],[\"2[125-8]\\\\d{5}\"],[\"800[08]\\\\d{3}\"],[\"85\\\\d{5}\"],0,0,0,0,[\"971\\\\d{4}|(?:64|95)\\\\d{5}\"]],\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1(?:5\\\\d|8[35-7])\\\\d{6}\"],[\"(?:1[0-2]|9[0-3569])\\\\d{7}\"]]],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\",0,0,0,0,0,[[\"(?:(?:[12][136]|3[356]|4[0246]|6[03]|8\\\\d)\\\\d|90[1-9])\\\\d{4,6}|(?:1(?:2[0-35]|4[0-4]|5[0-25-9]|7[13-6]|[89]\\\\d)|2(?:2[0-7]|4[0136-8]|5[0138]|7[018]|8[01]|9[0-57])|3(?:0[0-4]|1\\\\d|2[0-25]|4[056]|7[0-2]|8[0-3]|9[023])|4(?:1[013-8]|3[0135]|5[14-79]|7[0-246-9]|8[0156]|9[0-689])|5(?:0[0-6]|[15][0-5]|2[0-68]|3[0-4]|4\\\\d|6[03-5]|7[013]|8[0-79]|9[01])|6(?:1[1-3]|2[0-4]|4[02-57]|5[0-37]|6[0-3]|7[0-2]|8[0247]|9[0-356])|9(?:1[0-68]|2\\\\d|3[02-5]|4[0-3]|5[0-4]|[68][01]|7[0135-8]))\\\\d{5,6}\",[7,8,9]],[\"7[02369]\\\\d{7}\",[9]],[\"20\\\\d{4,7}\",[6,7,8,9]],[\"649\\\\d{6}|99[1-59]\\\\d{4}(?:\\\\d{3})?|9(?:00|39|44)[1-8]\\\\d{3,6}\",[7,8,9,10]],[\"75[1-8]\\\\d{6}\",[9]],[\"(?:25[245]|67[3-68])\\\\d{9}\",[12]],[\"10[1-8]\\\\d{6}\",[9]],[\"74[02-9]\\\\d{6}\",[9]],0,[\"77[0-7]\\\\d{6}\",[9]]]],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-9]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[[\"662[0-24-9]\\\\d{4}|6(?:[0-578]\\\\d|6[013-57-9]|9[0-35-9])\\\\d{5}\",[8]],[\"897[0-5]\\\\d{4}|(?:8(?:0[1-9]|[1-8]\\\\d|9[0-6])|9[0-8]\\\\d)\\\\d{5}\",[8]],[\"(?:18|8)00\\\\d{7}\",[10,11]],[\"1900\\\\d{7}\",[11]],0,0,[\"7000\\\\d{7}\",[11]],0,[\"(?:3[12]\\\\d|666)\\\\d{5}\",[8]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\",[[\"2(?:[0-57-9]\\\\d|6[4-9])\\\\d\\\\d\"],[\"[56]\\\\d{4}\",[5]],0,0,0,0,0,0,[\"262\\\\d\\\\d\",[5]]]],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:[1-357][2-8]|4[24-8])\\\\d{6}\",[8]],[\"65(?:[178]\\\\d|5[56]|6[01])\\\\d{4}|(?:[37][01]|4[0139]|51|6[489])\\\\d{6}\",[8]],[\"80\\\\d{4,6}\",[6,7,8]],[\"89[1-3]\\\\d{2,5}|90\\\\d{4,6}\"],0,0,0,0,[\"(?:59\\\\d\\\\d|8(?:1(?:[67]\\\\d|8[0-589])|2(?:0\\\\d|2[0-37-9]|8[0-2489])|3[389]\\\\d))\\\\d{4}\",[8]]],\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\",[[\"79\\\\d{6}\",[8]],[\"(?:4[015-8]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],[\"81[23]\\\\d{5}\",[8]],[\"(?:0[235-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:16|[2-9]\\\\d{3})|(?:(?:[3-5][1-8]\\\\d|819)\\\\d|601[1-5])\\\\d)\\\\d{4}|(?:2|[3-5][1-8])1[67]\\\\d{3}|[3-5][1-8]16\\\\d\\\\d\"],[\"909[1-9]\\\\d{5}|9(?:0[1-8]|1[0-24-9]|4[03-57-9]|5\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"9(?:00|[78]\\\\d)\\\\d{6}\",[9]],0,0,[\"96\\\\d{7}\",[9]],[\"9090\\\\d{3}\",[7]],[\"6(?:02|5[0-4]|9[0-6])\\\\d{6}\",[9]],[\"8[5-9]\\\\d{7}\",[9]]]],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"22[2-4][2-9]\\\\d{4}\"],[\"(?:25|3[0-5]|66|7[1-9]|8[08]|9[09])\\\\d{6}\"]]],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\",0,0,[[\"0549(?:8[0157-9]|9\\\\d)\\\\d{4}\",[10]],[\"6[16]\\\\d{6}\",[8]],0,[\"7[178]\\\\d{6}\",[8]],0,0,0,0,[\"5[158]\\\\d{6}\",[8]]]],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]],0,0,0,0,0,0,[[\"3(?:0(?:1[0-2]|80)|282|3(?:8[1-9]|9[3-9])|611)\\\\d{5}\"],[\"7(?:(?:[06-8]\\\\d|[19]0|21)\\\\d|5(?:0[01]|[19]0|2[25]|3[356]|[4-7]\\\\d|8[35]))\\\\d{5}\"],[\"800\\\\d{6}\"],[\"88[4689]\\\\d{6}\"],0,0,0,0,[\"(?:3(?:392|9[01]\\\\d)\\\\d|93(?:3[13]0|929))\\\\d{4}\"],[\"81[02468]\\\\d{6}\"]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[0-35-9]|7[67]|9[2-9]\"]]],\"0\",0,0,0,0,0,[[\"(?:1\\\\d|2[0-79]|3[0-46-8]|4[0-7]|5[57-9])\\\\d{5}|(?:[134]\\\\d|8[125])\\\\d{4}\",[6,7]],[\"(?:(?:15|(?:3[59]|4[89]|6\\\\d|7[679]|8[08])\\\\d|9(?:0\\\\d|[2-9]))\\\\d|2(?:4\\\\d|8))\\\\d{5}|(?:[67]\\\\d\\\\d|904)\\\\d{5}\",[7,8,9]]]],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d|90)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-9]\"]]],0,0,0,0,0,0,[[\"(?:2[1-3]|3[0-7]|(?:4|68)\\\\d|5[2-58])\\\\d{4}\"],[\"(?:7[124-7]|8[1-9])\\\\d{5}\",[7]],[\"80\\\\d{5}\",[7]],[\"90\\\\d{5}\",[7]],0,0,0,0,[\"56\\\\d{4}\",[6]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1[89]\\\\d{7}\"],[\"(?:12|9[1257-9])\\\\d{7}\"]]],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]],0,0,0,0,0,0,[[\"22\\\\d{5}\"],[\"900[5-9]\\\\d{3}|9(?:0[1-9]|[89]\\\\d)\\\\d{4}\"]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|(?:80\\\\d|900)\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[[\"2(?:79(?:0[0347-9]|[1-9]\\\\d)|89(?:0[024589]|[1-9]\\\\d))\\\\d{3}|2(?:[1-69]\\\\d|[78][0-8])\\\\d{5}\",[8]],[\"[67]\\\\d{7}\",[8]],[\"800\\\\d{8}|80[01]\\\\d{4}\",[7,11]],[\"900\\\\d{4}(?:\\\\d{4})?\",[7,11]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\",[[\"7215(?:4[2-8]|8[239]|9[056])\\\\d{4}\"],[\"7215(?:1[02]|2\\\\d|5[034679]|8[014-8])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"21\\\\d{6,7}|(?:1(?:[14]\\\\d|[2356])|2[235]|3(?:[13]\\\\d|4)|4[134]|5[1-3])\\\\d{6}\"],[\"9[1-9]\\\\d{7}\",[9]]]],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]],0,0,0,0,0,0,[[\"[23][2-5]\\\\d{6}\",[8]],[\"7[6-9]\\\\d{6}\",[8]],[\"0800\\\\d{4}\",[8]],[\"900\\\\d{6}\",[9]],0,0,0,0,[\"70\\\\d{6}\",[8]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\",[[\"8\\\\d{3}\"]]],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\",[[\"649(?:266|712|9(?:4\\\\d|50))\\\\d{4}\"],[\"649(?:2(?:3[129]|4[1-79])|3\\\\d\\\\d|4[34][1-3])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"649(?:71[01]|966)\\\\d{4}\"]]],\"TD\":[\"235\",\"00|16\",\"(?:22|30|[689]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[236-9]\"]]],0,0,0,0,0,0,[[\"22(?:[37-9]0|5[0-5]|6[89])\\\\d{4}\"],[\"(?:30|[69]\\\\d|77|8[56])\\\\d{6}\"]],\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]],0,0,0,0,0,0,[[\"2(?:2[2-7]|3[23]|4[45]|55|6[67]|77)\\\\d{5}\"],[\"(?:7[0-29]|9[0-36-9])\\\\d{6}\"]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:1[0689]|2\\\\d|3[2-9]|4[2-5]|5[2-6]|7[3-7])\\\\d{6}\",[8]],[\"67(?:1[0-8]|2[4-7])\\\\d{5}|(?:14|6[1-6]|[89]\\\\d)\\\\d{7}\",[9]],[\"(?:001800\\\\d|1800)\\\\d{6}\",[10,13]],[\"1900\\\\d{6}\",[10]],0,0,0,0,[\"6[08]\\\\d{7}\",[9]]]],\"TJ\":[\"992\",\"810\",\"[0-57-9]\\\\d{8}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"44[02-479]|[34]7\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[1245]|3[12])\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,[[\"(?:3(?:1[3-5]|2[245]|3[12]|4[24-7]|5[25]|72)|4(?:46|74|87))\\\\d{6}\"],[\"(?:33[03-9]|4(?:1[18]|4[02-479])|81[1-9])\\\\d{6}|(?:[09]\\\\d|1[0-27-9]|2[0-27]|[34]0|5[05]|7[01578]|8[078])\\\\d{7}\"]],\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7],0,0,0,0,0,0,0,[[\"(?:2[2-4]|[34]\\\\d)\\\\d{2,5}\"],[\"7[2-4]\\\\d{2,5}\"]]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"(?:2[1-5]|3[1-9]|4[1-4])\\\\d{5}\",[7]],[\"7[2-8]\\\\d{6}\",[8]],[\"80\\\\d{5}\",[7]],[\"90\\\\d{5}\",[7]],[\"70\\\\d{5}\",[7]]]],\"TM\":[\"993\",\"810\",\"(?:[1-6]\\\\d|71)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[67]\"],\"8 $1\"]],\"8\",0,0,0,0,0,[[\"(?:1(?:2\\\\d|3[1-9])|2(?:22|4[0-35-8])|3(?:22|4[03-9])|4(?:22|3[128]|4\\\\d|6[15])|5(?:22|5[7-9]|6[014-689]))\\\\d{5}\"],[\"(?:6\\\\d|71)\\\\d{6}\"]],\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]],0,0,0,0,0,0,[[\"81200\\\\d{3}|(?:3[0-2]|7\\\\d)\\\\d{6}\"],[\"3(?:001|[12]40)\\\\d{4}|(?:(?:[259]\\\\d|4[0-8])\\\\d|3(?:1[1-35]|6[0-4]|91))\\\\d{5}\"],[\"8010\\\\d{4}\"],[\"88\\\\d{6}\"],0,0,0,0,0,[\"8[12]10\\\\d{4}\"]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[0-8]|4[0-4]|50|6[09]|7[0-24-69]|8[05])\\\\d{3}\",[5]],[\"(?:5(?:4[0-5]|5[4-6])|6(?:[09]\\\\d|3[02]|8[15-9])|(?:7\\\\d|8[46-9])\\\\d|999)\\\\d{4}\",[7]],[\"0800\\\\d{3}\",[7]],0,0,0,0,0,[\"55[0-37-9]\\\\d{4}\",[7]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|61[06])\",\"5(?:[0-59]|61[06]1)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"(?:2(?:[13][26]|[28][2468]|[45][268]|[67][246])|3(?:[13][28]|[24-6][2468]|[78][02468]|92)|4(?:[16][246]|[23578][2468]|4[26]))\\\\d{7}\",[10]],[\"561(?:011|61\\\\d)\\\\d{4}|5(?:0[15-7]|1[06]|24|[34]\\\\d|5[1-59]|9[46])\\\\d{7}\",[10]],[\"8(?:00\\\\d{7}(?:\\\\d{2,3})?|11\\\\d{7})\",[10,12,13]],[\"(?:8[89]8|900)\\\\d{7}\",[10]],[\"592(?:21[12]|461)\\\\d{4}\",[10]],0,[\"444\\\\d{4}\",[7]],[\"512\\\\d{7}\",[10]],[\"850\\\\d{7}\",[10]]]],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\",[[\"868(?:2(?:01|1[5-9]|[23]\\\\d|4[0-2])|6(?:0[7-9]|1[02-8]|2[1-9]|[3-69]\\\\d|7[0-79])|82[124])\\\\d{4}\"],[\"868(?:(?:2[5-9]|3\\\\d)\\\\d|4(?:3[0-6]|[6-9]\\\\d)|6(?:20|78|8\\\\d)|7(?:0[1-9]|1[02-9]|[2-9]\\\\d))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],[\"868619\\\\d{4}\"]]],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"2[02-9]\\\\d{3}\",[5]],[\"(?:7[01]\\\\d|90)\\\\d{4}\",[6,7]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[2-8]\\\\d|370|55[01]|7[1-9])\\\\d{6}|4(?:(?:0(?:0[1-9]|[2-48]\\\\d)|1[023]\\\\d)\\\\d{4,5}|(?:[239]\\\\d\\\\d|4(?:0[56]|12|49))\\\\d{5})|6(?:[01]\\\\d{7}|4(?:0[56]|12|24|4[09])\\\\d{4,5})|8(?:(?:2(?:3\\\\d|4[0-269]|[578]0|66)|36[24-9]|90\\\\d\\\\d)\\\\d{4}|4(?:0[56]|12|24|4[09])\\\\d{4,5})|(?:2(?:2(?:0\\\\d\\\\d|4(?:0[68]|[249]0|3[0-467]|5[0-25-9]|6[0235689]))|(?:3(?:[09]\\\\d|1[0-4])|(?:4\\\\d|5[0-49]|6[0-29]|7[0-5])\\\\d)\\\\d)|(?:(?:3[2-9]|5[2-8]|6[0-35-79]|8[7-9])\\\\d\\\\d|4(?:2(?:[089]\\\\d|7[1-9])|(?:3[0-4]|[78]\\\\d|9[01])\\\\d))\\\\d)\\\\d{3}\",[8,9]],[\"(?:40001[0-2]|9[0-8]\\\\d{4})\\\\d{3}\",[9]],[\"80[0-79]\\\\d{6}|800\\\\d{5}\",[8,9]],[\"20(?:[013-9]\\\\d\\\\d|2)\\\\d{4}\",[7,9]],[\"99\\\\d{7}\",[9]],0,[\"50[0-46-9]\\\\d{6}\",[9]],0,[\"7010(?:[0-2679]\\\\d|3[0-7]|8[0-5])\\\\d{5}|70\\\\d{8}\",[10,11]]],0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2[2-8]\\\\d{7}\"],[\"(?:6[125-9]|7[13-9])\\\\d{7}\"],[\"80[08]\\\\d{6}\"],[\"90\\\\d{7}\"],0,0,0,0,[\"41\\\\d{7}\"],[\"8(?:40|6[01])\\\\d{6}\"]]],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3[1-8]|4[13-8]|5[1-7]|6[12459])\\\\d{7}\",[9]],[\"790\\\\d{6}|(?:39|50|6[36-8]|7[1-357]|9[1-9])\\\\d{7}\",[9]],[\"800[1-8]\\\\d{5,6}\"],[\"900[239]\\\\d{5,6}\"],0,0,0,0,[\"89[1-579]\\\\d{6}\",[9]]],\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"20(?:(?:240|30[67])\\\\d|6(?:00[0-2]|30[0-4]))\\\\d{3}|(?:20(?:[017]\\\\d|2[5-9]|3[1-4]|5[0-4]|6[15-9])|[34]\\\\d{3})\\\\d{5}\"],[\"72[48]0\\\\d{5}|7(?:[014-8]\\\\d|2[067]|36|9[0189])\\\\d{6}\"],[\"800[1-3]\\\\d{5}\"],[\"90[1-3]\\\\d{6}\"]]],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:3052(?:0[0-8]|[1-9]\\\\d)|5056(?:[0-35-9]\\\\d|4[0-68]))\\\\d{4}|(?:2742|305[3-9]|472[247-9]|505[2-57-9]|983[2-47-9])\\\\d{6}|(?:2(?:0[1-35-9]|1[02-9]|2[03-57-9]|3[1459]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-47-9]|1[02-9]|2[0135-79]|3[0-24679]|4[167]|5[0-2]|6[01349]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[0156]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-8]|3[0-247]|4[0378]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[0168]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-3589]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"305209\\\\d{4}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"0004\\\\d{2,9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[6,7,8,9,10,11,12,13],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[49]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,[[\"(?:1(?:770|9(?:20|[89]7))|(?:2\\\\d|4[2-7])\\\\d\\\\d)\\\\d{4}\",[8]],[\"9[1-9]\\\\d{6}\",[8]],[\"0004\\\\d{2,9}|(?:405|80[05])\\\\d{4}\"],[\"90[0-8]\\\\d{4}\",[7]]],\"00\",\" int. \"],\"UZ\":[\"998\",\"00\",\"(?:20|33|[5-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-9]\"]]],0,0,0,0,0,0,[[\"(?:55\\\\d\\\\d|6(?:1(?:22|3[124]|4[1-4]|5[1-3578]|64)|2(?:22|3[0-57-9]|41)|5(?:22|3[3-7]|5[024-8])|[69]\\\\d\\\\d|7(?:[23]\\\\d|7[69]))|7(?:0(?:5[4-9]|6[0146]|7[124-6]|9[135-8])|[168]\\\\d\\\\d|2(?:22|3[13-57-9]|4[1-3579]|5[14])|3(?:2\\\\d|3[1578]|4[1-35-7]|5[1-57]|61)|4(?:2\\\\d|3[1-579]|7[1-79])|5(?:22|5[1-9]|6[1457])|9(?:22|5[1-9])))\\\\d{5}\"],[\"(?:(?:[25]0|33|8[78]|9[0-57-9])\\\\d{3}|6(?:1(?:2(?:2[01]|98)|35[0-4]|50\\\\d|61[23]|7(?:[01][017]|4\\\\d|55|9[5-9]))|2(?:(?:11|7\\\\d)\\\\d|2(?:[12]1|9[01379])|5(?:[126]\\\\d|3[0-4]))|5(?:19[01]|2(?:27|9[26])|(?:30|59|7\\\\d)\\\\d)|6(?:2(?:1[5-9]|2[0367]|38|41|52|60)|(?:3[79]|9[0-3])\\\\d|4(?:56|83)|7(?:[07]\\\\d|1[017]|3[07]|4[047]|5[057]|67|8[0178]|9[79]))|7(?:2(?:24|3[237]|4[5-9]|7[15-8])|5(?:7[12]|8[0589])|7(?:0\\\\d|[39][07])|9(?:0\\\\d|7[079])))|7(?:[07]\\\\d{3}|2(?:2(?:2[79]|95)|3(?:2[5-9]|6[0-6])|57\\\\d|7(?:0\\\\d|1[17]|2[27]|3[37]|44|5[057]|66|88))|3(?:2(?:1[0-6]|21|3[469]|7[159])|(?:33|9[4-6])\\\\d|5(?:0[0-4]|5[579]|9\\\\d)|7(?:[0-3579]\\\\d|4[0467]|6[67]|8[078]))|4(?:2(?:29|5[0257]|6[0-7]|7[1-57])|5(?:1[0-4]|8\\\\d|9[5-9])|7(?:0\\\\d|1[024589]|2[0-27]|3[0137]|[46][07]|5[01]|7[5-9]|9[079])|9(?:7[015-9]|[89]\\\\d))|5(?:112|2(?:0\\\\d|2[29]|[49]4)|3[1568]\\\\d|52[6-9]|7(?:0[01578]|1[017]|[23]7|4[047]|[5-7]\\\\d|8[78]|9[079]))|9(?:22[128]|3(?:2[0-4]|7\\\\d)|57[02569]|7(?:2[05-9]|3[37]|4\\\\d|60|7[2579]|87|9[07]))))\\\\d{4}\"]]],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11,12],0,0,0,0,0,0,\"06698\",[[\"06698\\\\d{1,6}\",[6,7,8,9,10,11]],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],[\"3[2-8]\\\\d{9,10}\",[11,12]],0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\",[[\"784(?:266|3(?:6[6-9]|7\\\\d|8[0-6])|4(?:38|5[0-36-8]|8[0-8])|5(?:55|7[0-2]|93)|638|784)\\\\d{4}\"],[\"784(?:4(?:3[0-5]|5[45]|89|9[0-8])|5(?:2[6-9]|3[0-4])|720)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"78451[0-2]\\\\d{4}\"]]],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:12|3[457-9]|[467]\\\\d|[58][1-9]|9[1-6])|[4-6]00)\\\\d{7}\"],[\"4(?:1[24-8]|2[246])\\\\d{7}\"],[\"800\\\\d{7}\"],[\"90[01]\\\\d{7}\"],0,0,[\"501\\\\d{7}\"]]],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\",[[\"284(?:229|4(?:22|9[45])|774|8(?:52|6[459]))\\\\d{4}\"],[\"284(?:245|3(?:0[0-3]|4[0-7]|68|9[34])|4(?:4[0-6]|68|9[69])|5(?:4[0-7]|68|9[69]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\",[[\"340(?:2(?:0\\\\d|10|2[06-8]|4[49]|77)|3(?:32|44)|4(?:2[23]|44|7[34]|89)|5(?:1[34]|55)|6(?:2[56]|4[23]|77|9[023])|7(?:1[2-57-9]|2[57]|7\\\\d)|884|998)\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[357-9]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"2(?:0[3-9]|1[0-689]|2[0-25-9]|[38][2-9]|4[2-8]|5[124-9]|6[0-39]|7[0-7]|9[0-4679])\\\\d{7}\",[10]],[\"(?:5(?:2[238]|59)|89[6-9]|99[013-9])\\\\d{6}|(?:3\\\\d|5[1689]|7[06-9]|8[1-8]|9[0-8])\\\\d{7}\",[9]],[\"1800\\\\d{4,6}|12(?:0[13]|28)\\\\d{4}\",[8,9,10]],[\"1900\\\\d{4,6}\",[8,9,10]],0,0,[\"(?:[17]99|80\\\\d)\\\\d{4}|69\\\\d{5,6}\",[7,8]],0,[\"672\\\\d{6}\",[9]]]],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]],0,0,0,0,0,0,[[\"(?:38[0-8]|48[4-9])\\\\d\\\\d|(?:2[02-9]|3[4-7]|88)\\\\d{3}\",[5]],[\"(?:[58]\\\\d|7[013-7])\\\\d{5}\",[7]],[\"81[18]\\\\d\\\\d\",[5]],0,0,0,[\"(?:3[03]|900\\\\d)\\\\d{3}\"],0,[\"9(?:0[1-9]|1[01])\\\\d{4}\",[7]]]],\"WF\":[\"681\",\"00\",\"(?:40|72|8\\\\d{4})\\\\d{4}|[89]\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[47-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]],0,0,0,0,0,0,[[\"72\\\\d{4}\",[6]],[\"(?:72|8[23])\\\\d{4}\",[6]],[\"80[0-5]\\\\d{6}\",[9]],0,0,[\"[48]0\\\\d{4}\",[6]],0,0,[\"9[23]\\\\d{4}\",[6]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"6[1-9]\\\\d{3}|(?:[2-5]|60)\\\\d{4}\",[5,6]],[\"(?:7[1-35-8]|8(?:[3-7]|9\\\\d{3}))\\\\d{5}\",[7,10]],[\"800\\\\d{3}\",[6]]]],\"XK\":[\"383\",\"00\",\"2\\\\d{7,8}|3\\\\d{7,11}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2|39\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7,10})\",\"$1 $2\",[\"3\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"38\\\\d{6,10}|(?:2[89]|39)(?:0\\\\d{5,6}|[1-9]\\\\d{5})\"],[\"4[3-9]\\\\d{6}\",[8]],[\"800\\\\d{5}\",[8]],[\"900\\\\d{5}\",[8]]]],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"78[0-7]\\\\d{4}|17\\\\d{6}|(?:[12][2-68]|3[2358]|4[2-58]|5[2-6]|6[3-58]|7[24-6])\\\\d{5}\",[7,8]],[\"7[01378]\\\\d{7}\",[9]]]],\"YT\":[\"262\",\"00\",\"7093\\\\d{5}|(?:80|9\\\\d)\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"269(?:0[0-467]|15|5[0-4]|6\\\\d|[78]0)\\\\d{4}\"],[\"(?:639(?:0[0-79]|1[019]|[267]\\\\d|3[09]|40|5[05-9]|9[04-79])|7093[5-7])\\\\d{4}\"],[\"80\\\\d{7}\"],0,0,0,0,0,[\"9(?:(?:39|47)8[01]|769\\\\d)\\\\d{4}\"]]],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:0330|4302)|52087)0\\\\d{3}|(?:1[0-8]|2[1-378]|3[1-69]|4\\\\d|5[1346-8])\\\\d{7}\",[9]],[\"(?:1(?:3492[0-25]|4495[0235]|549(?:20|5[01]))|4[34]492[01])\\\\d{3}|8[1-4]\\\\d{3,7}|(?:2[27]|47|54)4950\\\\d{3}|(?:1(?:049[2-4]|9[12]\\\\d\\\\d)|(?:50[0-2]|6\\\\d\\\\d|7(?:[0-46-9]\\\\d|5[0-4]))\\\\d\\\\d|8(?:5\\\\d{3}|7(?:08[67]|158|28[5-9]|310)))\\\\d{4}|(?:1[6-8]|28|3[2-69]|4[025689]|5[36-8])4920\\\\d{3}|(?:12|[2-5]1)492\\\\d{4}\",[5,6,7,8,9]],[\"80\\\\d{7}\",[9]],[\"(?:86[2-9]|9[0-2]\\\\d)\\\\d{6}\",[9]],0,0,[\"861\\\\d{6,7}\",[9,10]],0,[\"87(?:08[0-589]|15[0-79]|28[0-4]|31[1-9])\\\\d{4}|87(?:[02][0-79]|1[0-46-9]|3[02-9]|[4-9]\\\\d)\\\\d{5}\",[9]],[\"860\\\\d{6}\",[9]]]],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|[579]\\\\d|63)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[579]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"21[1-8]\\\\d{6}\"],[\"(?:[59][5-8]|7[5-9])\\\\d{7}\"],[\"800\\\\d{6}\"],0,0,0,0,0,[\"63\\\\d{7}\"]]],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:3\\\\d|9)\\\\d|[4-8])|2(?:(?:(?:0(?:2[014]|5)|(?:2[0157]|31|84|9)\\\\d\\\\d|[56](?:[14]\\\\d\\\\d|20)|7(?:[089]|2[03]|[35]\\\\d\\\\d))\\\\d|4(?:2\\\\d\\\\d|8))\\\\d|1(?:2|[39]\\\\d{4}))|3(?:(?:123|(?:29\\\\d|92)\\\\d)\\\\d\\\\d|7(?:[19]|[56]\\\\d))|5(?:0|1[2-478]|26|[37]2|4(?:2\\\\d{3}|83)|5(?:25\\\\d\\\\d|[78])|[689]\\\\d)|6(?:(?:[16-8]21|28|52[013])\\\\d\\\\d|[39])|8(?:[1349]28|523)\\\\d\\\\d)\\\\d{3}|(?:4\\\\d\\\\d|9[2-9])\\\\d{4,5}|(?:(?:2(?:(?:(?:0|8[146])\\\\d|7[1-7])\\\\d|2(?:[278]\\\\d|92)|58(?:2\\\\d|3))|3(?:[26]|9\\\\d{3})|5(?:4\\\\d|5)\\\\d\\\\d)\\\\d|6(?:(?:(?:[0-246]|[78]\\\\d)\\\\d|37)\\\\d|5[2-8]))\\\\d\\\\d|(?:2(?:[569]\\\\d|8[2-57-9])|3(?:[013-59]\\\\d|8[37])|6[89]8)\\\\d{3}\"],[\"7(?:[1278]\\\\d|3[1-9])\\\\d{6}\",[9]],[\"80(?:[01]\\\\d|20|8[0-8])\\\\d{3}\",[7]],0,0,0,0,0,[\"86(?:1[12]|22|30|44|55|77|8[368])\\\\d{6}\",[10]]]]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[235-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"],0,0,0,0,0,0,[\"2\\\\d{8}\",[9]]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"6\\\\d{9}|[0-36-9]\\\\d{8}\",[9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-37-9]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{5,6})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[0,[\"6\\\\d{9}|[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,[\"348[57]\\\\d{7}\",[11]],0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[0-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}"],"names":[],"mappings":"AAAA,gEAAgE;AAChE,uEAAuE;AACvE,iEAAiE;;;;uCAClD;IAAC,WAAU;IAAE,yBAAwB;QAAC,KAAI;YAAC;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;YAAK;SAAK;QAAC,KAAI;YAAC;YAAK;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;YAAK;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;YAAK;YAAK;YAAK;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;YAAK;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;YAAK;YAAK;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,MAAK;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;YAAK;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;YAAK;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;YAAK;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;YAAK;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;YAAK;YAAK;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;YAAK;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;SAAK;QAAC,OAAM;YAAC;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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17141, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/max/exports/withMetadataArgument.js"],"sourcesContent":["// Importing from a \".js\" file is a workaround for Node.js \"ES Modules\"\r\n// importing system which is even uncapable of importing \"*.json\" files.\r\nimport metadata from '../../metadata.max.json.js'\r\n\r\nexport default function withMetadataArgument(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}"],"names":[],"mappings":"AAAA,uEAAuE;AACvE,wEAAwE;;;;AACxE;;AAEe,SAAS,qBAAqB,IAAI,EAAE,UAAU;IAC5D,IAAI,OAAO,MAAM,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;IACtC,KAAK,IAAI,CAAC,iKAAA,CAAA,UAAQ;IAClB,OAAO,KAAK,KAAK,CAAC,IAAI,EAAE;AACzB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17157, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/constants.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/constants.js"],"sourcesContent":["// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')"],"names":["MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","DASHES","SLASHES","DOTS","WHITESPACE","BRACKETS","TILDES","VALID_PUNCTUATION","PLUS_CHARS"],"mappings":"AAAA,yDAAA;;;;;;;;;;AACO,IAAMA,kBAAkB,GAAG,CAA3B,C,CAEP,gDAAA;AAEO,IAAMC,kBAAkB,GAAG,EAA3B,C,CAEP,kDAAA;AACO,IAAMC,uBAAuB,GAAG,CAAhC,C,CAEP,mCAAA;AAEO,IAAMC,YAAY,GAAG,4CAArB,C,CAEP,mFAAA;AACA,IAAMC,MAAM,GAAG,kCAAf;AACA,IAAMC,OAAO,GAAG,SAAhB;AACA,IAAMC,IAAI,GAAG,SAAb;AACO,IAAMC,UAAU,GAAG,6BAAnB;AACP,IAAMC,QAAQ,GAAG,kCAAjB,C,CACA,sDAAA;AACA,IAAMC,MAAM,GAAG,qBAAf,C,CAEA,4EAAA;AAIO,IAAMC,iBAAiB,GAAA,GAAA,MAAA,CAAMN,MAAN,EAAA,MAAA,CAAeC,OAAf,EAAA,MAAA,CAAyBC,IAAzB,EAAA,MAAA,CAAgCC,UAAhC,EAAA,MAAA,CAA6CC,QAA7C,EAAA,MAAA,CAAwDC,MAAxD,CAAvB;AAEA,IAAME,UAAU,GAAG,SAAnB,C,CACP,0EAAA","debugId":null}},
    {"offset": {"line": 17184, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/ParseError.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/ParseError.js"],"sourcesContent":["// https://stackoverflow.com/a/46971044/970769\r\n// \"Breaking changes in Typescript 2.1\"\r\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\r\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\r\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\nexport default class ParseError extends Error {\r\n  constructor(code) {\r\n    super(code)\r\n    // Set the prototype explicitly.\r\n    // Any subclass of FooError will have to manually set the prototype as well.\r\n    Object.setPrototypeOf(this, ParseError.prototype)\r\n    this.name = this.constructor.name\r\n  }\r\n}"],"names":["ParseError","code","Object","setPrototypeOf","prototype","name","constructor","Error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8CAAA;AACA,uCAAA;AACA,uEAAA;AACA,uGAAA;AACA,6IAAA;IACqBA,U,G,W,G,S,M;;;IACnB,SAAA,WAAYC,IAAZ,EAAkB;QAAA,IAAA;QAAA,gBAAA,IAAA,EAAA;QAChB,QAAA,OAAA,IAAA,CAAA,IAAA,EAAMA,IAAN,EADgB,CAEhB,gCAAA;QACA,4EAAA;QACAC,MAAM,CAACC,cAAP,CAAA,uBAAA,QAA4BH,UAAU,CAACI,SAAvC;QACA,MAAKC,IAAL,GAAY,MAAKC,WAAL,CAAiBD,IAA7B;QALgB,OAAA;IAMjB;;iCAPqCE,K","debugId":null}},
    {"offset": {"line": 17355, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/tools/semver-compare.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/tools/semver-compare.js"],"sourcesContent":["// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\n//\r\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\r\nexport default function(a, b) {\r\n    a = a.split('-')\r\n    b = b.split('-')\r\n    var pa = a[0].split('.')\r\n    var pb = b[0].split('.')\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i])\r\n        var nb = Number(pb[i])\r\n        if (na > nb) return 1\r\n        if (nb > na) return -1\r\n        if (!isNaN(na) && isNaN(nb)) return 1\r\n        if (isNaN(na) && !isNaN(nb)) return -1\r\n    }\r\n    if (a[1] && b[1]) {\r\n        return a[1] > b[1] ? 1 : (a[1] < b[1] ? -1 : 0)\r\n    }\r\n    return !a[1] && b[1] ? 1 : (a[1] && !b[1] ? -1 : 0)\r\n}"],"names":["a","b","split","pa","pb","i","na","Number","nb","isNaN"],"mappings":"AAAA,oBAAA;AACA,kEAAA;AACA,EAAA;AACA,iEAAA;AACA,0EAAA;AACA,EAAA;AACA,wFAAA;AACA,iEAAA;;;;AACe,wCAASA,CAAT,EAAYC,CAAZ,EAAe;IAC1BD,CAAC,GAAGA,CAAC,CAACE,KAAF,CAAQ,GAAR,CAAJ;IACAD,CAAC,GAAGA,CAAC,CAACC,KAAF,CAAQ,GAAR,CAAJ;IACA,IAAIC,EAAE,GAAGH,CAAC,CAAC,CAAD,CAAD,CAAKE,KAAL,CAAW,GAAX,CAAT;IACA,IAAIE,EAAE,GAAGH,CAAC,CAAC,CAAD,CAAD,CAAKC,KAAL,CAAW,GAAX,CAAT;IACA,IAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,CAA4B;QACxB,IAAIC,EAAE,GAAGC,MAAM,CAACJ,EAAE,CAACE,CAAD,CAAH,CAAf;QACA,IAAIG,EAAE,GAAGD,MAAM,CAACH,EAAE,CAACC,CAAD,CAAH,CAAf;QACA,IAAIC,EAAE,GAAGE,EAAT,EAAa,OAAO,CAAP;QACb,IAAIA,EAAE,GAAGF,EAAT,EAAa,OAAO,CAAC,CAAR;QACb,IAAI,CAACG,KAAK,CAACH,EAAD,CAAN,IAAcG,KAAK,CAACD,EAAD,CAAvB,EAA6B,OAAO,CAAP;QAC7B,IAAIC,KAAK,CAACH,EAAD,CAAL,IAAa,CAACG,KAAK,CAACD,EAAD,CAAvB,EAA6B,OAAO,CAAC,CAAR;IAChC;IACD,IAAIR,CAAC,CAAC,CAAD,CAAD,IAAQC,CAAC,CAAC,CAAD,CAAb,EAAkB;QACd,OAAOD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAc,CAAd,GAAmBD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAAR,GAAc,CAAC,CAAf,GAAmB,CAA7C;IACH;IACD,OAAO,CAACD,CAAC,CAAC,CAAD,CAAF,IAASC,CAAC,CAAC,CAAD,CAAV,GAAgB,CAAhB,GAAqBD,CAAC,CAAC,CAAD,CAAD,IAAQ,CAACC,CAAC,CAAC,CAAD,CAAV,GAAgB,CAAC,CAAjB,GAAqB,CAAjD;AACH","debugId":null}},
    {"offset": {"line": 17388, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/isObject.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/isObject.js"],"sourcesContent":["const objectConstructor = {}.constructor;\r\n\r\nexport default function isObject(object) {\r\n  return object !== undefined && object !== null && object.constructor === objectConstructor;\r\n}\r\n"],"names":["objectConstructor","constructor","isObject","object","undefined"],"mappings":";;;AAAA,IAAMA,iBAAiB,GAAG,CAAA,EAAGC,WAA7B;AAEe,SAASC,QAAT,CAAkBC,MAAlB,EAA0B;IACvC,OAAOA,MAAM,KAAKC,SAAX,IAAwBD,MAAM,KAAK,IAAnC,IAA2CA,MAAM,CAACF,WAAP,KAAuBD,iBAAzE;AACD","debugId":null}},
    {"offset": {"line": 17399, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/metadata.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/metadata.js"],"sourcesContent":["import compare from './tools/semver-compare.js'\r\nimport isObject from './helpers/isObject.js'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\t// The test case could be found by searching for \"nonGeographical\".\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\t// In that metadata, there was no concept of \"non-geographic\" metadata\r\n\t\t\t// so metadata for `001` country code was stored along with other countries.\r\n\t\t\t// The test case can be found by searching for:\r\n\t\t\t// \"should work around `nonGeographic` metadata not existing\".\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// \"possible length\" data is always present in Google's metadata.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to `country_calling_codes` in `1.0.18`.\r\n\t// For that reason, it's not used in this detection algorithm.\r\n\t// Instead, it detects by `countries: {}` property existence.\r\n\tif (!isObject(metadata) || !isObject(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${isObject(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + typeOf(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst typeOf = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries.hasOwnProperty(country)\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }"],"names":["compare","isObject","V2","V3","V4","DEFAULT_EXT_PREFIX","CALLING_CODE_REG_EXP","Metadata","metadata","validateMetadata","setVersion","call","Object","keys","countries","filter","_","countryCode","v1","v2","v3","nonGeographic","nonGeographical","country","getCountryMetadata","undefined","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","length","selectNumberingPlan","test","hasCountry","Error","numberingPlan","NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","type","ext","country_phone_code_to_countries","country_calling_codes","globalMetadataObject","_getFormats","getDefaultCountryMetadataForRegion","map","Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","getType","Type","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","FIRST_GROUP_ONLY_PREFIX_PATTERN","join","typeOf","getExtPrefix","getCountryCallingCode","countryCallingCode","isSupportedCountry","hasOwnProperty","version","v4"],"mappings":";;;;;;;AAAA,OAAOA,OAAP,MAAoB,2BAApB;AACA,OAAOC,QAAP,MAAqB,uBAArB,C,oPAEA,sCAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,gEAAA;AACA,IAAMC,EAAE,GAAG,QAAX,C,CAEA,+CAAA;AACA,IAAMC,EAAE,GAAG,OAAX,C,CAEA,mEAAA;AACA,IAAMC,EAAE,GAAG,QAAX;AAEA,IAAMC,kBAAkB,GAAG,QAA3B;AAEA,IAAMC,oBAAoB,GAAG,OAA7B;AAEA;;CAEA,OACqBC,Q,G,W,G;IACpB,SAAA,SAAYC,QAAZ,EAAsB;QAAA,gBAAA,IAAA,EAAA;QACrBC,gBAAgB,CAACD,QAAD,CAAhB;QACA,IAAA,CAAKA,QAAL,GAAgBA,QAAhB;QACAE,UAAU,CAACC,IAAX,CAAgB,IAAhB,EAAsBH,QAAtB;IACA;;;;mBAED,SAAA,eAAe;gBACd,OAAOI,MAAM,CAACC,IAAP,CAAY,IAAA,CAAKL,QAAL,CAAcM,SAA1B,EAAqCC,MAArC,CAA4C,SAAAC,CAAC;oBAAA,OAAIA,CAAC,KAAK,KAAV;gBAAA,CAA7C,CAAP;YACA;;;;mBAED,SAAA,mBAAmBC,WAAnB,EAAgC;gBAC/B,OAAO,IAAA,CAAKT,QAAL,CAAcM,SAAd,CAAwBG,WAAxB,CAAP;YACA;;;;mBAED,SAAA,gBAAgB;gBACf,IAAI,IAAA,CAAKC,EAAL,IAAW,IAAA,CAAKC,EAAhB,IAAsB,IAAA,CAAKC,EAA/B,EAAmC,OADpB,CAEf,gCAAA;gBACA,gEAAA;gBACA,mEAAA;gBACA,OAAO,IAAA,CAAKZ,QAAL,CAAca,aAAd,IAA+B,IAAA,CAAKb,QAAL,CAAcc,eAApD;YACA;;;;mBAED,SAAA,WAAWC,OAAX,EAAoB;gBACnB,OAAO,IAAA,CAAKC,kBAAL,CAAwBD,OAAxB,MAAqCE,SAA5C;YACA;;;;mBAED,SAAA,eAAeC,WAAf,EAA4B;gBAC3B,IAAI,IAAA,CAAKC,6BAAL,CAAmCD,WAAnC,CAAJ,EAAqD;oBACpD,OAAO,IAAP;gBACA;gBACD,IAAI,IAAA,CAAKL,aAAL,EAAJ,EAA0B;oBACzB,IAAI,IAAA,CAAKA,aAAL,EAAA,CAAqBK,WAArB,CAAJ,EAAuC;wBACtC,OAAO,IAAP;oBACA;gBACD,CAJD,MAIO;oBACN,oEAAA;oBACA,IAAME,YAAY,GAAG,IAAA,CAAKC,mBAAL,EAAA,CAA2BH,WAA3B,CAArB;oBACA,IAAIE,YAAY,IAAIA,YAAY,CAACE,MAAb,KAAwB,CAAxC,IAA6CF,YAAY,CAAC,CAAD,CAAZ,KAAoB,KAArE,EAA4E;wBAC3E,OAAO,IAAP;oBACA;gBACD;YACD;;;;mBAED,SAAA,2BAA2BF,WAA3B,EAAwC;gBACvC,IAAI,IAAA,CAAKL,aAAL,EAAJ,EAA0B;oBACzB,OAAO,IAAA,CAAKA,aAAL,EAAA,CAAqBK,WAArB,CAAA,GAAoC,IAApC,GAA2C,KAAlD;gBACA,CAFD,MAEO;oBACN,OAAO,IAAA,CAAKC,6BAAL,CAAmCD,WAAnC,IAAkD,KAAlD,GAA0D,IAAjE;gBACA;YACD,C,CAED,cAAA;;;;mBACA,SAAA,QAAQT,WAAR,EAAqB;gBACpB,OAAO,IAAA,CAAKc,mBAAL,CAAyBd,WAAzB,CAAP;YACA;;;;mBAED,SAAA,oBAAoBA,WAApB,EAAiCS,WAAjC,EAA8C;gBAC7C,6DAAA;gBACA,IAAIT,WAAW,IAAIX,oBAAoB,CAAC0B,IAArB,CAA0Bf,WAA1B,CAAnB,EAA2D;oBAC1DS,WAAW,GAAGT,WAAd;oBACAA,WAAW,GAAG,IAAd;gBACA;gBACD,IAAIA,WAAW,IAAIA,WAAW,KAAK,KAAnC,EAA0C;oBACzC,IAAI,CAAC,IAAA,CAAKgB,UAAL,CAAgBhB,WAAhB,CAAL,EAAmC;wBAClC,MAAM,IAAIiB,KAAJ,CAAA,oBAAA,MAAA,CAA8BjB,WAA9B,EAAN;oBACA;oBACD,IAAA,CAAKkB,aAAL,GAAqB,IAAIC,aAAJ,CAAkB,IAAA,CAAKZ,kBAAL,CAAwBP,WAAxB,CAAlB,EAAwD,IAAxD,CAArB;gBACA,CALD,MAKO,IAAIS,WAAJ,EAAiB;oBACvB,IAAI,CAAC,IAAA,CAAKW,cAAL,CAAoBX,WAApB,CAAL,EAAuC;wBACtC,MAAM,IAAIQ,KAAJ,CAAA,yBAAA,MAAA,CAAmCR,WAAnC,EAAN;oBACA;oBACD,IAAA,CAAKS,aAAL,GAAqB,IAAIC,aAAJ,CAAkB,IAAA,CAAKE,wBAAL,CAA8BZ,WAA9B,CAAlB,EAA8D,IAA9D,CAArB;gBACA,CALM,MAKA;oBACN,IAAA,CAAKS,aAAL,GAAqBV,SAArB;gBACA;gBACD,OAAO,IAAP;YACA;;;;mBAED,SAAA,8BAA8BC,WAA9B,EAA2C;gBAC1C,IAAME,YAAY,GAAG,IAAA,CAAKC,mBAAL,EAAA,CAA2BH,WAA3B,CAArB;gBACA,IAAIE,YAAJ,EAAkB;oBACjB,oEAAA;oBACA,iEAAA;oBACA,4DAAA;oBACA,yCAAA;oBACA,6DAAA;oBACA,0DAAA;oBACA,8CAAA;oBACA,2CAAA;oBACA,uDAAA;oBACA,IAAIA,YAAY,CAACE,MAAb,KAAwB,CAAxB,IAA6BF,YAAY,CAAC,CAAD,CAAZ,CAAgBE,MAAhB,KAA2B,CAA5D,EAA+D;wBAC9D;oBACA;oBACD,OAAOF,YAAP;gBACA;YACD;;;;mBAED,SAAA,6BAA6BF,WAA7B,EAA0C;gBACzC,IAAME,YAAY,GAAG,IAAA,CAAKD,6BAAL,CAAmCD,WAAnC,CAArB;gBACA,IAAIE,YAAJ,EAAkB;oBACjB,OAAOA,YAAY,CAAC,CAAD,CAAnB;gBACA;YACD;;;;mBAED,SAAA,yBAAyBF,WAAzB,EAAsC;gBACrC,IAAMT,WAAW,GAAG,IAAA,CAAKsB,4BAAL,CAAkCb,WAAlC,CAApB;gBACA,IAAIT,WAAJ,EAAiB;oBAChB,OAAO,IAAA,CAAKO,kBAAL,CAAwBP,WAAxB,CAAP;gBACA;gBACD,IAAI,IAAA,CAAKI,aAAL,EAAJ,EAA0B;oBACzB,IAAMb,QAAQ,GAAG,IAAA,CAAKa,aAAL,EAAA,CAAqBK,WAArB,CAAjB;oBACA,IAAIlB,QAAJ,EAAc;wBACb,OAAOA,QAAP;oBACA;gBACD,CALD,MAKO;oBACN,oEAAA;oBACA,sEAAA;oBACA,4EAAA;oBACA,+CAAA;oBACA,8DAAA;oBACA,IAAMoB,YAAY,GAAG,IAAA,CAAKC,mBAAL,EAAA,CAA2BH,WAA3B,CAArB;oBACA,IAAIE,YAAY,IAAIA,YAAY,CAACE,MAAb,KAAwB,CAAxC,IAA6CF,YAAY,CAAC,CAAD,CAAZ,KAAoB,KAArE,EAA4E;wBAC3E,OAAO,IAAA,CAAKpB,QAAL,CAAcM,SAAd,CAAwB,KAAxB,CAAP;oBACA;gBACD;YACD,C,CAED,cAAA;;;;mBACA,SAAA,qBAAqB;gBACpB,OAAO,IAAA,CAAKqB,aAAL,CAAmBT,WAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,YAAY;gBACX,OAAO,IAAA,CAAKS,aAAL,CAAmBK,SAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,mBAAmB;gBAClB,OAAO,IAAA,CAAKL,aAAL,CAAmBM,gBAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,wBAAwB;gBACvB,OAAO,IAAA,CAAKN,aAAL,CAAmBO,qBAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,kBAAkB;gBACjB,OAAO,IAAA,CAAKP,aAAL,CAAmBQ,eAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,UAAU;gBACT,OAAO,IAAA,CAAKR,aAAL,CAAmBS,OAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,2BAA2B;gBAC1B,OAAO,IAAA,CAAKT,aAAL,CAAmBU,wBAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,8BAA8B;gBAC7B,OAAO,IAAA,CAAKV,aAAL,CAAmBW,2BAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,gBAAgB;gBACf,OAAO,IAAA,CAAKX,aAAL,CAAmBY,aAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,WAAW;gBACV,OAAO,IAAA,CAAKZ,aAAL,CAAmBa,QAAnB,EAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,KAAKC,KAAL,EAAW;gBACV,OAAO,IAAA,CAAKd,aAAL,CAAmBc,IAAnB,CAAwBA,KAAxB,CAAP;YACA,C,CAED,cAAA;;;;mBACA,SAAA,MAAM;gBACL,OAAO,IAAA,CAAKd,aAAL,CAAmBe,GAAnB,EAAP;YACA;;;;mBAED,SAAA,sBAAsB;gBACrB,IAAI,IAAA,CAAKhC,EAAT,EAAa,OAAO,IAAA,CAAKV,QAAL,CAAc2C,+BAArB;gBACb,OAAO,IAAA,CAAK3C,QAAL,CAAc4C,qBAArB;YACA,C,CAED,cAAA;;;;mBACA,SAAA,kCAAkC1B,WAAlC,EAA+C;gBAC9C,OAAO,IAAA,CAAKK,mBAAL,CAAyBL,WAAzB,CAAP;YACA;;;;mBAED,SAAA,2BAA2B;gBAC1B,OAAO,IAAA,CAAKS,aAAL,KAAuBV,SAA9B;YACA;;;;;;IAGIW,a,G,W,G;IACL,SAAA,cAAY5B,QAAZ,EAAsB6C,oBAAtB,EAA4C;QAAA,gBAAA,IAAA,EAAA;QAC3C,IAAA,CAAKA,oBAAL,GAA4BA,oBAA5B;QACA,IAAA,CAAK7C,QAAL,GAAgBA,QAAhB;QACAE,UAAU,CAACC,IAAX,CAAgB,IAAhB,EAAsB0C,oBAAoB,CAAC7C,QAA3C;IACA;;;;mBAED,SAAA,cAAc;gBACb,OAAO,IAAA,CAAKA,QAAL,CAAc,CAAd,CAAP;YACA,C,CAED,iDAAA;;;;mBAMA,SAAA,qCAAqC;gBACpC,OAAO,IAAA,CAAK6C,oBAAL,CAA0Bf,wBAA1B,CAAmD,IAAA,CAAKZ,WAAL,EAAnD,CAAP;YACA,C,CAED,qBAAA;;;;mBACA,SAAA,YAAY;gBACX,IAAI,IAAA,CAAKR,EAAL,IAAW,IAAA,CAAKC,EAApB,EAAwB;gBACxB,OAAO,IAAA,CAAKX,QAAL,CAAc,CAAd,CAAP;YACA,C,CAED,iEAAA;;;;mBACA,SAAA,mBAAmB;gBAClB,IAAI,IAAA,CAAKU,EAAL,IAAW,IAAA,CAAKC,EAApB,EAAwB;gBACxB,OAAO,IAAA,CAAKX,QAAL,CAAc,EAAd,CAAP;YACA;;;;mBAED,SAAA,wBAAwB;gBACvB,IAAI,IAAA,CAAKU,EAAL,IAAW,IAAA,CAAKC,EAApB,EAAwB,OAAO,IAAA,CAAKX,QAAL,CAAc,CAAd,CAAP;gBACxB,OAAO,IAAA,CAAKA,QAAL,CAAc,CAAd,CAAP;YACA,C,CAED,iEAAA;;;;mBACA,SAAA,kBAAkB;gBACjB,IAAI,IAAA,CAAKU,EAAT,EAAa;gBACb,OAAO,IAAA,CAAKV,QAAL,CAAc,IAAA,CAAKW,EAAL,GAAU,CAAV,GAAc,CAA5B,CAAP;YACA;;;;mBAED,SAAA,YAAYX,QAAZ,EAAsB;gBACrB,OAAOA,QAAQ,CAAC,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA7B,CAAf;YACA,C,CAED,gDAAA;;;;mBAGA,SAAA,UAAU;gBAAA,IAAA,QAAA,IAAA;gBACT,IAAMyB,OAAO,GAAG,IAAA,CAAKU,WAAL,CAAiB,IAAA,CAAK9C,QAAtB,KAAmC,IAAA,CAAK8C,WAAL,CAAiB,IAAA,CAAKC,kCAAL,EAAjB,CAAnC,IAAkG,EAAlH;gBACA,OAAOX,OAAO,CAACY,GAAR,CAAY,SAAAxC,CAAC;oBAAA,OAAI,IAAIyC,MAAJ,CAAWzC,CAAX,EAAc,KAAd,CAAJ;gBAAA,CAAb,CAAP;YACA;;;;mBAED,SAAA,iBAAiB;gBAChB,OAAO,IAAA,CAAKR,QAAL,CAAc,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA1C,CAAP;YACA;;;;mBAED,SAAA,iCAAiCX,QAAjC,EAA2C;gBAC1C,OAAOA,QAAQ,CAAC,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA7B,CAAf;YACA,C,CAED,gDAAA;;;;mBAGA,SAAA,+BAA+B;gBAC9B,OAAO,IAAA,CAAKuC,gCAAL,CAAsC,IAAA,CAAKlD,QAA3C,KAAwD,IAAA,CAAKkD,gCAAL,CAAsC,IAAA,CAAKH,kCAAL,EAAtC,CAA/D;YACA;;;;mBAED,SAAA,4BAA4B;gBAC3B,OAAO,IAAA,CAAK/C,QAAL,CAAc,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA1C,CAAP;YACA;;;;mBAED,SAAA,2BAA2B;gBAC1B,0DAAA;gBACA,gDAAA;gBACA,OAAO,IAAA,CAAKwC,yBAAL,MAAoC,IAAA,CAAKC,cAAL,EAA3C;YACA;;;;mBAED,SAAA,8BAA8B;gBAC7B,OAAO,IAAA,CAAKpD,QAAL,CAAc,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA1C,CAAP;YACA;;;;mBAED,SAAA,6CAA6C;gBAC5C,OAAO,CAAC,CAAC,IAAA,CAAKX,QAAL,CAAc,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,CAA1C,CAAT;YACA,C,CAED,gDAAA;;;;mBAIA,SAAA,yDAAyD;gBACxD,OAAO,IAAA,CAAK0C,0CAAL,CAAgD,IAAA,CAAKrD,QAArD,KACN,IAAA,CAAKqD,0CAAL,CAAgD,IAAA,CAAKN,kCAAL,EAAhD,CADD;YAEA;;;;mBAED,SAAA,gBAAgB;gBACf,OAAO,IAAA,CAAK/C,QAAL,CAAc,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,CAAV,GAAc,EAA1C,CAAP;YACA;;;;mBAED,SAAA,QAAQ;gBACP,OAAO,IAAA,CAAKX,QAAL,CAAc,IAAA,CAAKU,EAAL,GAAU,CAAV,GAAc,IAAA,CAAKC,EAAL,GAAU,EAAV,GAAe,EAA3C,CAAP;YACA;;;;mBAED,SAAA,WAAW;gBACV,uCAAA;gBACA,wBAAA,GACA,IAAI,IAAA,CAAK2C,KAAL,MAAgB,IAAA,CAAKA,KAAL,GAAahC,MAAb,KAAwB,CAA5C,EAA+C;oBAC9C,OAAO,KAAP;gBACA,CALS,CAMV,yCAAA;gBACA,gCAAA;gBACA,OAAO,CAAC,CAAC,IAAA,CAAKgC,KAAL,EAAT;YACA;;;;mBAED,SAAA,KAAKb,MAAL,EAAW;gBACV,IAAI,IAAA,CAAKD,QAAL,MAAmBe,OAAO,CAAC,IAAA,CAAKD,KAAL,EAAD,EAAeb,MAAf,CAA9B,EAAoD;oBACnD,OAAO,IAAIe,IAAJ,CAASD,OAAO,CAAC,IAAA,CAAKD,KAAL,EAAD,EAAeb,MAAf,CAAhB,EAAsC,IAAtC,CAAP;gBACA;YACD;;;;mBAED,SAAA,MAAM;gBACL,IAAI,IAAA,CAAK/B,EAAL,IAAW,IAAA,CAAKC,EAApB,EAAwB,OAAOd,kBAAP;gBACxB,OAAO,IAAA,CAAKG,QAAL,CAAc,EAAd,CAAA,IAAqBH,kBAA5B;YACA;;;;;IAGIoD,M,G,W,G;IACL,SAAA,OAAYQ,MAAZ,EAAoBzD,QAApB,EAA8B;QAAA,gBAAA,IAAA,EAAA;QAC7B,IAAA,CAAK0D,OAAL,GAAeD,MAAf;QACA,IAAA,CAAKzD,QAAL,GAAgBA,QAAhB;IACA;;;;mBAED,SAAA,UAAU;gBACT,OAAO,IAAA,CAAK0D,OAAL,CAAa,CAAb,CAAP;YACA;;;;mBAED,SAAA,SAAS;gBACR,OAAO,IAAA,CAAKA,OAAL,CAAa,CAAb,CAAP;YACA;;;;mBAED,SAAA,wBAAwB;gBACvB,OAAO,IAAA,CAAKA,OAAL,CAAa,CAAb,CAAA,IAAmB,EAA1B;YACA;;;;mBAED,SAAA,+BAA+B;gBAC9B,OAAO,IAAA,CAAKA,OAAL,CAAa,CAAb,CAAA,IAAmB,IAAA,CAAK1D,QAAL,CAAc2D,4BAAd,EAA1B;YACA;;;;mBAED,SAAA,yDAAyD;gBACxD,OAAO,CAAC,CAAC,IAAA,CAAKD,OAAL,CAAa,CAAb,CAAF,IAAqB,IAAA,CAAK1D,QAAL,CAAc4D,sDAAd,EAA5B;YACA;;;;mBAED,SAAA,0DAA0D;gBACzD,2EAAA;gBACA,oEAAA;gBACA,mEAAA;gBACA,2DAAA;gBACA,sCAAA;gBACA,OAAO,IAAA,CAAKC,kBAAL,MAA6B,CAAC,IAAA,CAAKD,sDAAL,EAArC;YACA,C,CAED,2EAAA;;;;mBACA,SAAA,qBAAqB;gBACpB,OAAO,IAAA,CAAKD,4BAAL,MACN,mEAAA;gBACA,CAACG,+BAA+B,CAACtC,IAAhC,CAAqC,IAAA,CAAKmC,4BAAL,EAArC,CAFK,CAGN,uEAAA;mBAIE,IAPI,GAQJ,KARH;YASA;;;;mBAED,SAAA,sBAAsB;gBACrB,OAAO,IAAA,CAAKD,OAAL,CAAa,CAAb,CAAA,IAAmB,IAAA,CAAKD,MAAL,EAA1B;YACA;;;;;AAGF;;;;CAIA,GACA,IAAMK,+BAA+B,GAAG,aAAxC;IAEMN,I,G,W,G;IACL,SAAA,KAAYf,IAAZ,EAAkBzC,QAAlB,EAA4B;QAAA,gBAAA,IAAA,EAAA;QAC3B,IAAA,CAAKyC,IAAL,GAAYA,IAAZ;QACA,IAAA,CAAKzC,QAAL,GAAgBA,QAAhB;IACA;;;;mBAED,SAAA,UAAU;gBACT,IAAI,IAAA,CAAKA,QAAL,CAAcU,EAAlB,EAAsB,OAAO,IAAA,CAAK+B,IAAZ;gBACtB,OAAO,IAAA,CAAKA,IAAL,CAAU,CAAV,CAAP;YACA;;;;mBAED,SAAA,kBAAkB;gBACjB,IAAI,IAAA,CAAKzC,QAAL,CAAcU,EAAlB,EAAsB;gBACtB,OAAO,IAAA,CAAK+B,IAAL,CAAU,CAAV,CAAA,IAAgB,IAAA,CAAKzC,QAAL,CAAcmC,eAAd,EAAvB;YACA;;;;;AAGF,SAASoB,OAAT,CAAiBD,KAAjB,EAAwBb,IAAxB,EAA8B;IAC7B,OAAQA,IAAR;QACC,KAAK,YAAL;YACC,OAAOa,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,QAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,WAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,cAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,iBAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,WAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,KAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,OAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,MAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;QACD,KAAK,aAAL;YACC,OAAOA,KAAK,CAAC,CAAD,CAAZ;IApBF;AAsBA;AAEM,SAASrD,gBAAT,CAA0BD,QAA1B,EAAoC;IAC1C,IAAI,CAACA,QAAL,EAAe;QACd,MAAM,IAAI0B,KAAJ,CAAU,2EAAV,CAAN;IACA,CAHyC,CAK1C,wFAAA;IACA,8DAAA;IACA,6DAAA;IACA,IAAI,0KAACjC,UAAAA,AAAQ,EAACO,QAAD,CAAT,IAAuB,EAACP,kLAAAA,AAAQ,EAACO,QAAQ,CAACM,SAAV,CAApC,EAA0D;QACzD,MAAM,IAAIoB,KAAJ,CAAA,sJAAA,MAAA,0KAAoKjC,UAAAA,AAAQ,EAACO,QAAD,CAAR,GAAqB,2BAA2BI,MAAM,CAACC,IAAP,CAAYL,QAAZ,EAAsB+D,IAAtB,CAA2B,IAA3B,CAA3B,GAA8D,IAAnF,GAA0F,OAAOC,MAAM,CAAChE,QAAD,CAAb,GAA0B,IAA1B,GAAiCA,QAA/R,EAAA,KAAN;IACA;AACD,C,CAED,iDAAA;AACA,sDAAA;AACA,wBAAA,GACA,IAAMgE,MAAM,GAAG,SAATA,MAAS,CAAAxD,CAAC;IAAA,OAAA,QAAWA,CAAX;AAAA,CAAhB;AAWO,SAASyD,YAAT,CAAsBlD,OAAtB,EAA+Bf,QAA/B,EAAyC;IAC/CA,QAAQ,GAAG,IAAID,QAAJ,CAAaC,QAAb,CAAX;IACA,IAAIA,QAAQ,CAACyB,UAAT,CAAoBV,OAApB,CAAJ,EAAkC;QACjC,OAAOf,QAAQ,CAACe,OAAT,CAAiBA,OAAjB,EAA0B2B,GAA1B,EAAP;IACA;IACD,OAAO7C,kBAAP;AACA;AAYM,SAASqE,qBAAT,CAA+BnD,OAA/B,EAAwCf,QAAxC,EAAkD;IACxDA,QAAQ,GAAG,IAAID,QAAJ,CAAaC,QAAb,CAAX;IACA,IAAIA,QAAQ,CAACyB,UAAT,CAAoBV,OAApB,CAAJ,EAAkC;QACjC,OAAOf,QAAQ,CAACe,OAAT,CAAiBA,OAAjB,EAA0BoD,kBAA1B,EAAP;IACA;IACD,MAAM,IAAIzC,KAAJ,CAAA,oBAAA,MAAA,CAA8BX,OAA9B,EAAN;AACA;AAEM,SAASqD,kBAAT,CAA4BrD,OAA5B,EAAqCf,QAArC,EAA+C;IACrD,oCAAA;IACA,sCAAA;IACA,OAAOA,QAAQ,CAACM,SAAT,CAAmB+D,cAAnB,CAAkCtD,OAAlC,CAAP;AACA;AAED,SAASb,UAAT,CAAoBF,QAApB,EAA8B;IAC7B,IAAQsE,OAAR,GAAoBtE,QAApB,CAAQsE,OAAR;IACA,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;QAChC,IAAA,CAAK5D,EAAL,GAAU4D,OAAO,KAAK,CAAtB;QACA,IAAA,CAAK3D,EAAL,GAAU2D,OAAO,KAAK,CAAtB;QACA,IAAA,CAAK1D,EAAL,GAAU0D,OAAO,KAAK,CAAtB;QACA,IAAA,CAAKC,EAAL,GAAUD,OAAO,KAAK,CAAtB;IACA,CALD,MAKO;QACN,IAAI,CAACA,OAAL,EAAc;YACb,IAAA,CAAK5D,EAAL,GAAU,IAAV;QACA,CAFD,MAEO,oLAAIlB,UAAAA,AAAO,EAAC8E,OAAD,EAAU3E,EAAV,CAAP,KAAyB,CAAC,CAA9B,EAAiC;YACvC,IAAA,CAAKgB,EAAL,GAAU,IAAV;QACA,CAFM,MAEA,oLAAInB,UAAAA,AAAO,EAAC8E,OAAD,EAAU1E,EAAV,CAAP,KAAyB,CAAC,CAA9B,EAAiC;YACvC,IAAA,CAAKgB,EAAL,GAAU,IAAV;QACA,CAFM,MAEA;YACN,IAAA,CAAK2D,EAAL,GAAU,IAAV;QACA;IACD;AACD,C,CAED,wCAAA;CACA,wCAAA;CACA,iEAAA;CACA,IAAA","debugId":null}},
    {"offset": {"line": 18027, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/extension/createExtensionPattern.js"],"sourcesContent":["import { VALID_DIGITS } from '../../constants.js'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\r\nconst getExtensionDigitsPattern = (maxLength) => `([${VALID_DIGITS}]{1,${maxLength}})`\r\n\r\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\r\nexport default function createExtensionPattern(purpose) {\r\n\t// We cap the maximum length of an extension based on the ambiguity of the way\r\n\t// the extension is prefixed. As per ITU, the officially allowed length for\r\n\t// extensions is actually 40, but we don't support this since we haven't seen real\r\n\t// examples and this introduces many false interpretations as the extension labels\r\n\t// are not standardized.\r\n\t/** @type {string} */\r\n\tvar extLimitAfterExplicitLabel = '20';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterLikelyLabel = '15';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterAmbiguousChar = '9';\r\n\t/** @type {string} */\r\n\tvar extLimitWhenNotSure = '6';\r\n\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\u00A0\\\\t,]*\";\r\n\t// Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\r\n\t/** @type {string} */\r\n\tvar possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*\";\r\n\t/** @type {string} */\r\n\tvar optionalExtnSuffix = \"#?\";\r\n\r\n\t// Here the extension is called out in more explicit way, i.e mentioning it obvious\r\n\t// patterns like \"ext.\".\r\n\t/** @type {string} */\r\n\tvar explicitExtLabels =\r\n\t  \"(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\r\n\t// One-character symbols that can be used to indicate an extension, and less\r\n\t// commonly used or more ambiguous extension labels.\r\n\t/** @type {string} */\r\n\tvar ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\r\n\t// When extension is not separated clearly.\r\n\t/** @type {string} */\r\n\tvar ambiguousSeparator = \"[- ]+\";\r\n\t// This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\r\n\t// comma as extension label may have it.\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsNumberExtLabelNoComma = \"[ \\u00A0\\\\t]*\";\r\n\t// \",,\" is commonly used for auto dialling the extension when connected. First\r\n\t// comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\r\n\t// not repeat it here. Semi-colon works in Iphone and Android also to pop up a\r\n\t// button with the extension number following.\r\n\t/** @type {string} */\r\n\tvar autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\r\n\r\n\t/** @type {string} */\r\n\tvar rfcExtn = RFC3966_EXTN_PREFIX\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\r\n\t/** @type {string} */\r\n\tvar explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel)\r\n\t     + optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t+ getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar americanStyleExtnWithSuffix = ambiguousSeparator\r\n\t+ getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\r\n\r\n\t/** @type {string} */\r\n\tvar autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t     + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterLikelyLabel)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t    + \"(?:,)+\" + possibleCharsAfterExtLabel\r\n\t    + getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t    + optionalExtnSuffix;\r\n\r\n\t// The first regular expression covers RFC 3966 format, where the extension is added\r\n\t// using \";ext=\". The second more generic where extension is mentioned with explicit\r\n\t// labels like \"ext:\". In both the above cases we allow more numbers in extension than\r\n\t// any other extension labels. The third one captures when single character extension\r\n\t// labels or less commonly used labels are used. In such cases we capture fewer\r\n\t// extension digits in order to reduce the chance of falsely interpreting two\r\n\t// numbers beside each other as a number + extension. The fourth one covers the\r\n\t// special case of American numbers where the extension is written with a hash\r\n\t// at the end, such as \"- 503#\". The fifth one is exclusively for extension\r\n\t// autodialling formats which are used when dialling and in this case we accept longer\r\n\t// extensions. The last one is more liberal on the number of commas that acts as\r\n\t// extension labels, so we have a strict cap on the number of digits in such extensions.\r\n\treturn rfcExtn + \"|\"\r\n\t       + explicitExtn + \"|\"\r\n\t       + ambiguousExtn + \"|\"\r\n\t       + americanStyleExtnWithSuffix + \"|\"\r\n\t       + autoDiallingExtn + \"|\"\r\n\t       + onlyCommasExtn;\r\n}"],"names":["VALID_DIGITS","RFC3966_EXTN_PREFIX","getExtensionDigitsPattern","maxLength","createExtensionPattern","purpose","extLimitAfterExplicitLabel","extLimitAfterLikelyLabel","extLimitAfterAmbiguousChar","extLimitWhenNotSure","possibleSeparatorsBetweenNumberAndExtLabel","possibleCharsAfterExtLabel","optionalExtnSuffix","explicitExtLabels","ambiguousExtLabels","ambiguousSeparator","possibleSeparatorsNumberExtLabelNoComma","autoDiallingAndExtLabelsFound","rfcExtn","explicitExtn","ambiguousExtn","americanStyleExtnWithSuffix","autoDiallingExtn","onlyCommasExtn"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,oBAA7B,C,8NAEA,sCAAA;;AACA,IAAMC,mBAAmB,GAAG,OAA5B;AAEA;;;;CAIA,GACA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,SAAD;IAAA,OAAA,KAAA,MAAA,4JAAoBH,eAApB,EAAA,QAAA,MAAA,CAAuCG,SAAvC,EAAA;AAAA,CAAlC;AASe,SAASC,sBAAT,CAAgCC,OAAhC,EAAyC;IACvD,8EAAA;IACA,2EAAA;IACA,kFAAA;IACA,kFAAA;IACA,wBAAA;IACA,mBAAA,GACA,IAAIC,0BAA0B,GAAG,IAAjC;IACA,mBAAA,GACA,IAAIC,wBAAwB,GAAG,IAA/B;IACA,mBAAA,GACA,IAAIC,0BAA0B,GAAG,GAAjC;IACA,mBAAA,GACA,IAAIC,mBAAmB,GAAG,GAA1B;IAEA,mBAAA,GACA,IAAIC,0CAA0C,GAAG,cAAjD,CAhBuD,CAiBvD,gFAAA;IACA,mBAAA,GACA,IAAIC,0BAA0B,GAAG,4BAAjC;IACA,mBAAA,GACA,IAAIC,kBAAkB,GAAG,IAAzB,CArBuD,CAuBvD,mFAAA;IACA,wBAAA;IACA,mBAAA,GACA,IAAIC,iBAAiB,GACnB,0FADF,CA1BuD,CA4BvD,4EAAA;IACA,oDAAA;IACA,mBAAA,GACA,IAAIC,kBAAkB,GAAG,oDAAzB,CA/BuD,CAgCvD,2CAAA;IACA,mBAAA,GACA,IAAIC,kBAAkB,GAAG,OAAzB,CAlCuD,CAmCvD,mFAAA;IACA,wCAAA;IACA,mBAAA,GACA,IAAIC,uCAAuC,GAAG,aAA9C,CAtCuD,CAuCvD,8EAAA;IACA,gFAAA;IACA,8EAAA;IACA,8CAAA;IACA,mBAAA,GACA,IAAIC,6BAA6B,GAAG,YAApC;IAEA,mBAAA,GACA,IAAIC,OAAO,GAAGjB,mBAAmB,GAC1BC,yBAAyB,CAACI,0BAAD,CADhC;IAEA,mBAAA,GACA,IAAIa,YAAY,GAAGT,0CAA0C,GAAGG,iBAA7C,GACZF,0BADY,GAEZT,yBAAyB,CAACI,0BAAD,CAFb,GAGZM,kBAHP;IAIA,mBAAA,GACA,IAAIQ,aAAa,GAAGV,0CAA0C,GAAGI,kBAA7C,GACbH,0BADa,GAElBT,yBAAyB,CAACM,0BAAD,CAFP,GAGlBI,kBAHF;IAIA,mBAAA,GACA,IAAIS,2BAA2B,GAAGN,kBAAkB,GAClDb,yBAAyB,CAACO,mBAAD,CADO,GACiB,GADnD;IAGA,mBAAA,GACA,IAAIa,gBAAgB,GAAGN,uCAAuC,GACvDC,6BADgB,GACgBN,0BADhB,GAEhBT,yBAAyB,CAACK,wBAAD,CAFT,GAGrBK,kBAHF;IAIA,mBAAA,GACA,IAAIW,cAAc,GAAGP,uCAAuC,GACtD,QADe,GACJL,0BADI,GAEfT,yBAAyB,CAACM,0BAAD,CAFV,GAGfI,kBAHN,CArEuD,CA0EvD,oFAAA;IACA,oFAAA;IACA,sFAAA;IACA,qFAAA;IACA,+EAAA;IACA,6EAAA;IACA,+EAAA;IACA,8EAAA;IACA,2EAAA;IACA,sFAAA;IACA,gFAAA;IACA,wFAAA;IACA,OAAOM,OAAO,GAAG,GAAV,GACEC,YADF,GACiB,GADjB,GAEEC,aAFF,GAEkB,GAFlB,GAGEC,2BAHF,GAGgC,GAHhC,GAIEC,gBAJF,GAIqB,GAJrB,GAKEC,cALT;AAMA","debugId":null}},
    {"offset": {"line": 18087, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/isViablePhoneNumber.js"],"sourcesContent":["import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from '../constants.js'\r\n\r\nimport createExtensionPattern from './extension/createExtensionPattern.js'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nexport const VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// This regular expression isn't present in Google's `libphonenumber`\r\n// and is only used to determine whether the phone number being input\r\n// is too short for it to even consider it a \"valid\" number.\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nconst VALID_PHONE_NUMBER_START_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){1,2}' +\r\n\t'$'\r\n, 'i')\r\n\r\nexport const VALID_PHONE_NUMBER_WITH_EXTENSION =\r\n\tVALID_PHONE_NUMBER +\r\n\t// Phone number extensions\r\n\t'(?:' + createExtensionPattern() + ')?'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER_WITH_EXTENSION +\r\n\t'$'\r\n, 'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number) {\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nexport function isViablePhoneNumberStart(number) {\r\n\treturn VALID_PHONE_NUMBER_START_REG_EXP.test(number)\r\n}"],"names":["MIN_LENGTH_FOR_NSN","VALID_DIGITS","VALID_PUNCTUATION","PLUS_CHARS","createExtensionPattern","MIN_LENGTH_PHONE_NUMBER_PATTERN","VALID_PHONE_NUMBER","VALID_PHONE_NUMBER_START_REG_EXP","RegExp","VALID_PHONE_NUMBER_WITH_EXTENSION","VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber","number","length","test","isViablePhoneNumberStart"],"mappings":";;;;;;AAAA,SACCA,kBADD,EAECC,YAFD,EAGCC,iBAHD,EAICC,UAJD,QAKO,iBALP;AAOA,OAAOC,sBAAP,MAAmC,uCAAnC,C,yQAEA,6EAAA;;;AACA,6EAAA;AACA,+EAAA;AACA,+EAAA;AACA,2EAAA;AACA,gEAAA;AACA,EAAA;AACA,iCAAA;AACA,2BAAA;AACA,cAAA;AACA,iFAAA;AACA,EAAA;AACA,gFAAA;AACA,8EAAA;AACA,8EAAA;AACA,8EAAA;AACA,4EAAA;AACA,6EAAA;AACA,uCAAA;AACA,EAAA;AACA,4CAAA;AACA,wDAAA;AACA,wDAAA;AACA,EAAA;AACA,IAAMC,+BAA+B,GAAG,iKAAMJ,eAAN,GAAqB,IAArB,8JAA4BD,qBAA5B,GAAiD,GAAzF,C,CACA,EAAA;AAIO,IAAMM,kBAAkB,GAC9B,iKAAMH,aAAN,GAAmB,QAAnB,GACA,KADA,GAEC,GAFD,8JAEOD,oBAFP,GAE2B,IAF3B,GAGC,GAHD,8JAGOD,eAHP,GAGsB,GAHtB,GAIA,OAJA,GAKA,GALA,GAMCC,+KAND,8JAOCD,eAPD,GAQA,IATM,C,CAWP,qEAAA;AACA,qEAAA;AACA,4DAAA;AACA,qEAAA;AACA,oEAAA;AACA,iEAAA;AACA,mEAAA;AACA,mEAAA;AACA,wEAAA;AACA,IAAMM,gCAAgC,GAAG,IAAIC,MAAJ,CACxC,MACA,GADA,8JACML,aADN,GACmB,QADnB,GAEA,KAFA,GAGC,GAHD,8JAGOD,oBAHP,GAG2B,IAH3B,GAIC,GAJD,8JAIOD,eAJP,GAIsB,GAJtB,GAKA,QALA,GAMA,GAPwC,EAQvC,GARuC,CAAzC;AAUO,IAAMQ,iCAAiC,GAC7CH,kBAAkB,GAClB,0BAAA;AACA,KAFA,uMAEQF,UAAAA,AAAsB,EAF9B,IAEmC,IAH7B,C,CAKP,2DAAA;AACA,EAAA;AACA,IAAMM,0BAA0B,GAAG,IAAIF,MAAJ,CAElC,CADA,KAECH,+BADD,GAEA,GAFA,GAGA,GAHA,GAIA,2DAAA;AACA,GALA,GAMCI,iCAND,GAOA,GATkC,EAUjC,GAViC,CAAnC,C,CAYA,gFAAA;AAOe,SAASE,mBAAT,CAA6BC,MAA7B,EAAqC;IACnD,OAAOA,MAAM,CAACC,MAAP,+JAAiBb,qBAAjB,IACNU,0BAA0B,CAACI,IAA3B,CAAgCF,MAAhC,CADD;AAEA,C,CAED,qEAAA;AAMO,SAASG,wBAAT,CAAkCH,MAAlC,EAA0C;IAChD,OAAOL,gCAAgC,CAACO,IAAjC,CAAsCF,MAAtC,CAAP;AACA","debugId":null}},
    {"offset": {"line": 18146, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/extension/extractExtension.js"],"sourcesContent":["import createExtensionPattern from './createExtensionPattern.js'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}"],"names":["createExtensionPattern","EXTN_PATTERN","RegExp","extractExtension","number","start","search","numberWithoutExtension","slice","matches","match","i","length","ext"],"mappings":";;;AAAA,OAAOA,sBAAP,MAAmC,6BAAnC,C,mRAEA,+EAAA;;AACA,gDAAA;AACA,IAAMC,YAAY,GAAG,IAAIC,MAAJ,CAAW,4MAAQF,UAAAA,AAAsB,EAA9B,IAAmC,IAA9C,EAAoD,GAApD,CAArB,C,CAEA,gFAAA;AAGe,SAASG,gBAAT,CAA0BC,MAA1B,EAAkC;IAChD,IAAMC,KAAK,GAAGD,MAAM,CAACE,MAAP,CAAcL,YAAd,CAAd;IACA,IAAII,KAAK,GAAG,CAAZ,EAAe;QACd,OAAO,CAAA,CAAP;IACA,CAJ+C,CAKhD,8EAAA;IACA,wCAAA;IACA,IAAME,sBAAsB,GAAGH,MAAM,CAACI,KAAP,CAAa,CAAb,EAAgBH,KAAhB,CAA/B;IACA,IAAMI,OAAO,GAAGL,MAAM,CAACM,KAAP,CAAaT,YAAb,CAAhB;IACA,IAAIU,CAAC,GAAG,CAAR;IACA,MAAOA,CAAC,GAAGF,OAAO,CAACG,MAAnB,CAA2B;QAC1B,IAAIH,OAAO,CAACE,CAAD,CAAX,EAAgB;YACf,OAAO;gBACNP,MAAM,EAAEG,sBADF;gBAENM,GAAG,EAAEJ,OAAO,CAACE,CAAD,CAAA;YAFN,CAAP;QAIA;QACDA,CAAC;IACD;AACD","debugId":null}},
    {"offset": {"line": 18176, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/parseDigits.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/parseDigits.js"],"sourcesContent":["// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS = {\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character) {\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}"],"names":["DIGITS","parseDigit","character","parseDigits","string","result","split","digit"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMO,IAAMA,MAAM,GAAG;IACrB,KAAK,GADgB;IAErB,KAAK,GAFgB;IAGrB,KAAK,GAHgB;IAIrB,KAAK,GAJgB;IAKrB,KAAK,GALgB;IAMrB,KAAK,GANgB;IAOrB,KAAK,GAPgB;IAQrB,KAAK,GARgB;IASrB,KAAK,GATgB;IAUrB,KAAK,GAVgB;IAWrB,UAAU,GAXW;IAWN,oBAAA;IACf,UAAU,GAZW;IAYN,oBAAA;IACf,UAAU,GAbW;IAaN,oBAAA;IACf,UAAU,GAdW;IAcN,oBAAA;IACf,UAAU,GAfW;IAeN,oBAAA;IACf,UAAU,GAhBW;IAgBN,oBAAA;IACf,UAAU,GAjBW;IAiBN,oBAAA;IACf,UAAU,GAlBW;IAkBN,oBAAA;IACf,UAAU,GAnBW;IAmBN,oBAAA;IACf,UAAU,GApBW;IAoBN,oBAAA;IACf,UAAU,GArBW;IAqBN,uBAAA;IACf,UAAU,GAtBW;IAsBN,uBAAA;IACf,UAAU,GAvBW;IAuBN,uBAAA;IACf,UAAU,GAxBW;IAwBN,uBAAA;IACf,UAAU,GAzBW;IAyBN,uBAAA;IACf,UAAU,GA1BW;IA0BN,uBAAA;IACf,UAAU,GA3BW;IA2BN,uBAAA;IACf,UAAU,GA5BW;IA4BN,uBAAA;IACf,UAAU,GA7BW;IA6BN,uBAAA;IACf,UAAU,GA9BW;IA8BN,uBAAA;IACf,UAAU,GA/BW;IA+BN,yBAAA;IACf,UAAU,GAhCW;IAgCN,yBAAA;IACf,UAAU,GAjCW;IAiCN,yBAAA;IACf,UAAU,GAlCW;IAkCN,yBAAA;IACf,UAAU,GAnCW;IAmCN,yBAAA;IACf,UAAU,GApCW;IAoCN,yBAAA;IACf,UAAU,GArCW;IAqCN,yBAAA;IACf,UAAU,GAtCW;IAsCN,yBAAA;IACf,UAAU,GAvCW;IAuCN,yBAAA;IACf,UAAU,GAxCW,CAwCN,yBAAA;AAxCM,CAAf;AA2CA,SAASC,UAAT,CAAoBC,SAApB,EAA+B;IACrC,OAAOF,MAAM,CAACE,SAAD,CAAb;AACA;AAec,SAASC,WAAT,CAAqBC,MAArB,EAA6B;IAC3C,IAAIC,MAAM,GAAG,EAAb,CAD2C,CAE3C,yDAAA;IACA,kFAAA;IACA,+DAAA;IACA,iDAAA;IACA,2DAAA;IACA,yDAAA;IACA,IAAA,IAAA,YAAA,gCAAwBD,MAAM,CAACE,KAAP,CAAa,EAAb,CAAxB,GAAA,OAAA,CAAA,CAAA,QAAA,WAAA,EAAA,IAAA,EAA0C;QAAA,IAA/BJ,SAA+B,GAAA,MAAA,KAAA;QACzC,IAAMK,KAAK,GAAGN,UAAU,CAACC,SAAD,CAAxB;QACA,IAAIK,KAAJ,EAAW;YACVF,MAAM,IAAIE,KAAV;QACA;IACD;IACD,OAAOF,MAAP;AACA","debugId":null}},
    {"offset": {"line": 18308, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/parseIncompletePhoneNumber.js"],"sourcesContent":["import { parseDigit } from './helpers/parseDigits.js'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {function?} emitEvent - An optional \"emit event\" function.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters, emitEvent) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (prevParsedCharacters) {\r\n\t\t\t// `emitEvent` argument was added to this `export`ed function on Dec 26th, 2023.\r\n\t\t\t// Any 3rd-party code that used to `import` and call this function before that\r\n\t\t\t// won't be passing any `emitEvent` argument.\r\n\t\t\t//\r\n\t\t\t// The addition of the `emitEvent` argument was to fix the slightly-weird behavior\r\n\t\t\t// of parsing an input string when the user inputs something like `\"2+7\"\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/437\r\n\t\t\t//\r\n\t\t\t// If the parser encounters an unexpected `+` in a string being parsed\r\n\t\t\t// then it simply discards that out-of-place `+` and any following characters.\r\n\t\t\t//\r\n\t\t\tif (typeof emitEvent === 'function') {\r\n\t\t\t\temitEvent('end')\r\n\t\t\t}\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}"],"names":["parseDigit","parseIncompletePhoneNumber","string","result","split","character","parsePhoneNumberCharacter","prevParsedCharacters","emitEvent"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,0BAA3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBe,SAASC,0BAAT,CAAoCC,MAApC,EAA4C;IAC1D,IAAIC,MAAM,GAAG,EAAb,CAD0D,CAE1D,yDAAA;IACA,kFAAA;IACA,+DAAA;IACA,iDAAA;IACA,2DAAA;IACA,yDAAA;IACA,IAAA,IAAA,YAAA,gCAAwBD,MAAM,CAACE,KAAP,CAAa,EAAb,CAAxB,GAAA,OAAA,CAAA,CAAA,QAAA,WAAA,EAAA,IAAA,EAA0C;QAAA,IAA/BC,SAA+B,GAAA,MAAA,KAAA;QACzCF,MAAM,IAAIG,yBAAyB,CAACD,SAAD,EAAYF,MAAZ,CAAzB,IAAgD,EAA1D;IACA;IACD,OAAOA,MAAP;AACA;AAaM,SAASG,yBAAT,CAAmCD,SAAnC,EAA8CE,oBAA9C,EAAoEC,SAApE,EAA+E;IACrF,4BAAA;IACA,IAAIH,SAAS,KAAK,GAAlB,EAAuB;QACtB,gDAAA;QACA,mBAAA;QACA,IAAIE,oBAAJ,EAA0B;YACzB,gFAAA;YACA,8EAAA;YACA,6CAAA;YACA,EAAA;YACA,kFAAA;YACA,wEAAA;YACA,wEAAA;YACA,EAAA;YACA,sEAAA;YACA,8EAAA;YACA,EAAA;YACA,IAAI,OAAOC,SAAP,KAAqB,UAAzB,EAAqC;gBACpCA,SAAS,CAAC,KAAD,CAAT;YACA;YACD;QACA;QACD,OAAO,GAAP;IACA,CAvBoF,CAwBrF,gBAAA;IACA,mLAAOR,aAAAA,AAAU,EAACK,SAAD,CAAjB;AACA","debugId":null}},
    {"offset": {"line": 18398, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/mergeArrays.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/mergeArrays.js"],"sourcesContent":["/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport default function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b) {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}"],"names":["mergeArrays","a","b","merged","slice","element","indexOf","push","sort"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe,SAASA,WAAT,CAAqBC,CAArB,EAAwBC,CAAxB,EAA2B;IACzC,IAAMC,MAAM,GAAGF,CAAC,CAACG,KAAF,EAAf;IAEA,IAAA,IAAA,YAAA,gCAAsBF,CAAtB,GAAA,OAAA,CAAA,CAAA,QAAA,WAAA,EAAA,IAAA,EAAyB;QAAA,IAAdG,OAAc,GAAA,MAAA,KAAA;QACxB,IAAIJ,CAAC,CAACK,OAAF,CAAUD,OAAV,IAAqB,CAAzB,EAA4B;YAC3BF,MAAM,CAACI,IAAP,CAAYF,OAAZ;QACA;IACD;IAED,OAAOF,MAAM,CAACK,IAAP,CAAY,SAACP,CAAD,EAAIC,CAAJ;QAAA,OAAUD,CAAC,GAAGC,CAAd;IAAA,CAAZ,CAAP,CATyC,CAWzC,sCAAA;AACA,0BAAA;AACA,6BAAA;AACA,iBAAA;AACA,IAAA;AACA,kDAAA;AACA","debugId":null}},
    {"offset": {"line": 18455, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/checkNumberLength.js"],"sourcesContent":["import mergeArrays from './mergeArrays.js'\r\n\r\nexport default function checkNumberLength(nationalNumber, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for the country based on its length.\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}"],"names":["mergeArrays","checkNumberLength","nationalNumber","metadata","checkNumberLengthForType","undefined","type","type_info","possible_lengths","possibleLengths","mobile_type","actual_length","length","minimum_length","indexOf"],"mappings":";;;;AAAA,OAAOA,WAAP,MAAwB,kBAAxB;;AAEe,SAASC,iBAAT,CAA2BC,cAA3B,EAA2CC,QAA3C,EAAqD;IACnE,OAAOC,wBAAwB,CAACF,cAAD,EAAiBG,SAAjB,EAA4BF,QAA5B,CAA/B;AACA,C,CAED,2EAAA;AAEO,SAASC,wBAAT,CAAkCF,cAAlC,EAAkDI,IAAlD,EAAwDH,QAAxD,EAAkE;IACxE,IAAMI,SAAS,GAAGJ,QAAQ,CAACG,IAAT,CAAcA,IAAd,CAAlB,CADwE,CAGxE,0EAAA;IACA,sCAAA;IACA,iEAAA;IACA,mFAAA;IACA,6EAAA;IACA,sEAAA;IACA,oDAAA;IACA,IAAIE,gBAAgB,GAAGD,SAAS,IAAIA,SAAS,CAACE,eAAV,EAAb,IAA4CN,QAAQ,CAACM,eAAT,EAAnE,CAVwE,CAWxE,qGAAA;IAEA,sEAAA;IACA,IAAI,CAACD,gBAAL,EAAuB;QACtB,OAAO,aAAP;IACA;IAED,IAAIF,IAAI,KAAK,sBAAb,EAAqC;QACpC,+BAAA;QACA,wBAAA,GACA,IAAI,CAACH,QAAQ,CAACG,IAAT,CAAc,YAAd,CAAL,EAAkC;YACjC,0EAAA;YACA,oEAAA;YACA,OAAOF,wBAAwB,CAACF,cAAD,EAAiB,QAAjB,EAA2BC,QAA3B,CAA/B;QACA;QAED,IAAMO,WAAW,GAAGP,QAAQ,CAACG,IAAT,CAAc,QAAd,CAApB;QACA,IAAII,WAAJ,EAAiB;YAChB,oEAAA;YACA,6EAAA;YACA,kEAAA;YACA,oEAAA;YACA,2EAAA;YACAF,gBAAgB,+KAAGR,UAAAA,AAAW,EAACQ,gBAAD,EAAmBE,WAAW,CAACD,eAAZ,EAAnB,CAA9B,CANgB,CAOhB,mEAAA;QACA,oEAAA;QACA,4BAAA;QAEA,uBAAA;QACA,kFAAA;QACA,WAAA;QACA,sDAAA;QACA,IAAA;QACA;IACD,CA3BD,CA4BA,KACK,IAAIH,IAAI,IAAI,CAACC,SAAb,EAAwB;QAC5B,OAAO,gBAAP;IACA;IAED,IAAMI,aAAa,GAAGT,cAAc,CAACU,MAArC,CAnDwE,CAqDxE,8EAAA;IACA,gFAAA;IACA,gEAAA;IACA,0EAAA;IACA,IAAA;IACA,mCAAA;IACA,IAAA;IAEA,IAAMC,cAAc,GAAGL,gBAAgB,CAAC,CAAD,CAAvC;IAEA,IAAIK,cAAc,KAAKF,aAAvB,EAAsC;QACrC,OAAO,aAAP;IACA;IAED,IAAIE,cAAc,GAAGF,aAArB,EAAoC;QACnC,OAAO,WAAP;IACA;IAED,IAAIH,gBAAgB,CAACA,gBAAgB,CAACI,MAAjB,GAA0B,CAA3B,CAAhB,GAAgDD,aAApD,EAAmE;QAClE,OAAO,UAAP;IACA,CAzEuE,CA2ExE,4DAAA;IACA,OAAOH,gBAAgB,CAACM,OAAjB,CAAyBH,aAAzB,EAAwC,CAAxC,KAA8C,CAA9C,GAAkD,aAAlD,GAAkE,gBAAzE;AACA","debugId":null}},
    {"offset": {"line": 18526, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/isPossible.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/isPossible.js"],"sourcesContent":["import Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\t// Old metadata (< 1.0.18) had no \"possible length\" data.\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}"],"names":["Metadata","checkNumberLength","isPossiblePhoneNumber","input","options","metadata","undefined","v2","countryCallingCode","Error","selectNumberingPlan","phone","country","hasCountry","possibleLengths","isPossibleNumber","nationalNumber","isNonGeographicCallingCode"],"mappings":";;;;AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,iBAAP,MAA8B,gCAA9B;;;AAee,SAASC,qBAAT,CAA+BC,KAA/B,EAAsCC,OAAtC,EAA+CC,QAA/C,EAAyD;IACvE,sBAAA,GACA,IAAID,OAAO,KAAKE,SAAhB,EAA2B;QAC1BF,OAAO,GAAG,CAAA,CAAV;IACA;IAEDC,QAAQ,GAAG,8JAAIL,UAAJ,CAAaK,QAAb,CAAX;IAEA,IAAID,OAAO,CAACG,EAAZ,EAAgB;QACf,IAAI,CAACJ,KAAK,CAACK,kBAAX,EAA+B;YAC9B,MAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;QACA;QACDJ,QAAQ,CAACK,mBAAT,CAA6BP,KAAK,CAACK,kBAAnC;IACA,CALD,MAKO;QACN,IAAI,CAACL,KAAK,CAACQ,KAAX,EAAkB;YACjB,OAAO,KAAP;QACA;QACD,IAAIR,KAAK,CAACS,OAAV,EAAmB;YAClB,IAAI,CAACP,QAAQ,CAACQ,UAAT,CAAoBV,KAAK,CAACS,OAA1B,CAAL,EAAyC;gBACxC,MAAM,IAAIH,KAAJ,CAAA,oBAAA,MAAA,CAA8BN,KAAK,CAACS,OAApC,EAAN;YACA;YACDP,QAAQ,CAACO,OAAT,CAAiBT,KAAK,CAACS,OAAvB;QACA,CALD,MAKO;YACN,IAAI,CAACT,KAAK,CAACK,kBAAX,EAA+B;gBAC9B,MAAM,IAAIC,KAAJ,CAAU,oCAAV,CAAN;YACA;YACDJ,QAAQ,CAACK,mBAAT,CAA6BP,KAAK,CAACK,kBAAnC;QACA;IACD,CA5BsE,CA8BvE,yDAAA;IACA,IAAIH,QAAQ,CAACS,eAAT,EAAJ,EAAgC;QAC/B,OAAOC,gBAAgB,CAACZ,KAAK,CAACQ,KAAN,IAAeR,KAAK,CAACa,cAAtB,EAAsCX,QAAtC,CAAvB;IACA,CAFD,MAEO;QACN,yEAAA;QACA,uDAAA;QACA,oDAAA;QACA,4DAAA;QACA,0CAAA;QACA,gEAAA;QACA,IAAIF,KAAK,CAACK,kBAAN,IAA4BH,QAAQ,CAACY,0BAAT,CAAoCd,KAAK,CAACK,kBAA1C,CAAhC,EAA+F;YAC9F,yDAAA;YACA,+CAAA;YACA,OAAO,IAAP;QACA,CAJD,MAIO;YACN,MAAM,IAAIC,KAAJ,CAAU,gGAAV,CAAN;QACA;IACD;AACD;AAEM,SAASM,gBAAT,CAA0BC,cAA1B,EAA0CX,QAA1C,EAAoD;IAAE,sBAAA;IAC5D,yLAAQJ,UAAAA,AAAiB,EAACe,cAAD,EAAiBX,QAAjB,CAAzB;QACC,KAAK,aAAL;YACC,OAAO,IAAP;QACD,oEAAA;QACA,uEAAA;QACA,iCAAA;QACA,2BAAA;QACA;YACC,OAAO,KAAP;IARF;AAUA","debugId":null}},
    {"offset": {"line": 18595, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/matchesEntirely.js"],"sourcesContent":["/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport default function matchesEntirely(text, regular_expression) {\r\n\t// If assigning the `''` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}"],"names":["matchesEntirely","text","regular_expression","RegExp","test"],"mappings":"AAAA;;;;CAIA;;;AACe,SAASA,eAAT,CAAyBC,IAAzB,EAA+BC,kBAA/B,EAAmD;IACjE,uEAAA;IACA,sDAAA;IACAD,IAAI,GAAGA,IAAI,IAAI,EAAf;IACA,OAAO,IAAIE,MAAJ,CAAW,SAASD,kBAAT,GAA8B,IAAzC,EAA+CE,IAA/C,CAAoDH,IAApD,CAAP;AACA","debugId":null}},
    {"offset": {"line": 18612, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/getNumberType.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/getNumberType.js"],"sourcesContent":["import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returns an empty object — `{}` —\r\n\t// that means that the phone number is malformed,\r\n\t// so it can't possibly be valid.\r\n\tif (!input.country && !input.countryCallingCode) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\r\n\t\t// For example, for \"US\" country.\r\n\t\t// Old metadata (< `1.0.18`) had a specific \"types\" data structure\r\n\t\t// that happened to be `undefined` for `MOBILE` in that case.\r\n\t\t// Newer metadata (>= `1.0.18`) has another data structure that is\r\n\t\t// not `undefined` for `MOBILE` in that case (it's just an empty array).\r\n\t\t// So this `if` is just for backwards compatibility with old metadata.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}"],"names":["Metadata","matchesEntirely","NON_FIXED_LINE_PHONE_TYPES","getNumberType","input","options","metadata","country","countryCallingCode","selectNumberingPlan","nationalNumber","v2","phone","nationalNumberPattern","isNumberTypeEqualTo","type","pattern","possibleLengths","indexOf","length"],"mappings":"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","debugId":null}},
    {"offset": {"line": 18730, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/isValid.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/isValid.js"],"sourcesContent":["import Metadata from './metadata.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes()) {\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n}"],"names":["Metadata","matchesEntirely","getNumberType","isValidNumber","input","options","metadata","selectNumberingPlan","country","countryCallingCode","hasTypes","undefined","nationalNumber","v2","phone","nationalNumberPattern"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,aAAP,MAA0B,4BAA1B;;;;AAoCe,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,QAAvC,EACf;IACC,uEAAA;IACA,sDAAA;IACAD,OAAO,GAAGA,OAAO,IAAI,CAAA,CAArB;IAEAC,QAAQ,GAAG,6JAAIN,WAAJ,CAAaM,QAAb,CAAX;IAEAA,QAAQ,CAACC,mBAAT,CAA6BH,KAAK,CAACI,OAAnC,EAA4CJ,KAAK,CAACK,kBAAlD,EAPD,CASC,sEAAA;IACA,2EAAA;IACA,IAAIH,QAAQ,CAACI,QAAT,EAAJ,EAAyB;QACxB,QAAOR,uLAAAA,AAAa,EAACE,KAAD,EAAQC,OAAR,EAAiBC,QAAQ,CAACA,QAA1B,CAAb,KAAqDK,SAA5D;IACA,CAbF,CAeC,qEAAA;IACA,kEAAA;IACA,IAAMC,cAAc,GAAGP,OAAO,CAACQ,EAAR,GAAaT,KAAK,CAACQ,cAAnB,GAAoCR,KAAK,CAACU,KAAjE;IACA,uLAAOb,UAAAA,AAAe,EAACW,cAAD,EAAiBN,QAAQ,CAACS,qBAAT,EAAjB,CAAtB;AACA","debugId":null}},
    {"offset": {"line": 18757, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/getPossibleCountriesForNumber.js"],"sourcesContent":["import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\r\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\tlet possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn []\r\n\t}\r\n\treturn possibleCountries.filter((country) => {\r\n\t\treturn couldNationalNumberBelongToCountry(nationalNumber, country, metadata)\r\n\t})\r\n}\r\n\r\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.selectNumberingPlan(country)\r\n\tif (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}"],"names":["Metadata","getPossibleCountriesForNumber","callingCode","nationalNumber","metadata","_metadata","possibleCountries","getCountryCodesForCallingCode","filter","country","couldNationalNumberBelongToCountry","selectNumberingPlan","numberingPlan","possibleLengths","indexOf","length"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;;AASe,SAASC,6BAAT,CAAuCC,WAAvC,EAAoDC,cAApD,EAAoEC,QAApE,EAA8E;IAC5F,IAAMC,SAAS,GAAG,8JAAIL,UAAJ,CAAaI,QAAb,CAAlB;IACA,IAAIE,iBAAiB,GAAGD,SAAS,CAACE,6BAAV,CAAwCL,WAAxC,CAAxB;IACA,IAAI,CAACI,iBAAL,EAAwB;QACvB,OAAO,EAAP;IACA;IACD,OAAOA,iBAAiB,CAACE,MAAlB,CAAyB,SAACC,OAAD,EAAa;QAC5C,OAAOC,kCAAkC,CAACP,cAAD,EAAiBM,OAAjB,EAA0BL,QAA1B,CAAzC;IACA,CAFM,CAAP;AAGA;AAED,SAASM,kCAAT,CAA4CP,cAA5C,EAA4DM,OAA5D,EAAqEL,QAArE,EAA+E;IAC9E,IAAMC,SAAS,GAAG,8JAAIL,UAAJ,CAAaI,QAAb,CAAlB;IACAC,SAAS,CAACM,mBAAV,CAA8BF,OAA9B;IACA,IAAIJ,SAAS,CAACO,aAAV,CAAwBC,eAAxB,GAA0CC,OAA1C,CAAkDX,cAAc,CAACY,MAAjE,KAA4E,CAAhF,EAAmF;QAClF,OAAO,IAAP;IACA;IACD,OAAO,KAAP;AACA","debugId":null}},
    {"offset": {"line": 18784, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/stripIddPrefix.js"],"sourcesContent":["import Metadata from '../metadata.js'\r\nimport { VALID_DIGITS } from '../constants.js'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}"],"names":["Metadata","VALID_DIGITS","CAPTURING_DIGIT_PATTERN","RegExp","stripIddPrefix","number","country","callingCode","metadata","countryMetadata","selectNumberingPlan","IDDPrefixPattern","IDDPrefix","search","slice","match","length","matchedGroups"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,SAASC,YAAT,QAA6B,iBAA7B;;;AAEA,IAAMC,uBAAuB,GAAG,IAAIC,MAAJ,CAAW,kKAAOF,eAAP,GAAsB,IAAjC,CAAhC;AAEe,SAASG,cAAT,CAAwBC,MAAxB,EAAgCC,OAAhC,EAAyCC,WAAzC,EAAsDC,QAAtD,EAAgE;IAC9E,IAAI,CAACF,OAAL,EAAc;QACb;IACA,CAH6E,CAI9E,uCAAA;IACA,IAAMG,eAAe,GAAG,8JAAIT,UAAJ,CAAaQ,QAAb,CAAxB;IACAC,eAAe,CAACC,mBAAhB,CAAoCJ,OAApC,EAA6CC,WAA7C;IACA,IAAMI,gBAAgB,GAAG,IAAIR,MAAJ,CAAWM,eAAe,CAACG,SAAhB,EAAX,CAAzB;IACA,IAAIP,MAAM,CAACQ,MAAP,CAAcF,gBAAd,MAAoC,CAAxC,EAA2C;QAC1C;IACA,CAV6E,CAW9E,oBAAA;IACAN,MAAM,GAAGA,MAAM,CAACS,KAAP,CAAaT,MAAM,CAACU,KAAP,CAAaJ,gBAAb,CAAA,CAA+B,CAA/B,CAAA,CAAkCK,MAA/C,CAAT,CAZ8E,CAa9E,8CAAA;IACA,gDAAA;IACA,2CAAA;IACA,wEAAA;IACA,IAAMC,aAAa,GAAGZ,MAAM,CAACU,KAAP,CAAab,uBAAb,CAAtB;IACA,IAAIe,aAAa,IAAIA,aAAa,CAAC,CAAD,CAAb,IAAoB,IAArC,IAA6CA,aAAa,CAAC,CAAD,CAAb,CAAiBD,MAAjB,GAA0B,CAA3E,EAA8E;QAC7E,IAAIC,aAAa,CAAC,CAAD,CAAb,KAAqB,GAAzB,EAA8B;YAC7B;QACA;IACD;IACD,OAAOZ,MAAP;AACA","debugId":null}},
    {"offset": {"line": 18818, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js"],"sourcesContent":["/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\r\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\r\n\tif (number && metadata.numberingPlan.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\t\t// If a `national_prefix_for_parsing` has any \"capturing groups\"\r\n\t\t\t// then it means that the national (significant) number is equal to\r\n\t\t\t// those \"capturing groups\" transformed via `national_prefix_transform_rule`,\r\n\t\t\t// and nothing could be said about the actual national prefix:\r\n\t\t\t// what is it and was it even there.\r\n\t\t\t// If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\r\n\t\t\t// then everything it matches is a national prefix.\r\n\t\t\t// To determine whether `national_prefix_for_parsing` matched any\r\n\t\t\t// \"capturing groups\", the value of the result of calling `.exec()`\r\n\t\t\t// is looked at, and if it has non-undefined values where there're\r\n\t\t\t// \"capturing groups\" in the regular expression, then it means\r\n\t\t\t// that \"capturing groups\" have been matched.\r\n\t\t\t// It's not possible to tell whether there'll be any \"capturing gropus\"\r\n\t\t\t// before the matching process, because a `national_prefix_for_parsing`\r\n\t\t\t// could exhibit both behaviors.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tconst hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]\r\n\t\t\tif (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// If there's more than one captured group,\r\n\t\t\t\t// then carrier code is the second one.\r\n\t\t\t\tif (capturedGroupsCount > 1) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there're no \"capturing groups\",\r\n\t\t\t// or if there're \"capturing groups\" but no\r\n\t\t\t// `national_prefix_transform_rule`,\r\n\t\t\t// then just strip the national prefix from the number,\r\n\t\t\t// and possibly a carrier code.\r\n\t\t\t// Seems like there could be more.\r\n\t\t\telse {\r\n\t\t\t\t// `prefixBeforeNationalNumber` is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regular expression.\r\n\t\t\t\t// There seem to be no guarantees that it's just a national prefix.\r\n\t\t\t\t// For example, if there's a carrier code, it's gonna be a\r\n\t\t\t\t// part of `prefixBeforeNationalNumber` too.\r\n\t\t\t\tconst prefixBeforeNationalNumber = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(prefixBeforeNationalNumber.length)\r\n\t\t\t\t// If there's at least one captured group,\r\n\t\t\t\t// then carrier code is the first one.\r\n\t\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Tries to guess whether a national prefix was present in the input.\r\n\t\t\t// This is not something copy-pasted from Google's library:\r\n\t\t\t// they don't seem to have an equivalent for that.\r\n\t\t\t// So this isn't an \"officially approved\" way of doing something like that.\r\n\t\t\t// But since there seems no other existing method, this library uses it.\r\n\t\t\tlet nationalPrefix\r\n\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\tconst possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1])\r\n\t\t\t\tconst possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup)\r\n\t\t\t\t// Example: an Argentinian (AR) phone number `0111523456789`.\r\n\t\t\t\t// `prefixMatch[0]` is `01115`, and `$1` is `11`,\r\n\t\t\t\t// and the rest of the phone number is `23456789`.\r\n\t\t\t\t// The national number is transformed via `9$1` to `91123456789`.\r\n\t\t\t\t// National prefix `0` is detected being present at the start.\r\n\t\t\t\t// if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\r\n\t\t\t\tif (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\r\n\t\t\t\t\tnationalPrefix = metadata.numberingPlan.nationalPrefix()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnationalPrefix = prefixMatch[0]\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tnationalPrefix,\r\n\t\t\t\tcarrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}"],"names":["extractNationalNumberFromPossiblyIncompleteNumber","number","metadata","numberingPlan","nationalPrefixForParsing","prefixPattern","RegExp","prefixMatch","exec","nationalNumber","carrierCode","capturedGroupsCount","length","hasCapturedGroups","nationalPrefixTransformRule","replace","prefixBeforeNationalNumber","slice","nationalPrefix","possiblePositionOfTheFirstCapturedGroup","indexOf","possibleNationalPrefix"],"mappings":"AAAA;;;;;;;;;;;;CAYA;;;AACe,SAASA,iDAAT,CAA2DC,MAA3D,EAAmEC,QAAnE,EAA6E;IAC3F,IAAID,MAAM,IAAIC,QAAQ,CAACC,aAAT,CAAuBC,wBAAvB,EAAd,EAAiE;QAChE,yCAAA;QACA,sEAAA;QACA,0DAAA;QACA,IAAMC,aAAa,GAAG,IAAIC,MAAJ,CAAW,SAASJ,QAAQ,CAACC,aAAT,CAAuBC,wBAAvB,EAAT,GAA6D,GAAxE,CAAtB;QACA,IAAMG,WAAW,GAAGF,aAAa,CAACG,IAAd,CAAmBP,MAAnB,CAApB;QACA,IAAIM,WAAJ,EAAiB;YAChB,IAAIE,cAAJ;YACA,IAAIC,WAAJ,CAFgB,CAGhB,4IAAA;YACA,gEAAA;YACA,mEAAA;YACA,6EAAA;YACA,8DAAA;YACA,oCAAA;YACA,0EAAA;YACA,mDAAA;YACA,iEAAA;YACA,mEAAA;YACA,kEAAA;YACA,8DAAA;YACA,6CAAA;YACA,uEAAA;YACA,uEAAA;YACA,gCAAA;YACA,IAAMC,mBAAmB,GAAGJ,WAAW,CAACK,MAAZ,GAAqB,CAAjD;YACA,IAAMC,iBAAiB,GAAGF,mBAAmB,GAAG,CAAtB,IAA2BJ,WAAW,CAACI,mBAAD,CAAhE;YACA,IAAIT,QAAQ,CAACY,2BAAT,MAA0CD,iBAA9C,EAAiE;gBAChEJ,cAAc,GAAGR,MAAM,CAACc,OAAP,CAChBV,aADgB,EAEhBH,QAAQ,CAACY,2BAAT,EAFgB,CAAjB,CADgE,CAKhE,2CAAA;gBACA,uCAAA;gBACA,IAAIH,mBAAmB,GAAG,CAA1B,EAA6B;oBAC5BD,WAAW,GAAGH,WAAW,CAAC,CAAD,CAAzB;gBACA;YACD,CAVD,CAWA,KAMK;gBACJ,iEAAA;gBACA,wDAAA;gBACA,mEAAA;gBACA,0DAAA;gBACA,4CAAA;gBACA,IAAMS,0BAA0B,GAAGT,WAAW,CAAC,CAAD,CAA9C;gBACAE,cAAc,GAAGR,MAAM,CAACgB,KAAP,CAAaD,0BAA0B,CAACJ,MAAxC,CAAjB,CAPI,CAQJ,0CAAA;gBACA,sCAAA;gBACA,IAAIC,iBAAJ,EAAuB;oBACtBH,WAAW,GAAGH,WAAW,CAAC,CAAD,CAAzB;gBACA;YACD,CAnDe,CAoDhB,qEAAA;YACA,2DAAA;YACA,kDAAA;YACA,2EAAA;YACA,wEAAA;YACA,IAAIW,cAAJ;YACA,IAAIL,iBAAJ,EAAuB;gBACtB,IAAMM,uCAAuC,GAAGlB,MAAM,CAACmB,OAAP,CAAeb,WAAW,CAAC,CAAD,CAA1B,CAAhD;gBACA,IAAMc,sBAAsB,GAAGpB,MAAM,CAACgB,KAAP,CAAa,CAAb,EAAgBE,uCAAhB,CAA/B,CAFsB,CAGtB,6DAAA;gBACA,iDAAA;gBACA,kDAAA;gBACA,iEAAA;gBACA,8DAAA;gBACA,uFAAA;gBACA,IAAIE,sBAAsB,KAAKnB,QAAQ,CAACC,aAAT,CAAuBe,cAAvB,EAA/B,EAAwE;oBACvEA,cAAc,GAAGhB,QAAQ,CAACC,aAAT,CAAuBe,cAAvB,EAAjB;gBACA;YACD,CAZD,MAYO;gBACNA,cAAc,GAAGX,WAAW,CAAC,CAAD,CAA5B;YACA;YACD,OAAO;gBACNE,cAAc,EAAdA,cADM;gBAENS,cAAc,EAAdA,cAFM;gBAGNR,WAAW,EAAXA;YAHM,CAAP;QAKA;IACD;IACC,OAAO;QACND,cAAc,EAAER;IADV,CAAP;AAGF","debugId":null}},
    {"offset": {"line": 18913, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/extractNationalNumber.js"],"sourcesContent":["import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\n\r\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumber(number, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tcarrierCode,\r\n\t\tnationalNumber\r\n\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\tnumber,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (nationalNumber !== number) {\r\n\t\tif (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\r\n\t\t\t// Don't strip the national prefix.\r\n\t\t\treturn { nationalNumber: number }\r\n\t\t}\r\n\t\t// Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t\t// Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\r\n\t\tif (metadata.possibleLengths()) {\r\n\t\t\t// The number remaining after stripping the national prefix and carrier code\r\n\t\t\t// should be long enough to have a possible length for the country.\r\n\t\t\t// Otherwise, don't strip the national prefix and carrier code,\r\n\t\t\t// since the original number could be a valid number.\r\n\t\t\t// This check has been copy-pasted \"as is\" from Google's original library:\r\n\t\t\t// https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\r\n\t\t\t// It doesn't check for the \"possibility\" of the original `number`.\r\n\t\t\t// I guess it's fine not checking that one. It works as is anyway.\r\n\t\t\tif (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\r\n\t\t\t\t// Don't strip the national prefix.\r\n\t\t\t\treturn { nationalNumber: number }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { nationalNumber, carrierCode }\r\n}\r\n\r\n// In some countries, the same digit could be a national prefix\r\n// or a leading digit of a valid phone number.\r\n// For example, in Russia, national prefix is `8`,\r\n// and also `800 555 35 35` is a valid number\r\n// in which `8` is not a national prefix, but the first digit\r\n// of a national (significant) number.\r\n// Same's with Belarus:\r\n// `82004910060` is a valid national (significant) number,\r\n// but `2004910060` is not.\r\n// To support such cases (to prevent the code from always stripping\r\n// national prefix), a condition is imposed: a national prefix\r\n// is not extracted when the original number is \"viable\" and the\r\n// resultant number is not, a \"viable\" national number being the one\r\n// that matches `national_number_pattern`.\r\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\r\n\t// The equivalent in Google's code is:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\r\n\tif (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) &&\r\n\t\t!matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\r\n\t\treturn false\r\n\t}\r\n\t// This \"is possible\" national number (length) check has been commented out\r\n\t// because it's superceded by the (effectively) same check done in the\r\n\t// `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\r\n\t// In other words, why run the same check twice if it could only be run once.\r\n\t// // Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t// // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\r\n\t// // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\r\n\t// if (metadata.possibleLengths()) {\r\n\t// \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\r\n\t// \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\r\n\t// \t\treturn false\r\n\t// \t}\r\n\t// }\r\n\treturn true\r\n}\r\n\r\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'TOO_SHORT':\r\n\t\tcase 'INVALID_LENGTH':\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\treturn false\r\n\t\tdefault:\r\n\t\t\treturn true\r\n\t}\r\n}"],"names":["extractNationalNumberFromPossiblyIncompleteNumber","matchesEntirely","checkNumberLength","extractNationalNumber","number","metadata","carrierCode","nationalNumber","shouldHaveExtractedNationalPrefix","possibleLengths","isPossibleIncompleteNationalNumber","nationalNumberBefore","nationalNumberAfter","nationalNumberPattern"],"mappings":";;;AAAA,OAAOA,iDAAP,MAA8D,wDAA9D;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;;;;AAWe,SAASC,qBAAT,CAA+BC,MAA/B,EAAuCC,QAAvC,EAAiD;IAC/D,8CAAA;IACA,2CAAA;IACA,wCAAA;IACA,kDAAA;IACA,wDAAA;IACA,kEAAA;IACA,mDAAA;IACA,2DAAA;IACA,iEAAA;IACA,IAAA,0OAGIL,UAAAA,AAAiD,EACpDI,MADoD,EAEpDC,QAFoD,CAHrD,EACCC,WADD,GAAA,sBACCA,WADD,EAECC,cAFD,GAAA,sBAECA,cAFD;IAQA,IAAIA,cAAc,KAAKH,MAAvB,EAA+B;QAC9B,IAAI,CAACI,iCAAiC,CAACJ,MAAD,EAASG,cAAT,EAAyBF,QAAzB,CAAtC,EAA0E;YACzE,mCAAA;YACA,OAAO;gBAAEE,cAAc,EAAEH;YAAlB,CAAP;QACA,CAJ6B,CAK9B,oGAAA;QACA,6FAAA;QACA,IAAIC,QAAQ,CAACI,eAAT,EAAJ,EAAgC;YAC/B,4EAAA;YACA,mEAAA;YACA,+DAAA;YACA,qDAAA;YACA,0EAAA;YACA,+KAAA;YACA,mEAAA;YACA,kEAAA;YACA,IAAI,CAACC,kCAAkC,CAACH,cAAD,EAAiBF,QAAjB,CAAvC,EAAmE;gBAClE,mCAAA;gBACA,OAAO;oBAAEE,cAAc,EAAEH;gBAAlB,CAAP;YACA;QACD;IACD;IAED,OAAO;QAAEG,cAAc,EAAdA,cAAF;QAAkBD,WAAW,EAAXA;IAAlB,CAAP;AACA,C,CAED,+DAAA;AACA,8CAAA;AACA,kDAAA;AACA,6CAAA;AACA,6DAAA;AACA,sCAAA;AACA,uBAAA;AACA,0DAAA;AACA,2BAAA;AACA,mEAAA;AACA,8DAAA;AACA,gEAAA;AACA,oEAAA;AACA,0CAAA;AACA,SAASE,iCAAT,CAA2CG,oBAA3C,EAAiEC,mBAAjE,EAAsFP,QAAtF,EAAgG;IAC/F,sCAAA;IACA,+KAAA;IACA,oLAAIJ,UAAAA,AAAe,EAACU,oBAAD,EAAuBN,QAAQ,CAACQ,qBAAT,EAAvB,CAAf,IACH,iLAACZ,UAAAA,AAAe,EAACW,mBAAD,EAAsBP,QAAQ,CAACQ,qBAAT,EAAtB,CADjB,EAC0E;QACzE,OAAO,KAAP;IACA,CAN8F,CAO/F,2EAAA;IACA,sEAAA;IACA,2FAAA;IACA,6EAAA;IACA,uGAAA;IACA,yGAAA;IACA,kGAAA;IACA,oCAAA;IACA,6EAAA;IACA,0EAAA;IACA,iBAAA;IACA,KAAA;IACA,IAAA;IACA,OAAO,IAAP;AACA;AAED,SAASH,kCAAT,CAA4CH,cAA5C,EAA4DF,QAA5D,EAAsE;IACrE,yLAAQH,UAAAA,AAAiB,EAACK,cAAD,EAAiBF,QAAjB,CAAzB;QACC,KAAK,WAAL;QACA,KAAK,gBAAL;YACA,oEAAA;YACA,uEAAA;YACA,iCAAA;YACC,OAAO,KAAP;QACD;YACC,OAAO,IAAP;IARF;AAUA","debugId":null}},
    {"offset": {"line": 19012, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js"],"sourcesContent":["import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport extractNationalNumber from './extractNationalNumber.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\nimport getCountryCallingCode from '../getCountryCallingCode.js'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country, callingCode)\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t\t&&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { number }\r\n}"],"names":["Metadata","matchesEntirely","extractNationalNumber","checkNumberLength","getCountryCallingCode","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","number","country","callingCode","metadata","countryCallingCode","indexOf","selectNumberingPlan","possibleShorterNumber","slice","length","possibleShorterNationalNumber","nationalNumber","nationalNumberPattern"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,eAAP,MAA4B,sBAA5B;AACA,OAAOC,qBAAP,MAAkC,4BAAlC;AACA,OAAOC,iBAAP,MAA8B,wBAA9B;AACA,OAAOC,qBAAP,MAAkC,6BAAlC;;;;;;AAWe,SAASC,+DAAT,CACdC,MADc,EAEdC,OAFc,EAGdC,WAHc,EAIdC,QAJc,EAKb;IACD,IAAMC,kBAAkB,GAAGH,OAAO,OAAGH,wNAAAA,AAAqB,EAACG,OAAD,EAAUE,QAAV,CAAxB,GAA8CD,WAAhF;IACA,IAAIF,MAAM,CAACK,OAAP,CAAeD,kBAAf,MAAuC,CAA3C,EAA8C;QAC7CD,QAAQ,GAAG,8JAAIT,UAAJ,CAAaS,QAAb,CAAX;QACAA,QAAQ,CAACG,mBAAT,CAA6BL,OAA7B,EAAsCC,WAAtC;QACA,IAAMK,qBAAqB,GAAGP,MAAM,CAACQ,KAAP,CAAaJ,kBAAkB,CAACK,MAAhC,CAA9B;QACA,IAAA,8MAEIb,UAAAA,AAAqB,EACxBW,qBADwB,EAExBJ,QAFwB,CAFzB,EACiBO,6BADjB,GAAA,sBACCC,cADD;QAMA,IAAA,+MAEIf,UAAAA,AAAqB,EACxBI,MADwB,EAExBG,QAFwB,CAFzB,EACCQ,cADD,GAAA,uBACCA,cADD,CAV6C,CAgB7C,uDAAA;QACA,uDAAA;QACA,+DAAA;QACA,yBAAA;QACA,4DAAA;QACA,4DAAA;QACA,4DAAA;QACA,iBAAA;QACA,IAEE,CAAChB,0LAAAA,AAAe,EAACgB,cAAD,EAAiBR,QAAQ,CAACS,qBAAT,EAAjB,CAAhB,oLAEAjB,UAAAA,AAAe,EAACe,6BAAD,EAAgCP,QAAQ,CAACS,qBAAT,EAAhC,CAHhB,sLAMAf,UAAAA,AAAiB,EAACc,cAAD,EAAiBR,QAAjB,CAAjB,KAAgD,UAPjD,EAQE;YACD,OAAO;gBACNC,kBAAkB,EAAlBA,kBADM;gBAENJ,MAAM,EAAEO;YAFF,CAAP;QAIA;IACD;IACD,OAAO;QAAEP,MAAM,EAANA;IAAF,CAAP;AACA","debugId":null}},
    {"offset": {"line": 19055, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/extractCountryCallingCode.js"],"sourcesContent":["import stripIddPrefix from './stripIddPrefix.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport Metadata from '../metadata.js'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tlet isNumberWithIddPrefix\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tisNumberWithIddPrefix = true\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t// No need to set it to `UNSPECIFIED`. It can be just `undefined`.\r\n\t\t\t\t// countryCallingCodeSource: 'UNSPECIFIED',\r\n\t\t\t\tnumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n\r\n// The possible values for the returned `countryCallingCodeSource` are:\r\n//\r\n// Copy-pasted from:\r\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\r\n//\r\n// // The source from which the country_code is derived. This is not set in the\r\n// // general parsing method, but in the method that parses and keeps raw_input.\r\n// // New fields could be added upon request.\r\n// enum CountryCodeSource {\r\n//  // Default value returned if this is not set, because the phone number was\r\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\r\n//  // return false if this is the case.\r\n//  UNSPECIFIED = 0;\r\n//\r\n//  // The country_code is derived based on a phone number with a leading \"+\",\r\n//  // e.g. the French number \"+33 1 42 68 53 00\".\r\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\r\n//\r\n//  // The country_code is derived based on a phone number with a leading IDD,\r\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\r\n//  FROM_NUMBER_WITH_IDD = 5;\r\n//\r\n//  // The country_code is derived based on a phone number without a leading\r\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\r\n//  // supplied as France.\r\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\r\n//\r\n//  // The country_code is derived NOT based on the phone number itself, but\r\n//  // from the defaultCountry parameter provided in the parsing function by the\r\n//  // clients. This happens mostly for numbers written in the national format\r\n//  // (without country code). For example, this would be set when parsing the\r\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\r\n//  // France.\r\n//  FROM_DEFAULT_COUNTRY = 20;\r\n// }"],"names":["stripIddPrefix","extractCountryCallingCodeFromInternationalNumberWithoutPlusSign","Metadata","MAX_LENGTH_COUNTRY_CODE","extractCountryCallingCode","number","country","callingCode","metadata","isNumberWithIddPrefix","numberWithoutIDD","countryCallingCode","shorterNumber","countryCallingCodeSource","i","length","slice","hasCallingCode","selectNumberingPlan"],"mappings":"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","debugId":null}},
    {"offset": {"line": 19174, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/applyInternationalSeparatorStyle.js"],"sourcesContent":["import { VALID_PUNCTUATION } from '../constants.js'\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\r\n\treturn formattedNumber.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}"],"names":["VALID_PUNCTUATION","applyInternationalSeparatorStyle","formattedNumber","replace","RegExp","trim"],"mappings":";;;AAAA,SAASA,iBAAT,QAAkC,iBAAlC,C,4NAEA,oDAAA;;AA8Be,SAASC,gCAAT,CAA0CC,eAA1C,EAA2D;IACzE,OAAOA,eAAe,CAACC,OAAhB,CAAwB,IAAIC,MAAJ,CAAA,IAAA,MAAA,4JAAeJ,oBAAf,EAAA,OAAsC,GAAtC,CAAxB,EAAoE,GAApE,EAAyEK,IAAzE,EAAP;AACA","debugId":null}},
    {"offset": {"line": 19186, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/formatNationalNumberUsingFormat.js"],"sourcesContent":["import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly. Therefore, we use `\\d`, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport default function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\t{\r\n\t\tuseInternationalFormat,\r\n\t\twithNationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tmetadata\r\n\t}\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat\r\n\t\t\t? format.internationalFormat()\r\n\t\t\t: (\r\n\t\t\t\t// This library doesn't use `domestic_carrier_code_formatting_rule`,\r\n\t\t\t\t// because that one is only used when formatting phone numbers\r\n\t\t\t\t// for dialing from a mobile phone, and this is not a dialing library.\r\n\t\t\t\t// carrierCode && format.domesticCarrierCodeFormattingRule()\r\n\t\t\t\t// \t// First, replace the $CC in the formatting rule with the desired carrier code.\r\n\t\t\t\t// \t// Then, replace the $FG in the formatting rule with the first group\r\n\t\t\t\t// \t// and the carrier code combined in the appropriate way.\r\n\t\t\t\t// \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\r\n\t\t\t\t// \t: (\r\n\t\t\t\t// \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t// \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t// \t\t\t: format.format()\r\n\t\t\t\t// \t)\r\n\t\t\t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t\t: format.format()\r\n\t\t\t)\r\n\t)\r\n\tif (useInternationalFormat) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}"],"names":["applyInternationalSeparatorStyle","FIRST_GROUP_PATTERN","formatNationalNumberUsingFormat","number","format","useInternationalFormat","withNationalPrefix","carrierCode","metadata","formattedNumber","replace","RegExp","pattern","internationalFormat","nationalPrefixFormattingRule"],"mappings":";;;;AAAA,OAAOA,gCAAP,MAA6C,uCAA7C,C,4PAEA,2EAAA;;AAIO,IAAMC,mBAAmB,GAAG,QAA5B;AAEQ,SAASC,+BAAT,CACdC,MADc,EAEdC,MAFc,EAAA,IAAA,EASb;IAAA,IALAC,sBAKA,GAAA,KALAA,sBAKA,EAJAC,kBAIA,GAAA,KAJAA,kBAIA,EAHAC,WAGA,GAAA,KAHAA,WAGA,EAFAC,QAEA,GAAA,KAFAA,QAEA;IACD,IAAMC,eAAe,GAAGN,MAAM,CAACO,OAAP,CACvB,IAAIC,MAAJ,CAAWP,MAAM,CAACQ,OAAP,EAAX,CADuB,EAEvBP,sBAAsB,GACnBD,MAAM,CAACS,mBAAP,EADmB,GAGpB,AACA,8DAAA;IACA,sEAAA;IACA,4DAAA;IACA,mFAAA;IACA,wEAAA;IACA,4DAAA;IACA,0HAAA;IACA,OAAA;IACA,gEAAA;IACA,2FAAA;IACA,uBAAA;IACA,KAAA;IACAP,kBAAkB,IAAIF,MAAM,CAACU,4BAAP,EAAtB,GACGV,MAAM,CAACA,MAAP,GAAgBM,OAAhB,CAAwBT,mBAAxB,EAA6CG,MAAM,CAACU,4BAAP,EAA7C,CADH,GAEGV,MAAM,CAACA,MAAP,EApBkB,CAAxB;IAuBA,IAAIC,sBAAJ,EAA4B;QAC3B,wMAAOL,UAAAA,AAAgC,EAACS,eAAD,CAAvC;IACA;IACD,OAAOA,eAAP;AACA","debugId":null}},
    {"offset": {"line": 19217, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/getIddPrefix.js"],"sourcesContent":["import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport default function getIddPrefix(country, callingCode, metadata) {\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tif (countryMetadata.defaultIDDPrefix()) {\r\n\t\treturn countryMetadata.defaultIDDPrefix()\r\n\t}\r\n\tif (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n}\r\n"],"names":["Metadata","SINGLE_IDD_PREFIX_REG_EXP","getIddPrefix","country","callingCode","metadata","countryMetadata","selectNumberingPlan","defaultIDDPrefix","test","IDDPrefix"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;;AAEA;;;;;;;;CAQA,GACA,IAAMC,yBAAyB,GAAG,wCAAlC,C,CAEA,8CAAA;AAEe,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,WAA/B,EAA4CC,QAA5C,EAAsD;IACpE,IAAMC,eAAe,GAAG,8JAAIN,UAAJ,CAAaK,QAAb,CAAxB;IACAC,eAAe,CAACC,mBAAhB,CAAoCJ,OAApC,EAA6CC,WAA7C;IACA,IAAIE,eAAe,CAACE,gBAAhB,EAAJ,EAAwC;QACvC,OAAOF,eAAe,CAACE,gBAAhB,EAAP;IACA;IACD,IAAIP,yBAAyB,CAACQ,IAA1B,CAA+BH,eAAe,CAACI,SAAhB,EAA/B,CAAJ,EAAiE;QAChE,OAAOJ,eAAe,CAACI,SAAhB,EAAP;IACA;AACD","debugId":null}},
    {"offset": {"line": 19245, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/RFC3966.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/RFC3966.js"],"sourcesContent":["import isViablePhoneNumber from './isViablePhoneNumber.js'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text) {\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';')) {\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name) {\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext }) {\r\n\tif (!number) {\r\n\t\treturn ''\r\n\t}\r\n\tif (number[0] !== '+') {\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}"],"names":["isViablePhoneNumber","parseRFC3966","text","number","ext","replace","split","part","name","value","result","formatRFC3966","Error"],"mappings":";;;;AAAA,OAAOA,mBAAP,MAAgC,0BAAhC,C,4PAEA,uCAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;IAClC,IAAIC,MAAJ;IACA,IAAIC,GAAJ,CAFkC,CAIlC,sDAAA;IACAF,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,OAAb,EAAsB,MAAtB,CAAP;IAEA,IAAA,IAAA,YAAA,gCAAmBH,IAAI,CAACI,KAAL,CAAW,GAAX,CAAnB,GAAA,OAAA,CAAA,CAAA,QAAA,WAAA,EAAA,IAAA,EAAoC;QAAA,IAAzBC,IAAyB,GAAA,MAAA,KAAA;QACnC,IAAA,cAAsBA,IAAI,CAACD,KAAL,CAAW,GAAX,CAAtB,EAAA,eAAA,eAAA,aAAA,IAAOE,IAAP,GAAA,YAAA,CAAA,EAAA,EAAaC,KAAb,GAAA,YAAA,CAAA,EAAA;QACA,OAAQD,IAAR;YACC,KAAK,KAAL;gBACCL,MAAM,GAAGM,KAAT;gBACA;YACD,KAAK,KAAL;gBACCL,GAAG,GAAGK,KAAN;gBACA;YACD,KAAK,eAAL;gBACC,yCAAA;gBACA,iCAAA;gBACA,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;oBACrBN,MAAM,GAAGM,KAAK,GAAGN,MAAjB;gBACA;gBACD;QAbF;IAeA,CAxBiC,CA0BlC,iDAAA;IACA,IAAI,CAACH,8LAAAA,AAAmB,EAACG,MAAD,CAAxB,EAAkC;QACjC,OAAO,CAAA,CAAP;IACA;IAED,IAAMO,MAAM,GAAG;QAAEP,MAAM,EAANA;IAAF,CAAf;IACA,IAAIC,GAAJ,EAAS;QACRM,MAAM,CAACN,GAAP,GAAaA,GAAb;IACA;IACD,OAAOM,MAAP;AACA;AAMM,SAASC,aAAT,CAAA,IAAA,EAAwC;IAAA,IAAfR,MAAe,GAAA,KAAfA,MAAe,EAAPC,GAAO,GAAA,KAAPA,GAAO;IAC9C,IAAI,CAACD,MAAL,EAAa;QACZ,OAAO,EAAP;IACA;IACD,IAAIA,MAAM,CAAC,CAAD,CAAN,KAAc,GAAlB,EAAuB;QACtB,MAAM,IAAIS,KAAJ,CAAA,gEAAN;IACA;IACD,OAAA,OAAA,MAAA,CAAcT,MAAd,EAAA,MAAA,CAAuBC,GAAG,GAAG,UAAUA,GAAb,GAAmB,EAA7C;AACA","debugId":null}},
    {"offset": {"line": 19365, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/format.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/format.js"],"sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\nimport Metadata, { getCountryCallingCode } from './metadata.js'\r\nimport getIddPrefix from './helpers/getIddPrefix.js'\r\nimport { formatRFC3966 } from './helpers/RFC3966.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport function chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits.\r\n\t\t// The test case for \"else path\" could be found by searching for\r\n\t\t// \"format.leadingDigitsPatterns().length === 0\".\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}"],"names":["matchesEntirely","formatNationalNumberUsingFormat","Metadata","getCountryCallingCode","getIddPrefix","formatRFC3966","DEFAULT_OPTIONS","formatExtension","formattedNumber","extension","metadata","ext","formatNumber","input","format","options","country","hasCountry","Error","countryCallingCode","selectNumberingPlan","phone","nationalNumber","v2","number","formatNationalNumber","carrierCode","addExtension","fromCountry","formatIDD","formatAs","chooseFormatForNumber","formats","useInternationalFormat","withNationalPrefix","nationalPrefixIsOptionalWhenFormattingInNationalFormat","nationalPrefix","availableFormats","nationalNnumber","leadingDigitsPatterns","length","lastLeadingDigitsPattern","search","pattern","fromCountryCallingCode","iddPrefix","undefined"],"mappings":"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","debugId":null}},
    {"offset": {"line": 19576, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/PhoneNumber.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/PhoneNumber.js"],"sourcesContent":["import Metadata, { validateMetadata } from './metadata.js'\r\nimport isPossibleNumber from './isPossible.js'\r\nimport isValidNumber from './isValid.js'\r\n// import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport isObject from './helpers/isObject.js'\r\nimport formatNumber from './format.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\t/**\r\n\t * @param  {string} countryOrCountryCallingCode\r\n\t * @param  {string} nationalNumber\r\n\t * @param  {object} metadata — Metadata JSON\r\n\t * @return {PhoneNumber}\r\n\t */\r\n\tconstructor(countryOrCountryCallingCode, nationalNumber, metadata) {\r\n\t\t// Validate `countryOrCountryCallingCode` argument.\r\n\t\tif (!countryOrCountryCallingCode) {\r\n\t\t\tthrow new TypeError('First argument is required')\r\n\t\t}\r\n\t\tif (typeof countryOrCountryCallingCode !== 'string') {\r\n\t\t\tthrow new TypeError('First argument must be a string')\r\n\t\t}\r\n\r\n\t\t// In case of public API use: `constructor(number, metadata)`.\r\n\t\t// Transform the arguments from `constructor(number, metadata)` to\r\n\t\t// `constructor(countryOrCountryCallingCode, nationalNumber, metadata)`.\r\n\t\tif (countryOrCountryCallingCode[0] === '+' && !nationalNumber) {\r\n\t\t\tthrow new TypeError('`metadata` argument not passed')\r\n\t\t}\r\n\t\tif (isObject(nationalNumber) && isObject(nationalNumber.countries)) {\r\n\t\t\tmetadata = nationalNumber\r\n\t\t\tconst e164Number = countryOrCountryCallingCode\r\n\t\t\tif (!E164_NUMBER_REGEXP.test(e164Number)) {\r\n\t\t\t\tthrow new Error('Invalid `number` argument passed: must consist of a \"+\" followed by digits')\r\n\t\t\t}\r\n\t\t\tconst { countryCallingCode, number } = extractCountryCallingCode(e164Number, undefined, undefined, metadata)\r\n\t\t\tnationalNumber = number\r\n\t\t\tcountryOrCountryCallingCode = countryCallingCode\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\tthrow new Error('Invalid `number` argument passed: too short')\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `nationalNumber` argument.\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument is required')\r\n\t\t}\r\n\t\tif (typeof nationalNumber !== 'string') {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument must be a string')\r\n\t\t}\r\n\r\n\t\t// Validate `metadata` argument.\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\t// Initialize properties.\r\n\t\tconst { country, countryCallingCode } = getCountryAndCountryCallingCode(\r\n\t\t\tcountryOrCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tthis.country = country\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\t// Exclude `metadata` property output from `PhoneNumber.toString()`\r\n\t\t// so that it doesn't clutter the console output of Node.js.\r\n\t\t// Previously, when Node.js did `console.log(new PhoneNumber(...))`,\r\n\t\t// it would output the whole internal structure of the `metadata` object.\r\n\t\tthis.getMetadata = () => metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tgetPossibleCountries() {\r\n\t\tif (this.country) {\r\n\t\t\treturn [this.country]\r\n\t\t}\r\n\t\treturn getPossibleCountriesForNumber(\r\n\t\t\tthis.countryCallingCode,\r\n\t\t\tthis.nationalNumber,\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.getMetadata())\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\r\n\t// but later it was found out that it doesn't include the possible `TOO_SHORT` result\r\n\t// returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\r\n\t// so eventually I simply commented out this method from the `PhoneNumber` class\r\n\t// and just left the `validatePhoneNumberLength()` function, even though that one would require\r\n\t// and additional step to also validate the actual country / calling code of the phone number.\r\n\t// validateLength() {\r\n\t// \tconst metadata = new Metadata(this.getMetadata())\r\n\t// \tmetadata.selectNumberingPlan(this.countryCallingCode)\r\n\t// \tconst result = checkNumberLength(this.nationalNumber, metadata)\r\n\t// \tif (result !== 'IS_POSSIBLE') {\r\n\t// \t\treturn result\r\n\t// \t}\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)\r\n\r\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\r\n\tlet country\r\n\tlet countryCallingCode\r\n\r\n\tconst metadata = new Metadata(metadataJson)\r\n\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t// Also store the country code as `.country`.\r\n\tif (isCountryCode(countryOrCountryCallingCode)) {\r\n\t\tcountry = countryOrCountryCallingCode\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t\tcountryCallingCode = metadata.countryCallingCode()\r\n\t} else {\r\n\t\tcountryCallingCode = countryOrCountryCallingCode\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tif (metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\tcountry = '001'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode\r\n\t}\r\n}\r\n\r\nconst E164_NUMBER_REGEXP = /^\\+\\d+$/"],"names":["Metadata","validateMetadata","isPossibleNumber","isValidNumber","getNumberType","getPossibleCountriesForNumber","extractCountryCallingCode","isObject","formatNumber","USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber","countryOrCountryCallingCode","nationalNumber","metadata","TypeError","countries","e164Number","E164_NUMBER_REGEXP","test","Error","undefined","countryCallingCode","number","getCountryAndCountryCallingCode","country","getMetadata","ext","v2","isNonGeographicCallingCode","phoneNumber","format","options","isCountryCode","value","metadataJson","selectNumberingPlan"],"mappings":"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","debugId":null}},
    {"offset": {"line": 19818, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/getCountryByNationalNumber.js"],"sourcesContent":["import Metadata from '../metadata.js'\r\nimport getNumberType from './getNumberType.js'\r\n\r\nexport default function getCountryByNationalNumber(nationalPhoneNumber, {\r\n\tcountries,\r\n\tdefaultCountry,\r\n\tmetadata\r\n}) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// const matchingCountries = []\r\n\r\n\tfor (const country of countries) {\r\n\t\tmetadata.country(country)\r\n\t\t// \"Leading digits\" patterns are only defined for about 20% of all countries.\r\n\t\t// By definition, matching \"leading digits\" is a sufficient but not a necessary\r\n\t\t// condition for a phone number to belong to a country.\r\n\t\t// The point of \"leading digits\" check is that it's the fastest one to get a match.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\t// I'd suppose that \"leading digits\" patterns are mutually exclusive for different countries\r\n\t\t// because of the intended use of that feature.\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\t// If both the `defaultCountry` and the \"main\" one match the phone number,\r\n\t\t\t// don't prefer the `defaultCountry` over the \"main\" one.\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/154\r\n\t\t\treturn country\r\n\t\t\t// // If the `defaultCountry` is among the `matchingCountries` then return it.\r\n\t\t\t// if (defaultCountry) {\r\n\t\t\t// \tif (country === defaultCountry) {\r\n\t\t\t// \t\treturn country\r\n\t\t\t// \t}\r\n\t\t\t// \tmatchingCountries.push(country)\r\n\t\t\t// } else {\r\n\t\t\t// \treturn country\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\r\n\t// // Return the first (\"main\") one of the `matchingCountries`.\r\n\t// if (matchingCountries.length > 0) {\r\n\t// \treturn matchingCountries[0]\r\n\t// }\r\n}"],"names":["Metadata","getNumberType","getCountryByNationalNumber","nationalPhoneNumber","countries","defaultCountry","metadata","country","leadingDigits","search","phone","undefined"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAASC,0BAAT,CAAoCC,mBAApC,EAAA,IAAA,EAIZ;IAAA,IAHFC,SAGE,GAAA,KAHFA,SAGE,EAFFC,cAEE,GAAA,KAFFA,cAEE,EADFC,QACE,GAAA,KADFA,QACE;IACF,iEAAA;IACAA,QAAQ,GAAG,8JAAIN,UAAJ,CAAaM,QAAb,CAAX,CAFE,CAIF,+BAAA;IAEA,IAAA,IAAA,YAAA,gCAAsBF,SAAtB,GAAA,OAAA,CAAA,CAAA,QAAA,WAAA,EAAA,IAAA,EAAiC;QAAA,IAAtBG,OAAsB,GAAA,MAAA,KAAA;QAChCD,QAAQ,CAACC,OAAT,CAAiBA,OAAjB,EADgC,CAEhC,6EAAA;QACA,+EAAA;QACA,uDAAA;QACA,mFAAA;QACA,6FAAA;QACA,4FAAA;QACA,+CAAA;QACA,IAAID,QAAQ,CAACE,aAAT,EAAJ,EAA8B;YAC7B,IAAIL,mBAAmB,IACtBA,mBAAmB,CAACM,MAApB,CAA2BH,QAAQ,CAACE,aAAT,EAA3B,MAAyD,CAD1D,EAC6D;gBAC5D,OAAOD,OAAP;YACA;QACD,CALD,CAMA,KAEK,kLAAIN,UAAAA,AAAa,EAAC;YAAES,KAAK,EAAEP,mBAAT;YAA8BI,OAAO,EAAPA;QAA9B,CAAD,EAA0CI,SAA1C,EAAqDL,QAAQ,CAACA,QAA9D,CAAjB,EAA0F;YAC9F,0EAAA;YACA,yDAAA;YACA,mEAAA;YACA,OAAOC,OAAP,CAJ8F,CAK9F,8EAAA;QACA,wBAAA;QACA,qCAAA;QACA,mBAAA;QACA,KAAA;QACA,mCAAA;QACA,WAAA;QACA,kBAAA;QACA,IAAA;QACA;IACD,CAtCC,CAwCF,+DAAA;AACA,sCAAA;AACA,+BAAA;AACA,IAAA;AACA","debugId":null}},
    {"offset": {"line": 19901, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/getCountryByCallingCode.js"],"sourcesContent":["import getCountryByNationalNumber from './getCountryByNationalNumber.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, {\r\n\tnationalNumber: nationalPhoneNumber,\r\n\tdefaultCountry,\r\n\tmetadata\r\n}) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn getCountryByNationalNumber(nationalPhoneNumber, {\r\n\t\tcountries: possibleCountries,\r\n\t\tdefaultCountry,\r\n\t\tmetadata: metadata.metadata\r\n\t})\r\n}"],"names":["getCountryByNationalNumber","USE_NON_GEOGRAPHIC_COUNTRY_CODE","getCountryByCallingCode","callingCode","nationalPhoneNumber","nationalNumber","defaultCountry","metadata","isNonGeographicCallingCode","possibleCountries","getCountryCodesForCallingCode","length","countries"],"mappings":";;;AAAA,OAAOA,0BAAP,MAAuC,iCAAvC;;AAEA,IAAMC,+BAA+B,GAAG,KAAxC;AAEe,SAASC,uBAAT,CAAiCC,WAAjC,EAAA,IAAA,EAIZ;IAAA,IAHcC,mBAGd,GAAA,KAHFC,cAGE,EAFFC,cAEE,GAAA,KAFFA,cAEE,EADFC,QACE,GAAA,KADFA,QACE;IACF,sBAAA,GACA,IAAIN,+BAAJ,EAAqC;;IAKrC,IAAMQ,iBAAiB,GAAGF,QAAQ,CAACG,6BAAT,CAAuCP,WAAvC,CAA1B;IACA,IAAI,CAACM,iBAAL,EAAwB;QACvB;IACA,CAVC,CAWF,iEAAA;IACA,uEAAA;IACA,IAAIA,iBAAiB,CAACE,MAAlB,KAA6B,CAAjC,EAAoC;QACnC,OAAOF,iBAAiB,CAAC,CAAD,CAAxB;IACA;IACD,kMAAOT,UAAAA,AAA0B,EAACI,mBAAD,EAAsB;QACtDQ,SAAS,EAAEH,iBAD2C;QAEtDH,cAAc,EAAdA,cAFsD;QAGtDC,QAAQ,EAAEA,QAAQ,CAACA,QAAAA;IAHmC,CAAtB,CAAjC;AAKA","debugId":null}},
    {"offset": {"line": 19929, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/extractPhoneContext.js"],"sourcesContent":["// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\r\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\r\n// Example: `\"tel:12133734253;phone-context=+1\"`.\r\n// This function parses the full phone number from the local number and the `phone-context`\r\n// when the `phone-context` contains a `+` sign.\r\n\r\nimport {\r\n  VALID_DIGITS,\r\n  // PLUS_CHARS\r\n} from '../constants.js'\r\n\r\nexport const PLUS_SIGN = '+'\r\n\r\nconst RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?'\r\n\r\nconst RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')'\r\n\r\nconst RFC3966_GLOBAL_NUMBER_DIGITS_ =\r\n\t'^' +\r\n\t'\\\\' +\r\n\tPLUS_SIGN +\r\n\tRFC3966_PHONE_DIGIT_ +\r\n\t'*' +\r\n\t'[' + VALID_DIGITS +  ']' +\r\n\tRFC3966_PHONE_DIGIT_ +\r\n\t'*' +\r\n\t'$'\r\n\r\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\r\nconst RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g')\r\n\r\n// In this port of Google's library, we don't accept alpha characters in phone numbers.\r\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\r\nconst ALPHANUM_ = VALID_DIGITS\r\n\r\nconst RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*'\r\n\r\nconst VALID_ALPHA_ = 'a-zA-Z'\r\nconst RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*'\r\n\r\nconst RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$'\r\n\r\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\r\nconst RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g')\r\n\r\nexport const RFC3966_PREFIX_ = 'tel:'\r\nexport const RFC3966_PHONE_CONTEXT_ = ';phone-context='\r\nexport const RFC3966_ISDN_SUBADDRESS_ = ';isub='\r\n\r\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\r\nexport default function extractPhoneContext(numberToExtractFrom) {\r\n\tconst indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_)\r\n\t// If no phone-context parameter is present\r\n\tif (indexOfPhoneContext < 0) {\r\n\t\treturn null\r\n\t}\r\n\r\n\tconst phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length\r\n\t// If phone-context parameter is empty\r\n\tif (phoneContextStart >= numberToExtractFrom.length) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\tconst phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart)\r\n\t// If phone-context is not the last parameter\r\n\tif (phoneContextEnd >= 0) {\r\n\t\treturn numberToExtractFrom.substring(phoneContextStart, phoneContextEnd)\r\n\t} else {\r\n\t\treturn numberToExtractFrom.substring(phoneContextStart)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\r\nexport function isPhoneContextValid(phoneContext) {\r\n\tif (phoneContext === null) {\r\n\t\treturn true\r\n\t}\r\n\r\n\tif (phoneContext.length === 0) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Does phone-context value match pattern of global-number-digits or domainname.\r\n\treturn RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) ||\r\n\t\tRFC3966_DOMAINNAME_PATTERN_.test(phoneContext)\r\n}"],"names":["VALID_DIGITS","PLUS_SIGN","RFC3966_VISUAL_SEPARATOR_","RFC3966_PHONE_DIGIT_","RFC3966_GLOBAL_NUMBER_DIGITS_","RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_","RegExp","ALPHANUM_","RFC3966_DOMAINLABEL_","VALID_ALPHA_","RFC3966_TOPLABEL_","RFC3966_DOMAINNAME_","RFC3966_DOMAINNAME_PATTERN_","RFC3966_PREFIX_","RFC3966_PHONE_CONTEXT_","RFC3966_ISDN_SUBADDRESS_","extractPhoneContext","numberToExtractFrom","indexOfPhoneContext","indexOf","phoneContextStart","length","phoneContextEnd","substring","isPhoneContextValid","phoneContext","test"],"mappings":"AAAA,8EAAA;AACA,6FAAA;AACA,iDAAA;AACA,2FAAA;AACA,gDAAA;;;;;;;;;AAEA,SACEA,YADF,CAEE;;AAGK,IAAMC,SAAS,GAAG,GAAlB;AAEP,IAAMC,yBAAyB,GAAG,iBAAlC;AAEA,IAAMC,oBAAoB,GAAG,MAAM,GAAN,8JAAYH,eAAZ,GAA2B,GAA3B,GAAiC,GAAjC,GAAuCE,yBAAvC,GAAmE,GAAhG;AAEA,IAAME,6BAA6B,GAClC,MACA,IADA,GAEAH,SAFA,GAGAE,oBAHA,GAIA,GAJA,GAKA,GALA,8JAKMH,eALN,GAKsB,GALtB,GAMAG,oBANA,GAOA,GAPA,GAQA,GATD;AAWA;;;CAGA,GACA,IAAME,qCAAqC,GAAG,IAAIC,MAAJ,CAAWF,6BAAX,EAA0C,GAA1C,CAA9C,C,CAEA,uFAAA;AACA,gDAAA;AACA,IAAMG,SAAS,8JAAGP,eAAlB;AAEA,IAAMQ,oBAAoB,GAAG,MAAMD,SAAN,GAAkB,YAAlB,GAAiCA,SAAjC,GAA6C,KAA1E;AAEA,IAAME,YAAY,GAAG,QAArB;AACA,IAAMC,iBAAiB,GAAG,MAAMD,YAAN,GAAqB,YAArB,GAAoCF,SAApC,GAAgD,KAA1E;AAEA,IAAMI,mBAAmB,GAAG,OAAOH,oBAAP,GAA8B,OAA9B,GAAwCE,iBAAxC,GAA4D,OAAxF;AAEA;;;CAGA,GACA,IAAME,2BAA2B,GAAG,IAAIN,MAAJ,CAAWK,mBAAX,EAAgC,GAAhC,CAApC;AAEO,IAAME,eAAe,GAAG,MAAxB;AACA,IAAMC,sBAAsB,GAAG,iBAA/B;AACA,IAAMC,wBAAwB,GAAG,QAAjC;AASQ,SAASC,mBAAT,CAA6BC,mBAA7B,EAAkD;IAChE,IAAMC,mBAAmB,GAAGD,mBAAmB,CAACE,OAApB,CAA4BL,sBAA5B,CAA5B,CADgE,CAEhE,2CAAA;IACA,IAAII,mBAAmB,GAAG,CAA1B,EAA6B;QAC5B,OAAO,IAAP;IACA;IAED,IAAME,iBAAiB,GAAGF,mBAAmB,GAAGJ,sBAAsB,CAACO,MAAvE,CAPgE,CAQhE,sCAAA;IACA,IAAID,iBAAiB,IAAIH,mBAAmB,CAACI,MAA7C,EAAqD;QACpD,OAAO,EAAP;IACA;IAED,IAAMC,eAAe,GAAGL,mBAAmB,CAACE,OAApB,CAA4B,GAA5B,EAAiCC,iBAAjC,CAAxB,CAbgE,CAchE,6CAAA;IACA,IAAIE,eAAe,IAAI,CAAvB,EAA0B;QACzB,OAAOL,mBAAmB,CAACM,SAApB,CAA8BH,iBAA9B,EAAiDE,eAAjD,CAAP;IACA,CAFD,MAEO;QACN,OAAOL,mBAAmB,CAACM,SAApB,CAA8BH,iBAA9B,CAAP;IACA;AACD;AAQM,SAASI,mBAAT,CAA6BC,YAA7B,EAA2C;IACjD,IAAIA,YAAY,KAAK,IAArB,EAA2B;QAC1B,OAAO,IAAP;IACA;IAED,IAAIA,YAAY,CAACJ,MAAb,KAAwB,CAA5B,EAA+B;QAC9B,OAAO,KAAP;IACA,CAPgD,CASjD,gFAAA;IACA,OAAOhB,qCAAqC,CAACqB,IAAtC,CAA2CD,YAA3C,KACNb,2BAA2B,CAACc,IAA5B,CAAiCD,YAAjC,CADD;AAEA","debugId":null}},
    {"offset": {"line": 19994, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js"],"sourcesContent":["import extractPhoneContext, {\r\n\tisPhoneContextValid,\r\n\tPLUS_SIGN,\r\n\tRFC3966_PREFIX_,\r\n\tRFC3966_PHONE_CONTEXT_,\r\n\tRFC3966_ISDN_SUBADDRESS_\r\n} from './extractPhoneContext.js'\r\n\r\nimport ParseError from '../ParseError.js'\r\n\r\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\r\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, {\r\n\textractFormattedPhoneNumber\r\n}) {\r\n\tconst phoneContext = extractPhoneContext(numberToParse)\r\n\tif (!isPhoneContextValid(phoneContext)) {\r\n\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t}\r\n\r\n\tlet phoneNumberString\r\n\r\n\tif (phoneContext === null) {\r\n\t\t// Extract a possible number from the string passed in.\r\n\t\t// (this strips leading characters that could not be the start of a phone number)\r\n\t\tphoneNumberString = extractFormattedPhoneNumber(numberToParse) || ''\r\n\t} else {\r\n\t\tphoneNumberString = ''\r\n\r\n\t\t// If the phone context contains a phone number prefix, we need to capture\r\n\t\t// it, whereas domains will be ignored.\r\n\t\tif (phoneContext.charAt(0) === PLUS_SIGN) {\r\n\t\t\tphoneNumberString += phoneContext\r\n\t\t}\r\n\r\n\t\t// Now append everything between the \"tel:\" prefix and the phone-context.\r\n\t\t// This should include the national number, an optional extension or\r\n\t\t// isdn-subaddress component. Note we also handle the case when \"tel:\" is\r\n\t\t// missing, as we have seen in some of the phone number inputs.\r\n\t\t// In that case, we append everything from the beginning.\r\n\t\tconst indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_)\r\n\t\tlet indexOfNationalNumber\r\n\t\t// RFC 3966 \"tel:\" prefix is preset at this stage because\r\n\t\t// `isPhoneContextValid()` requires it to be present.\r\n\t\t/* istanbul ignore else */\r\n\t\tif (indexOfRfc3966Prefix >= 0) {\r\n\t\t\tindexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length\r\n\t\t} else {\r\n\t\t\tindexOfNationalNumber = 0\r\n\t\t}\r\n\t\tconst indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_)\r\n\t\tphoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext)\r\n\t}\r\n\r\n\t// Delete the isdn-subaddress and everything after it if it is present.\r\n\t// Note extension won't appear at the same time with isdn-subaddress\r\n\t// according to paragraph 5.3 of the RFC3966 spec.\r\n\tconst indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_)\r\n\tif (indexOfIsdn > 0) {\r\n\t\tphoneNumberString = phoneNumberString.substring(0, indexOfIsdn)\r\n\t}\r\n\t// If both phone context and isdn-subaddress are absent but other\r\n\t// parameters are present, the parameters are left in nationalNumber.\r\n\t// This is because we are concerned about deleting content from a potential\r\n\t// number string when there is no strong evidence that the number is\r\n\t// actually written in RFC3966.\r\n\r\n\tif (phoneNumberString !== '') {\r\n\t\treturn phoneNumberString\r\n\t}\r\n}"],"names":["extractPhoneContext","isPhoneContextValid","PLUS_SIGN","RFC3966_PREFIX_","RFC3966_PHONE_CONTEXT_","RFC3966_ISDN_SUBADDRESS_","ParseError","extractFormattedPhoneNumberFromPossibleRfc3966NumberUri","numberToParse","extractFormattedPhoneNumber","phoneContext","phoneNumberString","charAt","indexOfRfc3966Prefix","indexOf","indexOfNationalNumber","length","indexOfPhoneContext","substring","indexOfIsdn"],"mappings":";;;AAAA,OAAOA,mBAAP,IACCC,mBADD,EAECC,SAFD,EAGCC,eAHD,EAICC,sBAJD,EAKCC,wBALD,QAMO,0BANP;AAQA,OAAOC,UAAP,MAAuB,kBAAvB;;;AAOe,SAASC,uDAAT,CAAiEC,aAAjE,EAAA,IAAA,EAEZ;IAAA,IADFC,2BACE,GAAA,KADFA,2BACE;IACF,IAAMC,YAAY,uLAAGV,UAAAA,AAAmB,EAACQ,aAAD,CAAxC;IACA,IAAI,KAACP,sMAAAA,AAAmB,EAACS,YAAD,CAAxB,EAAwC;QACvC,MAAM,gKAAIJ,UAAJ,CAAe,cAAf,CAAN;IACA;IAED,IAAIK,iBAAJ;IAEA,IAAID,YAAY,KAAK,IAArB,EAA2B;QAC1B,uDAAA;QACA,iFAAA;QACAC,iBAAiB,GAAGF,2BAA2B,CAACD,aAAD,CAA3B,IAA8C,EAAlE;IACA,CAJD,MAIO;QACNG,iBAAiB,GAAG,EAApB,CADM,CAGN,0EAAA;QACA,uCAAA;QACA,IAAID,YAAY,CAACE,MAAb,CAAoB,CAApB,sLAA2BV,YAA/B,EAA0C;YACzCS,iBAAiB,IAAID,YAArB;QACA,CAPK,CASN,yEAAA;QACA,oEAAA;QACA,yEAAA;QACA,+DAAA;QACA,yDAAA;QACA,IAAMG,oBAAoB,GAAGL,aAAa,CAACM,OAAd,iLAAsBX,kBAAtB,CAA7B;QACA,IAAIY,qBAAJ,CAfM,CAgBN,yDAAA;QACA,qDAAA;QACA,wBAAA,GACA,IAAIF,oBAAoB,IAAI,CAA5B,EAA+B;YAC9BE,qBAAqB,GAAGF,oBAAoB,mLAAGV,kBAAe,CAACa,MAA/D;QACA,CAFD,MAEO;YACND,qBAAqB,GAAG,CAAxB;QACA;QACD,IAAME,mBAAmB,GAAGT,aAAa,CAACM,OAAd,iLAAsBV,yBAAtB,CAA5B;QACAO,iBAAiB,IAAIH,aAAa,CAACU,SAAd,CAAwBH,qBAAxB,EAA+CE,mBAA/C,CAArB;IACA,CAtCC,CAwCF,uEAAA;IACA,oEAAA;IACA,kDAAA;IACA,IAAME,WAAW,GAAGR,iBAAiB,CAACG,OAAlB,iLAA0BT,2BAA1B,CAApB;IACA,IAAIc,WAAW,GAAG,CAAlB,EAAqB;QACpBR,iBAAiB,GAAGA,iBAAiB,CAACO,SAAlB,CAA4B,CAA5B,EAA+BC,WAA/B,CAApB;IACA,CA9CC,CA+CF,iEAAA;IACA,qEAAA;IACA,2EAAA;IACA,oEAAA;IACA,+BAAA;IAEA,IAAIR,iBAAiB,KAAK,EAA1B,EAA8B;QAC7B,OAAOA,iBAAP;IACA;AACD","debugId":null}},
    {"offset": {"line": 20051, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/parse.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/parse.js"],"sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN\r\n} from './constants.js'\r\n\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js'\r\nimport extractExtension from './helpers/extension/extractExtension.js'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js'\r\nimport getCountryCallingCode from './getCountryCallingCode.js'\r\nimport { isPossibleNumber } from './isPossible.js'\r\n// import { parseRFC3966 } from './helpers/RFC3966.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractNationalNumber from './helpers/extractNationalNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\r\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Examples:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\n\r\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext, error } = parseInput(text, options.v2, options.extract)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tif (error === 'TOO_SHORT') {\r\n\t\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t\t}\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcountryCallingCodeSource,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\tphoneNumber.__countryCallingCodeSource = countryCallingCodeSource\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\t// isInternational: countryCallingCode !== undefined\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (throwOnError) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\tif (extract === false) {\r\n\t\treturn text\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2, extract) {\r\n\t// // Parse RFC 3966 phone number URI.\r\n\t// if (text && text.indexOf('tel:') === 0) {\r\n\t// \treturn parseRFC3966(text)\r\n\t// }\r\n\t// let number = extractFormattedPhoneNumber(text, extract, v2)\r\n\tlet number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\r\n\t\textractFormattedPhoneNumber: (text) => extractFormattedPhoneNumber(text, extract, v2)\r\n\t})\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\tif (isViablePhoneNumberStart(number)) {\r\n\t\t\treturn { error: 'TOO_SHORT' }\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst withExtensionStripped = extractExtension(number)\r\n\tif (withExtensionStripped.ext) {\r\n\t\treturn withExtensionStripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, nationalNumber, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone: nationalNumber\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\t// Extract calling code from phone number.\r\n\tlet { countryCallingCodeSource, countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tparseIncompletePhoneNumber(formattedPhoneNumber),\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// Choose a country by `countryCallingCode`.\r\n\tlet country\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is passed in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` is `undefined`.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn {\r\n\t\t\tcountryCallingCodeSource,\r\n\t\t\tcountryCallingCode\r\n\t\t}\r\n\t}\r\n\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumber(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tmetadata\r\n\t)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = getCountryByCallingCode(countryCallingCode, {\r\n\t\tnationalNumber,\r\n\t\tdefaultCountry,\r\n\t\tmetadata\r\n\t})\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcountryCallingCodeSource,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}"],"names":["VALID_DIGITS","PLUS_CHARS","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","ParseError","Metadata","isViablePhoneNumber","isViablePhoneNumberStart","extractExtension","parseIncompletePhoneNumber","getCountryCallingCode","isPossibleNumber","PhoneNumber","matchesEntirely","extractCountryCallingCode","extractNationalNumber","stripIddPrefix","getCountryByCallingCode","extractFormattedPhoneNumberFromPossibleRfc3966NumberUri","MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","RegExp","AFTER_PHONE_NUMBER_END_PATTERN","USE_NON_GEOGRAPHIC_COUNTRY_CODE","parse","text","options","metadata","defaultCountry","hasCountry","v2","Error","parseInput","extract","formattedPhoneNumber","number","ext","error","parsePhoneNumber","defaultCallingCode","country","nationalNumber","countryCallingCode","countryCallingCodeSource","carrierCode","hasSelectedNumberingPlan","length","phoneNumber","__countryCallingCodeSource","valid","extended","nationalNumberPattern","result","possible","possibleLengths","phone","extractFormattedPhoneNumber","throwOnError","startsAt","search","slice","replace","withExtensionStripped","selectNumberingPlan","isNonGeographicCallingCode","exactCountry"],"mappings":"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","debugId":null}},
    {"offset": {"line": 20318, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/parsePhoneNumberWithError_.js"],"sourcesContent":["import parse from './parse.js'\r\n\r\nexport default function parsePhoneNumberWithError(text, options, metadata) {\r\n\treturn parse(text, { ...options, v2: true }, metadata)\r\n}"],"names":["parse","parsePhoneNumberWithError","text","options","metadata","v2"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,YAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEe,SAASC,yBAAT,CAAmCC,IAAnC,EAAyCC,OAAzC,EAAkDC,QAAlD,EAA4D;IAC1E,kKAAOJ,UAAAA,AAAK,EAACE,IAAD,EAAA,cAAA,cAAA,CAAA,GAAYC,OAAZ,GAAA,CAAA,GAAA;QAAqBE,EAAE,EAAE;IAAzB,IAAiCD,QAAjC,CAAZ;AACA","debugId":null}},
    {"offset": {"line": 20366, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/normalizeArguments.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/normalizeArguments.js"],"sourcesContent":["import isObject from './helpers/isObject.js'\r\n\r\n// Extracts the following properties from function arguments:\r\n// * input `text`\r\n// * `options` object\r\n// * `metadata` JSON\r\nexport default function normalizeArguments(args) {\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}"],"names":["isObject","normalizeArguments","args","Array","prototype","slice","call","arg_1","arg_2","arg_3","arg_4","text","options","metadata","TypeError","undefined","defaultCountry","Error"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,uBAArB,C,oPAEA,6DAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIe,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;IAChD,IAAA,wBAAqCC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BJ,IAA3B,CAArC,EAAA,yBAAA,eAAA,uBAAA,IAAOK,KAAP,GAAA,sBAAA,CAAA,EAAA,EAAcC,KAAd,GAAA,sBAAA,CAAA,EAAA,EAAqBC,KAArB,GAAA,sBAAA,CAAA,EAAA,EAA4BC,KAA5B,GAAA,sBAAA,CAAA,EAAA;IAEA,IAAIC,IAAJ;IACA,IAAIC,OAAJ;IACA,IAAIC,QAAJ,CALgD,CAOhD,6CAAA;IACA,0CAAA;IACA,IAAI,OAAON,KAAP,KAAiB,QAArB,EAA+B;QAC9BI,IAAI,GAAGJ,KAAP;IACA,CAFD,MAGK,MAAM,IAAIO,SAAJ,CAAc,sCAAd,CAAN,CAZ2C,CAchD,2EAAA;IACA,gEAAA;IACA,IAAI,CAACN,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EACA;QACC,IAAIE,KAAJ,EAAW;YACVE,OAAO,GAAGH,KAAV;YACAI,QAAQ,GAAGH,KAAX;QACA,CAHD,MAGO;YACNE,OAAO,GAAGG,SAAV;YACAF,QAAQ,GAAGJ,KAAX;QACA;QAED,IAAID,KAAJ,EAAW;YACVI,OAAO,GAAA,cAAA;gBAAKI,cAAc,EAAER;YAArB,GAA+BI,OAA/B,CAAP;QACA;IACD,CAbD,CAcA,KAEK,6KAAIZ,UAAAA,AAAQ,EAACQ,KAAD,CAAZ,EACL;QACC,IAAIC,KAAJ,EAAW;YACVG,OAAO,GAAIJ,KAAX;YACAK,QAAQ,GAAGJ,KAAX;QACA,CAHD,MAGO;YACNI,QAAQ,GAAGL,KAAX;QACA;IACD,CARI,MASA,MAAM,IAAIS,KAAJ,CAAA,4BAAA,MAAA,CAAsCT,KAAtC,EAAN;IAEL,OAAO;QACNG,IAAI,EAAJA,IADM;QAENC,OAAO,EAAPA,OAFM;QAGNC,QAAQ,EAARA;IAHM,CAAP;AAKA","debugId":null}},
    {"offset": {"line": 20494, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/node_modules/libphonenumber-js/es6/parsePhoneNumberWithError.js","sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/source/parsePhoneNumberWithError.js"],"sourcesContent":["import parsePhoneNumberWithError_ from './parsePhoneNumberWithError_.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function parsePhoneNumberWithError() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberWithError_(text, options, metadata)\r\n}"],"names":["parsePhoneNumberWithError_","normalizeArguments","parsePhoneNumberWithError","arguments","text","options","metadata"],"mappings":";;;AAAA,OAAOA,0BAAP,MAAuC,iCAAvC;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;;;AAEe,SAASC,yBAAT,GAAqC;IACnD,IAAA,8LAAoCD,UAAAA,AAAkB,EAACE,SAAD,CAAtD,EAAQC,IAAR,GAAA,oBAAQA,IAAR,EAAcC,OAAd,GAAA,oBAAcA,OAAd,EAAuBC,QAAvB,GAAA,oBAAuBA,QAAvB;IACA,uLAAON,UAAAA,AAA0B,EAACI,IAAD,EAAOC,OAAP,EAAgBC,QAAhB,CAAjC;AACA","debugId":null}},
    {"offset": {"line": 20517, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/libphonenumber-js/max/exports/parsePhoneNumberWithError.js"],"sourcesContent":["import withMetadataArgument from './withMetadataArgument.js'\r\nimport { parsePhoneNumberWithError as _parsePhoneNumberWithError } from '../../core/index.js'\r\n\r\nexport function parsePhoneNumberWithError() {\r\n\treturn withMetadataArgument(_parsePhoneNumberWithError, arguments)\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS;IACf,OAAO,CAAA,GAAA,gLAAA,CAAA,UAAoB,AAAD,EAAE,kOAAA,CAAA,4BAA0B,EAAE;AACzD","ignoreList":[0],"debugId":null}}]
}