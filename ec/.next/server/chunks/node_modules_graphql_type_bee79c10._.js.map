{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/assertName.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isNameContinue, isNameStart } from '../language/characterClasses.mjs';\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertName(name) {\n  name != null || devAssert(false, 'Must provide name.');\n  typeof name === 'string' || devAssert(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new GraphQLError('Expected name to be a non-empty string.');\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!isNameContinue(name.charCodeAt(i))) {\n      throw new GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!isNameStart(name.charCodeAt(0))) {\n    throw new GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nexport function assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new GraphQLError(`Enum values cannot be named: ${name}`);\n  }\n\n  return assertName(name);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAKO,SAAS,WAAW,IAAI;IAC7B,QAAQ,QAAQ,CAAA,GAAA,kJAAA,CAAA,YAAS,AAAD,EAAE,OAAO;IACjC,OAAO,SAAS,YAAY,CAAA,GAAA,kJAAA,CAAA,YAAS,AAAD,EAAE,OAAO;IAE7C,IAAI,KAAK,MAAM,KAAK,GAAG;QACrB,MAAM,IAAI,mJAAA,CAAA,eAAY,CAAC;IACzB;IAEA,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,EAAE,EAAG;QACpC,IAAI,CAAC,CAAA,GAAA,0JAAA,CAAA,iBAAc,AAAD,EAAE,KAAK,UAAU,CAAC,KAAK;YACvC,MAAM,IAAI,mJAAA,CAAA,eAAY,CACpB,CAAC,0CAA0C,EAAE,KAAK,WAAW,CAAC;QAElE;IACF;IAEA,IAAI,CAAC,CAAA,GAAA,0JAAA,CAAA,cAAW,AAAD,EAAE,KAAK,UAAU,CAAC,KAAK;QACpC,MAAM,IAAI,mJAAA,CAAA,eAAY,CACpB,CAAC,qCAAqC,EAAE,KAAK,WAAW,CAAC;IAE7D;IAEA,OAAO;AACT;AAOO,SAAS,oBAAoB,IAAI;IACtC,IAAI,SAAS,UAAU,SAAS,WAAW,SAAS,QAAQ;QAC1D,MAAM,IAAI,mJAAA,CAAA,eAAY,CAAC,CAAC,6BAA6B,EAAE,MAAM;IAC/D;IAEA,OAAO,WAAW;AACpB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/definition.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { identityFunc } from '../jsutils/identityFunc.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { keyValMap } from '../jsutils/keyValMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { valueFromASTUntyped } from '../utilities/valueFromASTUntyped.mjs';\nimport { assertEnumValueName, assertName } from './assertName.mjs';\nexport function isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${inspect(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      devAssert(false, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      devAssert(\n        false,\n        `Expected ${inspect(ofType)} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\nexport function getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\nexport function getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nexport function resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\nexport function resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function returns `null` or does not return a value\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\n * value will be returned in the response. It is always better to validate\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (!Number.isFinite(value)) {\n *       throw new Error(\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\n *       );\n *     }\n *\n *     if (value % 2 === 0) {\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\n *     }\n *     return value;\n *   }\n * });\n * ```\n */\nexport class GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : identityFunc;\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) => parseValue(valueFromASTUntyped(node, variables));\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${inspect(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        devAssert(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${inspect(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    devAssert(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${inspect(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: assertName(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: toObjMap(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      devAssert(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${inspect(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    devAssert(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values =\n      typeof config.values === 'function'\n        ? config.values\n        : defineEnumValues(this.name, config.values);\n    this._valueLookup = null;\n    this._nameLookup = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    if (typeof this._values === 'function') {\n      this._values = defineEnumValues(this.name, this._values());\n    }\n\n    return this._values;\n  }\n\n  getValue(name) {\n    if (this._nameLookup === null) {\n      this._nameLookup = keyMap(this.getValues(), (value) => value.name);\n    }\n\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    if (this._valueLookup === null) {\n      this._valueLookup = new Map(\n        this.getValues().map((enumValue) => [enumValue.value, enumValue]),\n      );\n    }\n\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    devAssert(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      devAssert(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${inspect(valueConfig)}.`,\n      );\n    return {\n      name: assertEnumValueName(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6, _config$isOneOf;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this.isOneOf =\n      (_config$isOneOf = config.isOneOf) !== null && _config$isOneOf !== void 0\n        ? _config$isOneOf\n        : false;\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      isOneOf: this.isOneOf,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    devAssert(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      devAssert(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: assertName(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 755, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/scalars.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { print } from '../language/printer.mjs';\nimport { GraphQLScalarType } from './definition.mjs';\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\n\nexport const GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexport const GRAPHQL_MIN_INT = -2147483648;\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          inspect(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${inspect(inputValue)}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Int cannot represent non-integer value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(coercedValue)}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        `Float cannot represent non numeric value: ${print(valueNode)}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new GraphQLError(\n      `String cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(\n        `String cannot represent a non string value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new GraphQLError(\n      `Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${inspect(inputValue)}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(\n        `Boolean cannot represent a non boolean value: ${print(valueNode)}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new GraphQLError(\n      `ID cannot represent value: ${inspect(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          print(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexport const specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 975, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/directives.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { assertName } from './assertName.mjs';\nimport {\n  argsToArgsConfig,\n  defineArguments,\n  GraphQLNonNull,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\n/**\n * Test if the given value is a GraphQL directive.\n */\n\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${inspect(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nexport class GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = assertName(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      devAssert(false, `@${config.name} locations must be an Array.`);\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    (isObjectLike(args) && !Array.isArray(args)) ||\n      devAssert(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = defineArguments(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    DirectiveLocation.FIELD,\n    DirectiveLocation.FRAGMENT_SPREAD,\n    DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    DirectiveLocation.FIELD_DEFINITION,\n    DirectiveLocation.ARGUMENT_DEFINITION,\n    DirectiveLocation.INPUT_FIELD_DEFINITION,\n    DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * Used to indicate an Input Object is a OneOf Input Object.\n */\n\nexport const GraphQLOneOfDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description:\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [DirectiveLocation.INPUT_OBJECT],\n  args: {},\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective,\n]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1133, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/introspection.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { DirectiveLocation } from '../language/directiveLocation.mjs';\nimport { print } from '../language/printer.mjs';\nimport { astFromValue } from '../utilities/astFromValue.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  isAbstractType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLBoolean, GraphQLString } from './scalars.mjs';\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__Directive)),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__DirectiveLocation)),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        }\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false || invariant(false, `Unexpected type: \"${inspect(type)}\".`);\n      },\n    },\n    name: {\n      type: GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (isInputObjectType(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n    isOneOf: {\n      type: GraphQLBoolean,\n      resolve: (type) => {\n        if (isInputObjectType(type)) {\n          return type.isOneOf;\n        }\n      },\n    },\n  }),\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new GraphQLNonNull(\n        new GraphQLList(new GraphQLNonNull(__InputValue)),\n      ),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\nvar TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (TypeKind = {}));\n\nexport { TypeKind };\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new GraphQLNonNull(GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexport const introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1640, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/schema.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport {\n  getNamedType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isUnionType,\n} from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1872, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/validate.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isOutputType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLDeprecatedDirective, isDirective } from './directives.mjs';\nimport { isIntrospectionType } from './introspection.mjs';\nimport { assertSchema } from './schema.mjs';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${inspect(\n        queryType,\n      )}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${inspect(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${inspect(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\n        `Expected directive but got: ${inspect(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive);\n\n    if (directive.locations.length === 0) {\n      context.reportError(\n        `Directive @${directive.name} must include 1 or more locations.`,\n        directive.astNode,\n      );\n    } // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${inspect(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${inspect(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${inspect(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!isInterfaceType(iface)) {\n      context.reportError(\n        `Type ${inspect(type)} must only implement Interface types, ` +\n          `it cannot implement ${inspect(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${inspect(ifaceField.type)} but ${type.name}.${fieldName} ` +\n          `is type ${inspect(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${inspect(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${inspect(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${inspect(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n\n    if (inputObj.isOneOf) {\n      validateOneOfInputObjectField(inputObj, field, context);\n    }\n  }\n}\n\nfunction validateOneOfInputObjectField(type, field, context) {\n  if (isNonNullType(field.type)) {\n    var _field$astNode4;\n\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} must be nullable.`,\n      (_field$astNode4 = field.astNode) === null || _field$astNode4 === void 0\n        ? void 0\n        : _field$astNode4.type,\n    );\n  }\n\n  if (field.defaultValue !== undefined) {\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} cannot have a default value.`,\n      field.astNode,\n    );\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) => node.name.value === GraphQLDeprecatedDirective.name,\n      );\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2279, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/assertName.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.assertEnumValueName = assertEnumValueName;\nexports.assertName = assertName;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _characterClasses = require('../language/characterClasses.js');\n\n/**\n * Upholds the spec rules about naming.\n */\nfunction assertName(name) {\n  name != null || (0, _devAssert.devAssert)(false, 'Must provide name.');\n  typeof name === 'string' ||\n    (0, _devAssert.devAssert)(false, 'Expected name to be a string.');\n\n  if (name.length === 0) {\n    throw new _GraphQLError.GraphQLError(\n      'Expected name to be a non-empty string.',\n    );\n  }\n\n  for (let i = 1; i < name.length; ++i) {\n    if (!(0, _characterClasses.isNameContinue)(name.charCodeAt(i))) {\n      throw new _GraphQLError.GraphQLError(\n        `Names must only contain [_a-zA-Z0-9] but \"${name}\" does not.`,\n      );\n    }\n  }\n\n  if (!(0, _characterClasses.isNameStart)(name.charCodeAt(0))) {\n    throw new _GraphQLError.GraphQLError(\n      `Names must start with [_a-zA-Z] but \"${name}\" does not.`,\n    );\n  }\n\n  return name;\n}\n/**\n * Upholds the spec rules about naming enum values.\n *\n * @internal\n */\n\nfunction assertEnumValueName(name) {\n  if (name === 'true' || name === 'false' || name === 'null') {\n    throw new _GraphQLError.GraphQLError(\n      `Enum values cannot be named: ${name}`,\n    );\n  }\n\n  return assertName(name);\n}\n"],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,mBAAmB,GAAG;AAC9B,QAAQ,UAAU,GAAG;AAErB,IAAI;AAEJ,IAAI;AAEJ,IAAI;AAEJ;;CAEC,GACD,SAAS,WAAW,IAAI;IACtB,QAAQ,QAAQ,CAAC,GAAG,WAAW,SAAS,EAAE,OAAO;IACjD,OAAO,SAAS,YACd,CAAC,GAAG,WAAW,SAAS,EAAE,OAAO;IAEnC,IAAI,KAAK,MAAM,KAAK,GAAG;QACrB,MAAM,IAAI,cAAc,YAAY,CAClC;IAEJ;IAEA,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,EAAE,EAAG;QACpC,IAAI,CAAC,CAAC,GAAG,kBAAkB,cAAc,EAAE,KAAK,UAAU,CAAC,KAAK;YAC9D,MAAM,IAAI,cAAc,YAAY,CAClC,CAAC,0CAA0C,EAAE,KAAK,WAAW,CAAC;QAElE;IACF;IAEA,IAAI,CAAC,CAAC,GAAG,kBAAkB,WAAW,EAAE,KAAK,UAAU,CAAC,KAAK;QAC3D,MAAM,IAAI,cAAc,YAAY,CAClC,CAAC,qCAAqC,EAAE,KAAK,WAAW,CAAC;IAE7D;IAEA,OAAO;AACT;AACA;;;;CAIC,GAED,SAAS,oBAAoB,IAAI;IAC/B,IAAI,SAAS,UAAU,SAAS,WAAW,SAAS,QAAQ;QAC1D,MAAM,IAAI,cAAc,YAAY,CAClC,CAAC,6BAA6B,EAAE,MAAM;IAE1C;IAEA,OAAO,WAAW;AACpB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2321, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/definition.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.GraphQLUnionType =\n  exports.GraphQLScalarType =\n  exports.GraphQLObjectType =\n  exports.GraphQLNonNull =\n  exports.GraphQLList =\n  exports.GraphQLInterfaceType =\n  exports.GraphQLInputObjectType =\n  exports.GraphQLEnumType =\n    void 0;\nexports.argsToArgsConfig = argsToArgsConfig;\nexports.assertAbstractType = assertAbstractType;\nexports.assertCompositeType = assertCompositeType;\nexports.assertEnumType = assertEnumType;\nexports.assertInputObjectType = assertInputObjectType;\nexports.assertInputType = assertInputType;\nexports.assertInterfaceType = assertInterfaceType;\nexports.assertLeafType = assertLeafType;\nexports.assertListType = assertListType;\nexports.assertNamedType = assertNamedType;\nexports.assertNonNullType = assertNonNullType;\nexports.assertNullableType = assertNullableType;\nexports.assertObjectType = assertObjectType;\nexports.assertOutputType = assertOutputType;\nexports.assertScalarType = assertScalarType;\nexports.assertType = assertType;\nexports.assertUnionType = assertUnionType;\nexports.assertWrappingType = assertWrappingType;\nexports.defineArguments = defineArguments;\nexports.getNamedType = getNamedType;\nexports.getNullableType = getNullableType;\nexports.isAbstractType = isAbstractType;\nexports.isCompositeType = isCompositeType;\nexports.isEnumType = isEnumType;\nexports.isInputObjectType = isInputObjectType;\nexports.isInputType = isInputType;\nexports.isInterfaceType = isInterfaceType;\nexports.isLeafType = isLeafType;\nexports.isListType = isListType;\nexports.isNamedType = isNamedType;\nexports.isNonNullType = isNonNullType;\nexports.isNullableType = isNullableType;\nexports.isObjectType = isObjectType;\nexports.isOutputType = isOutputType;\nexports.isRequiredArgument = isRequiredArgument;\nexports.isRequiredInputField = isRequiredInputField;\nexports.isScalarType = isScalarType;\nexports.isType = isType;\nexports.isUnionType = isUnionType;\nexports.isWrappingType = isWrappingType;\nexports.resolveObjMapThunk = resolveObjMapThunk;\nexports.resolveReadonlyArrayThunk = resolveReadonlyArrayThunk;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _didYouMean = require('../jsutils/didYouMean.js');\n\nvar _identityFunc = require('../jsutils/identityFunc.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _instanceOf = require('../jsutils/instanceOf.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _keyMap = require('../jsutils/keyMap.js');\n\nvar _keyValMap = require('../jsutils/keyValMap.js');\n\nvar _mapValue = require('../jsutils/mapValue.js');\n\nvar _suggestionList = require('../jsutils/suggestionList.js');\n\nvar _toObjMap = require('../jsutils/toObjMap.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _printer = require('../language/printer.js');\n\nvar _valueFromASTUntyped = require('../utilities/valueFromASTUntyped.js');\n\nvar _assertName = require('./assertName.js');\n\nfunction isType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    isListType(type) ||\n    isNonNullType(type)\n  );\n}\n\nfunction assertType(type) {\n  if (!isType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\nfunction isScalarType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLScalarType);\n}\n\nfunction assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Scalar type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isObjectType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLObjectType);\n}\n\nfunction assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Object type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isInterfaceType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLInterfaceType);\n}\n\nfunction assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Interface type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isUnionType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLUnionType);\n}\n\nfunction assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Union type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isEnumType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLEnumType);\n}\n\nfunction assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Enum type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isInputObjectType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLInputObjectType);\n}\n\nfunction assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(\n        type,\n      )} to be a GraphQL Input Object type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isListType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLList);\n}\n\nfunction assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL List type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction isNonNullType(type) {\n  return (0, _instanceOf.instanceOf)(type, GraphQLNonNull);\n}\n\nfunction assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL Non-Null type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nfunction isInputType(type) {\n  return (\n    isScalarType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type) ||\n    (isWrappingType(type) && isInputType(type.ofType))\n  );\n}\n\nfunction assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL input type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nfunction isOutputType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    (isWrappingType(type) && isOutputType(type.ofType))\n  );\n}\n\nfunction assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL output type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nfunction isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\n\nfunction assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL leaf type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nfunction isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\n\nfunction assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL composite type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nfunction isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\n\nfunction assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL abstract type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     parents: { type: new GraphQLList(PersonType) },\n *     children: { type: new GraphQLList(PersonType) },\n *   })\n * })\n * ```\n */\n\nclass GraphQLList {\n  constructor(ofType) {\n    isType(ofType) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `Expected ${(0, _inspect.inspect)(ofType)} to be a GraphQL type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n * ```ts\n * const RowType = new GraphQLObjectType({\n *   name: 'Row',\n *   fields: () => ({\n *     id: { type: new GraphQLNonNull(GraphQLString) },\n *   })\n * })\n * ```\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexports.GraphQLList = GraphQLList;\n\nclass GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `Expected ${(0, _inspect.inspect)(\n          ofType,\n        )} to be a GraphQL nullable type.`,\n      );\n    this.ofType = ofType;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n/**\n * These types wrap and modify other types\n */\n\nexports.GraphQLNonNull = GraphQLNonNull;\n\nfunction isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\n\nfunction assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL wrapping type.`,\n    );\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nfunction isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\n\nfunction assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL nullable type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction getNullableType(type) {\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nfunction isNamedType(type) {\n  return (\n    isScalarType(type) ||\n    isObjectType(type) ||\n    isInterfaceType(type) ||\n    isUnionType(type) ||\n    isEnumType(type) ||\n    isInputObjectType(type)\n  );\n}\n\nfunction assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(type)} to be a GraphQL named type.`,\n    );\n  }\n\n  return type;\n}\n\nfunction getNamedType(type) {\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nfunction resolveReadonlyArrayThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n\nfunction resolveObjMapThunk(thunk) {\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function returns `null` or does not return a value\n * (i.e. it returns `undefined`) then an error will be raised and a `null`\n * value will be returned in the response. It is always better to validate\n *\n * Example:\n *\n * ```ts\n * const OddType = new GraphQLScalarType({\n *   name: 'Odd',\n *   serialize(value) {\n *     if (!Number.isFinite(value)) {\n *       throw new Error(\n *         `Scalar \"Odd\" cannot represent \"${value}\" since it is not a finite number.`,\n *       );\n *     }\n *\n *     if (value % 2 === 0) {\n *       throw new Error(`Scalar \"Odd\" cannot represent \"${value}\" since it is even.`);\n *     }\n *     return value;\n *   }\n * });\n * ```\n */\nclass GraphQLScalarType {\n  constructor(config) {\n    var _config$parseValue,\n      _config$serialize,\n      _config$parseLiteral,\n      _config$extensionASTN;\n\n    const parseValue =\n      (_config$parseValue = config.parseValue) !== null &&\n      _config$parseValue !== void 0\n        ? _config$parseValue\n        : _identityFunc.identityFunc;\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.specifiedByURL = config.specifiedByURL;\n    this.serialize =\n      (_config$serialize = config.serialize) !== null &&\n      _config$serialize !== void 0\n        ? _config$serialize\n        : _identityFunc.identityFunc;\n    this.parseValue = parseValue;\n    this.parseLiteral =\n      (_config$parseLiteral = config.parseLiteral) !== null &&\n      _config$parseLiteral !== void 0\n        ? _config$parseLiteral\n        : (node, variables) =>\n            parseValue(\n              (0, _valueFromASTUntyped.valueFromASTUntyped)(node, variables),\n            );\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    config.specifiedByURL == null ||\n      typeof config.specifiedByURL === 'string' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"specifiedByURL\" as a string, ` +\n          `but got: ${(0, _inspect.inspect)(config.specifiedByURL)}.`,\n      );\n    config.serialize == null ||\n      typeof config.serialize === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`,\n      );\n\n    if (config.parseLiteral) {\n      (typeof config.parseValue === 'function' &&\n        typeof config.parseLiteral === 'function') ||\n        (0, _devAssert.devAssert)(\n          false,\n          `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`,\n        );\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByURL: this.specifiedByURL,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLScalarType = GraphQLScalarType;\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n * ```ts\n * const AddressType = new GraphQLObjectType({\n *   name: 'Address',\n *   fields: {\n *     street: { type: GraphQLString },\n *     number: { type: GraphQLInt },\n *     formatted: {\n *       type: GraphQLString,\n *       resolve(obj) {\n *         return obj.number + ' ' + obj.street\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n * ```ts\n * const PersonType = new GraphQLObjectType({\n *   name: 'Person',\n *   fields: () => ({\n *     name: { type: GraphQLString },\n *     bestFriend: { type: PersonType },\n *   })\n * });\n * ```\n */\nclass GraphQLObjectType {\n  constructor(config) {\n    var _config$extensionASTN2;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN2 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN2 !== void 0\n        ? _config$extensionASTN2\n        : [];\n\n    this._fields = () => defineFieldMap(config);\n\n    this._interfaces = () => defineInterfaces(config);\n\n    config.isTypeOf == null ||\n      typeof config.isTypeOf === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"isTypeOf\" as a function, ` +\n          `but got: ${(0, _inspect.inspect)(config.isTypeOf)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLObjectType = GraphQLObjectType;\n\nfunction defineInterfaces(config) {\n  var _config$interfaces;\n\n  const interfaces = resolveReadonlyArrayThunk(\n    (_config$interfaces = config.interfaces) !== null &&\n      _config$interfaces !== void 0\n      ? _config$interfaces\n      : [],\n  );\n  Array.isArray(interfaces) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `${config.name} interfaces must be an Array or a function which returns an Array.`,\n    );\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {\n    var _fieldConfig$args;\n\n    isPlainObj(fieldConfig) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${config.name}.${fieldName} field config must be an object.`,\n      );\n    fieldConfig.resolve == null ||\n      typeof fieldConfig.resolve === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${config.name}.${fieldName} field resolver must be a function if ` +\n          `provided, but got: ${(0, _inspect.inspect)(fieldConfig.resolve)}.`,\n      );\n    const argsConfig =\n      (_fieldConfig$args = fieldConfig.args) !== null &&\n      _fieldConfig$args !== void 0\n        ? _fieldConfig$args\n        : {};\n    isPlainObj(argsConfig) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${config.name}.${fieldName} args must be an object with argument names as keys.`,\n      );\n    return {\n      name: (0, _assertName.assertName)(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args: defineArguments(argsConfig),\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nfunction defineArguments(config) {\n  return Object.entries(config).map(([argName, argConfig]) => ({\n    name: (0, _assertName.assertName)(argName),\n    description: argConfig.description,\n    type: argConfig.type,\n    defaultValue: argConfig.defaultValue,\n    deprecationReason: argConfig.deprecationReason,\n    extensions: (0, _toObjMap.toObjMap)(argConfig.extensions),\n    astNode: argConfig.astNode,\n  }));\n}\n\nfunction isPlainObj(obj) {\n  return (0, _isObjectLike.isObjectLike)(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return (0, _mapValue.mapValue)(fields, (field) => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode,\n  }));\n}\n/**\n * @internal\n */\n\nfunction argsToArgsConfig(args) {\n  return (0, _keyValMap.keyValMap)(\n    args,\n    (arg) => arg.name,\n    (arg) => ({\n      description: arg.description,\n      type: arg.type,\n      defaultValue: arg.defaultValue,\n      deprecationReason: arg.deprecationReason,\n      extensions: arg.extensions,\n      astNode: arg.astNode,\n    }),\n  );\n}\n\nfunction isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const EntityType = new GraphQLInterfaceType({\n *   name: 'Entity',\n *   fields: {\n *     name: { type: GraphQLString }\n *   }\n * });\n * ```\n */\nclass GraphQLInterfaceType {\n  constructor(config) {\n    var _config$extensionASTN3;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN3 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN3 !== void 0\n        ? _config$extensionASTN3\n        : [];\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${(0, _inspect.inspect)(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLInterfaceType = GraphQLInterfaceType;\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n * ```ts\n * const PetType = new GraphQLUnionType({\n *   name: 'Pet',\n *   types: [ DogType, CatType ],\n *   resolveType(value) {\n *     if (value instanceof Dog) {\n *       return DogType;\n *     }\n *     if (value instanceof Cat) {\n *       return CatType;\n *     }\n *   }\n * });\n * ```\n */\nclass GraphQLUnionType {\n  constructor(config) {\n    var _config$extensionASTN4;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN4 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN4 !== void 0\n        ? _config$extensionASTN4\n        : [];\n    this._types = defineTypes.bind(undefined, config);\n    config.resolveType == null ||\n      typeof config.resolveType === 'function' ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${this.name} must provide \"resolveType\" as a function, ` +\n          `but got: ${(0, _inspect.inspect)(config.resolveType)}.`,\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLUnionType = GraphQLUnionType;\n\nfunction defineTypes(config) {\n  const types = resolveReadonlyArrayThunk(config.types);\n  Array.isArray(types) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `Must provide Array of types or a function which returns such an array for Union ${config.name}.`,\n    );\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n * ```ts\n * const RGBType = new GraphQLEnumType({\n *   name: 'RGB',\n *   values: {\n *     RED: { value: 0 },\n *     GREEN: { value: 1 },\n *     BLUE: { value: 2 }\n *   }\n * });\n * ```\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nclass GraphQLEnumType {\n  /* <T> */\n  constructor(config) {\n    var _config$extensionASTN5;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN5 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN5 !== void 0\n        ? _config$extensionASTN5\n        : [];\n    this._values =\n      typeof config.values === 'function'\n        ? config.values\n        : defineEnumValues(this.name, config.values);\n    this._valueLookup = null;\n    this._nameLookup = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n  getValues() {\n    if (typeof this._values === 'function') {\n      this._values = defineEnumValues(this.name, this._values());\n    }\n\n    return this._values;\n  }\n\n  getValue(name) {\n    if (this._nameLookup === null) {\n      this._nameLookup = (0, _keyMap.keyMap)(\n        this.getValues(),\n        (value) => value.name,\n      );\n    }\n\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    if (this._valueLookup === null) {\n      this._valueLookup = new Map(\n        this.getValues().map((enumValue) => [enumValue.value, enumValue]),\n      );\n    }\n\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new _GraphQLError.GraphQLError(\n        `Enum \"${this.name}\" cannot represent value: ${(0, _inspect.inspect)(\n          outputValue,\n        )}`,\n      );\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue) /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = (0, _inspect.inspect)(inputValue);\n      throw new _GraphQLError.GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n      );\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new _GraphQLError.GraphQLError(\n        `Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, inputValue),\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables) /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== _kinds.Kind.ENUM) {\n      const valueStr = (0, _printer.print)(valueNode);\n      throw new _GraphQLError.GraphQLError(\n        `Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = (0, _printer.print)(valueNode);\n      throw new _GraphQLError.GraphQLError(\n        `Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` +\n          didYouMeanEnumValue(this, valueStr),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = (0, _keyValMap.keyValMap)(\n      this.getValues(),\n      (value) => value.name,\n      (value) => ({\n        description: value.description,\n        value: value.value,\n        deprecationReason: value.deprecationReason,\n        extensions: value.extensions,\n        astNode: value.astNode,\n      }),\n    );\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLEnumType = GraphQLEnumType;\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map((value) => value.name);\n  const suggestedValues = (0, _suggestionList.suggestionList)(\n    unknownValueStr,\n    allNames,\n  );\n  return (0, _didYouMean.didYouMean)('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `${typeName} values must be an object with value names as keys.`,\n    );\n  return Object.entries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${typeName}.${valueName} must refer to an object with a \"value\" key ` +\n          `representing an internal value but got: ${(0, _inspect.inspect)(\n            valueConfig,\n          )}.`,\n      );\n    return {\n      name: (0, _assertName.assertEnumValueName)(valueName),\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: (0, _toObjMap.toObjMap)(valueConfig.extensions),\n      astNode: valueConfig.astNode,\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n * ```ts\n * const GeoPoint = new GraphQLInputObjectType({\n *   name: 'GeoPoint',\n *   fields: {\n *     lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *     lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *     alt: { type: GraphQLFloat, defaultValue: 0 },\n *   }\n * });\n * ```\n */\nclass GraphQLInputObjectType {\n  constructor(config) {\n    var _config$extensionASTN6, _config$isOneOf;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN6 = config.extensionASTNodes) !== null &&\n      _config$extensionASTN6 !== void 0\n        ? _config$extensionASTN6\n        : [];\n    this.isOneOf =\n      (_config$isOneOf = config.isOneOf) !== null && _config$isOneOf !== void 0\n        ? _config$isOneOf\n        : false;\n    this._fields = defineInputFieldMap.bind(undefined, config);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = (0, _mapValue.mapValue)(this.getFields(), (field) => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      deprecationReason: field.deprecationReason,\n      extensions: field.extensions,\n      astNode: field.astNode,\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      isOneOf: this.isOneOf,\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLInputObjectType = GraphQLInputObjectType;\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveObjMapThunk(config.fields);\n  isPlainObj(fieldMap) ||\n    (0, _devAssert.devAssert)(\n      false,\n      `${config.name} fields must be an object with field names as keys or a function which returns such an object.`,\n    );\n  return (0, _mapValue.mapValue)(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`,\n      );\n    return {\n      name: (0, _assertName.assertName)(fieldName),\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: (0, _toObjMap.toObjMap)(fieldConfig.extensions),\n      astNode: fieldConfig.astNode,\n    };\n  });\n}\n\nfunction isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3244, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/scalars.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.GraphQLString =\n  exports.GraphQLInt =\n  exports.GraphQLID =\n  exports.GraphQLFloat =\n  exports.GraphQLBoolean =\n  exports.GRAPHQL_MIN_INT =\n  exports.GRAPHQL_MAX_INT =\n    void 0;\nexports.isSpecifiedScalarType = isSpecifiedScalarType;\nexports.specifiedScalarTypes = void 0;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _kinds = require('../language/kinds.js');\n\nvar _printer = require('../language/printer.js');\n\nvar _definition = require('./definition.js');\n\n/**\n * Maximum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe up-to 2^53 - 1\n * */\nconst GRAPHQL_MAX_INT = 2147483647;\n/**\n * Minimum possible Int value as per GraphQL Spec (32-bit signed integer).\n * n.b. This differs from JavaScript's numbers that are IEEE 754 doubles safe starting at -(2^53 - 1)\n * */\n\nexports.GRAPHQL_MAX_INT = GRAPHQL_MAX_INT;\nconst GRAPHQL_MIN_INT = -2147483648;\nexports.GRAPHQL_MIN_INT = GRAPHQL_MIN_INT;\nconst GraphQLInt = new _definition.GraphQLScalarType({\n  name: 'Int',\n  description:\n    'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isInteger(num)) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _inspect.inspect)(\n          coercedValue,\n        )}`,\n      );\n    }\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        'Int cannot represent non 32-bit signed integer value: ' +\n          (0, _inspect.inspect)(coercedValue),\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    if (inputValue > GRAPHQL_MAX_INT || inputValue < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${inputValue}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non-integer value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > GRAPHQL_MAX_INT || num < GRAPHQL_MIN_INT) {\n      throw new _GraphQLError.GraphQLError(\n        `Int cannot represent non 32-bit signed integer value: ${valueNode.value}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return num;\n  },\n});\nexports.GraphQLInt = GraphQLInt;\nconst GraphQLFloat = new _definition.GraphQLScalarType({\n  name: 'Float',\n  description:\n    'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 1 : 0;\n    }\n\n    let num = coercedValue;\n\n    if (typeof coercedValue === 'string' && coercedValue !== '') {\n      num = Number(coercedValue);\n    }\n\n    if (typeof num !== 'number' || !Number.isFinite(num)) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _inspect.inspect)(\n          coercedValue,\n        )}`,\n      );\n    }\n\n    return num;\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (\n      valueNode.kind !== _kinds.Kind.FLOAT &&\n      valueNode.kind !== _kinds.Kind.INT\n    ) {\n      throw new _GraphQLError.GraphQLError(\n        `Float cannot represent non numeric value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        valueNode,\n      );\n    }\n\n    return parseFloat(valueNode.value);\n  },\n});\nexports.GraphQLFloat = GraphQLFloat;\nconst GraphQLString = new _definition.GraphQLScalarType({\n  name: 'String',\n  description:\n    'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n    // attempt to coerce object, function, symbol, or other types as strings.\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue ? 'true' : 'false';\n    }\n\n    if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n      return coercedValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `String cannot represent value: ${(0, _inspect.inspect)(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'string') {\n      throw new _GraphQLError.GraphQLError(\n        `String cannot represent a non string value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.STRING) {\n      throw new _GraphQLError.GraphQLError(\n        `String cannot represent a non string value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLString = GraphQLString;\nconst GraphQLBoolean = new _definition.GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'boolean') {\n      return coercedValue;\n    }\n\n    if (Number.isFinite(coercedValue)) {\n      return coercedValue !== 0;\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(\n        coercedValue,\n      )}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue !== 'boolean') {\n      throw new _GraphQLError.GraphQLError(\n        `Boolean cannot represent a non boolean value: ${(0, _inspect.inspect)(\n          inputValue,\n        )}`,\n      );\n    }\n\n    return inputValue;\n  },\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== _kinds.Kind.BOOLEAN) {\n      throw new _GraphQLError.GraphQLError(\n        `Boolean cannot represent a non boolean value: ${(0, _printer.print)(\n          valueNode,\n        )}`,\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLBoolean = GraphQLBoolean;\nconst GraphQLID = new _definition.GraphQLScalarType({\n  name: 'ID',\n  description:\n    'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n\n  serialize(outputValue) {\n    const coercedValue = serializeObject(outputValue);\n\n    if (typeof coercedValue === 'string') {\n      return coercedValue;\n    }\n\n    if (Number.isInteger(coercedValue)) {\n      return String(coercedValue);\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `ID cannot represent value: ${(0, _inspect.inspect)(outputValue)}`,\n    );\n  },\n\n  parseValue(inputValue) {\n    if (typeof inputValue === 'string') {\n      return inputValue;\n    }\n\n    if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n      return inputValue.toString();\n    }\n\n    throw new _GraphQLError.GraphQLError(\n      `ID cannot represent value: ${(0, _inspect.inspect)(inputValue)}`,\n    );\n  },\n\n  parseLiteral(valueNode) {\n    if (\n      valueNode.kind !== _kinds.Kind.STRING &&\n      valueNode.kind !== _kinds.Kind.INT\n    ) {\n      throw new _GraphQLError.GraphQLError(\n        'ID cannot represent a non-string and non-integer value: ' +\n          (0, _printer.print)(valueNode),\n        {\n          nodes: valueNode,\n        },\n      );\n    }\n\n    return valueNode.value;\n  },\n});\nexports.GraphQLID = GraphQLID;\nconst specifiedScalarTypes = Object.freeze([\n  GraphQLString,\n  GraphQLInt,\n  GraphQLFloat,\n  GraphQLBoolean,\n  GraphQLID,\n]);\nexports.specifiedScalarTypes = specifiedScalarTypes;\n\nfunction isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({ name }) => type.name === name);\n} // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if ((0, _isObjectLike.isObjectLike)(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!(0, _isObjectLike.isObjectLike)(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3469, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/directives.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.GraphQLSpecifiedByDirective =\n  exports.GraphQLSkipDirective =\n  exports.GraphQLOneOfDirective =\n  exports.GraphQLIncludeDirective =\n  exports.GraphQLDirective =\n  exports.GraphQLDeprecatedDirective =\n  exports.DEFAULT_DEPRECATION_REASON =\n    void 0;\nexports.assertDirective = assertDirective;\nexports.isDirective = isDirective;\nexports.isSpecifiedDirective = isSpecifiedDirective;\nexports.specifiedDirectives = void 0;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _instanceOf = require('../jsutils/instanceOf.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _toObjMap = require('../jsutils/toObjMap.js');\n\nvar _directiveLocation = require('../language/directiveLocation.js');\n\nvar _assertName = require('./assertName.js');\n\nvar _definition = require('./definition.js');\n\nvar _scalars = require('./scalars.js');\n\n/**\n * Test if the given value is a GraphQL directive.\n */\nfunction isDirective(directive) {\n  return (0, _instanceOf.instanceOf)(directive, GraphQLDirective);\n}\n\nfunction assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(directive)} to be a GraphQL directive.`,\n    );\n  }\n\n  return directive;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\nclass GraphQLDirective {\n  constructor(config) {\n    var _config$isRepeatable, _config$args;\n\n    this.name = (0, _assertName.assertName)(config.name);\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable =\n      (_config$isRepeatable = config.isRepeatable) !== null &&\n      _config$isRepeatable !== void 0\n        ? _config$isRepeatable\n        : false;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    Array.isArray(config.locations) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `@${config.name} locations must be an Array.`,\n      );\n    const args =\n      (_config$args = config.args) !== null && _config$args !== void 0\n        ? _config$args\n        : {};\n    ((0, _isObjectLike.isObjectLike)(args) && !Array.isArray(args)) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `@${config.name} args must be an object with argument names as keys.`,\n      );\n    this.args = (0, _definition.defineArguments)(args);\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: (0, _definition.argsToArgsConfig)(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode,\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n}\n\nexports.GraphQLDirective = GraphQLDirective;\n\n/**\n * Used to conditionally include fields or fragments.\n */\nconst GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description:\n    'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [\n    _directiveLocation.DirectiveLocation.FIELD,\n    _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,\n    _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      description: 'Included when true.',\n    },\n  },\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexports.GraphQLIncludeDirective = GraphQLIncludeDirective;\nconst GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description:\n    'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [\n    _directiveLocation.DirectiveLocation.FIELD,\n    _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,\n    _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,\n  ],\n  args: {\n    if: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      description: 'Skipped when true.',\n    },\n  },\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexports.GraphQLSkipDirective = GraphQLSkipDirective;\nconst DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexports.DEFAULT_DEPRECATION_REASON = DEFAULT_DEPRECATION_REASON;\nconst GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [\n    _directiveLocation.DirectiveLocation.FIELD_DEFINITION,\n    _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,\n    _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,\n    _directiveLocation.DirectiveLocation.ENUM_VALUE,\n  ],\n  args: {\n    reason: {\n      type: _scalars.GraphQLString,\n      description:\n        'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON,\n    },\n  },\n});\n/**\n * Used to provide a URL for specifying the behavior of custom scalar definitions.\n */\n\nexports.GraphQLDeprecatedDirective = GraphQLDeprecatedDirective;\nconst GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behavior of this scalar.',\n  locations: [_directiveLocation.DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      description: 'The URL that specifies the behavior of this scalar.',\n    },\n  },\n});\n/**\n * Used to indicate an Input Object is a OneOf Input Object.\n */\n\nexports.GraphQLSpecifiedByDirective = GraphQLSpecifiedByDirective;\nconst GraphQLOneOfDirective = new GraphQLDirective({\n  name: 'oneOf',\n  description:\n    'Indicates exactly one field must be supplied and this field must not be `null`.',\n  locations: [_directiveLocation.DirectiveLocation.INPUT_OBJECT],\n  args: {},\n});\n/**\n * The full list of specified directives.\n */\n\nexports.GraphQLOneOfDirective = GraphQLOneOfDirective;\nconst specifiedDirectives = Object.freeze([\n  GraphQLIncludeDirective,\n  GraphQLSkipDirective,\n  GraphQLDeprecatedDirective,\n  GraphQLSpecifiedByDirective,\n  GraphQLOneOfDirective,\n]);\nexports.specifiedDirectives = specifiedDirectives;\n\nfunction isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({ name }) => name === directive.name);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3650, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/introspection.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.introspectionTypes =\n  exports.__TypeKind =\n  exports.__Type =\n  exports.__Schema =\n  exports.__InputValue =\n  exports.__Field =\n  exports.__EnumValue =\n  exports.__DirectiveLocation =\n  exports.__Directive =\n  exports.TypeNameMetaFieldDef =\n  exports.TypeMetaFieldDef =\n  exports.TypeKind =\n  exports.SchemaMetaFieldDef =\n    void 0;\nexports.isIntrospectionType = isIntrospectionType;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _invariant = require('../jsutils/invariant.js');\n\nvar _directiveLocation = require('../language/directiveLocation.js');\n\nvar _printer = require('../language/printer.js');\n\nvar _astFromValue = require('../utilities/astFromValue.js');\n\nvar _definition = require('./definition.js');\n\nvar _scalars = require('./scalars.js');\n\nconst __Schema = new _definition.GraphQLObjectType({\n  name: '__Schema',\n  description:\n    'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (schema) => schema.description,\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n      ),\n\n      resolve(schema) {\n        return Object.values(schema.getTypeMap());\n      },\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new _definition.GraphQLNonNull(__Type),\n      resolve: (schema) => schema.getQueryType(),\n    },\n    mutationType: {\n      description:\n        'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getMutationType(),\n    },\n    subscriptionType: {\n      description:\n        'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: (schema) => schema.getSubscriptionType(),\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(\n          new _definition.GraphQLNonNull(__Directive),\n        ),\n      ),\n      resolve: (schema) => schema.getDirectives(),\n    },\n  }),\n});\n\nexports.__Schema = __Schema;\n\nconst __Directive = new _definition.GraphQLObjectType({\n  name: '__Directive',\n  description:\n    \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      resolve: (directive) => directive.name,\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (directive) => directive.description,\n    },\n    isRepeatable: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      resolve: (directive) => directive.isRepeatable,\n    },\n    locations: {\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(\n          new _definition.GraphQLNonNull(__DirectiveLocation),\n        ),\n      ),\n      resolve: (directive) => directive.locations,\n    },\n    args: {\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(\n          new _definition.GraphQLNonNull(__InputValue),\n        ),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n  }),\n});\n\nexports.__Directive = __Directive;\n\nconst __DirectiveLocation = new _definition.GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description:\n    'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: _directiveLocation.DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.',\n    },\n    MUTATION: {\n      value: _directiveLocation.DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.',\n    },\n    SUBSCRIPTION: {\n      value: _directiveLocation.DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.',\n    },\n    FIELD: {\n      value: _directiveLocation.DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.',\n    },\n    FRAGMENT_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.',\n    },\n    FRAGMENT_SPREAD: {\n      value: _directiveLocation.DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.',\n    },\n    INLINE_FRAGMENT: {\n      value: _directiveLocation.DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.',\n    },\n    VARIABLE_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.',\n    },\n    SCHEMA: {\n      value: _directiveLocation.DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.',\n    },\n    SCALAR: {\n      value: _directiveLocation.DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.',\n    },\n    OBJECT: {\n      value: _directiveLocation.DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.',\n    },\n    FIELD_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.',\n    },\n    ARGUMENT_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.',\n    },\n    INTERFACE: {\n      value: _directiveLocation.DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.',\n    },\n    UNION: {\n      value: _directiveLocation.DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.',\n    },\n    ENUM: {\n      value: _directiveLocation.DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.',\n    },\n    ENUM_VALUE: {\n      value: _directiveLocation.DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.',\n    },\n    INPUT_OBJECT: {\n      value: _directiveLocation.DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.',\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: _directiveLocation.DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.',\n    },\n  },\n});\n\nexports.__DirectiveLocation = __DirectiveLocation;\n\nconst __Type = new _definition.GraphQLObjectType({\n  name: '__Type',\n  description:\n    'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new _definition.GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if ((0, _definition.isScalarType)(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if ((0, _definition.isObjectType)(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if ((0, _definition.isInterfaceType)(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if ((0, _definition.isUnionType)(type)) {\n          return TypeKind.UNION;\n        }\n\n        if ((0, _definition.isEnumType)(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if ((0, _definition.isInputObjectType)(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if ((0, _definition.isListType)(type)) {\n          return TypeKind.LIST;\n        }\n\n        if ((0, _definition.isNonNullType)(type)) {\n          return TypeKind.NON_NULL;\n        }\n        /* c8 ignore next 3 */\n        // Not reachable, all possible types have been considered)\n\n        false ||\n          (0, _invariant.invariant)(\n            false,\n            `Unexpected type: \"${(0, _inspect.inspect)(type)}\".`,\n          );\n      },\n    },\n    name: {\n      type: _scalars.GraphQLString,\n      resolve: (type) => ('name' in type ? type.name : undefined),\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (\n        type, // FIXME: add test case\n      ) =>\n        /* c8 ignore next */\n        'description' in type ? type.description : undefined,\n    },\n    specifiedByURL: {\n      type: _scalars.GraphQLString,\n      resolve: (obj) =>\n        'specifiedByURL' in obj ? obj.specifiedByURL : undefined,\n    },\n    fields: {\n      type: new _definition.GraphQLList(\n        new _definition.GraphQLNonNull(__Field),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if (\n          (0, _definition.isObjectType)(type) ||\n          (0, _definition.isInterfaceType)(type)\n        ) {\n          const fields = Object.values(type.getFields());\n          return includeDeprecated\n            ? fields\n            : fields.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    interfaces: {\n      type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (\n          (0, _definition.isObjectType)(type) ||\n          (0, _definition.isInterfaceType)(type)\n        ) {\n          return type.getInterfaces();\n        }\n      },\n    },\n    possibleTypes: {\n      type: new _definition.GraphQLList(new _definition.GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, { schema }) {\n        if ((0, _definition.isAbstractType)(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      },\n    },\n    enumValues: {\n      type: new _definition.GraphQLList(\n        new _definition.GraphQLNonNull(__EnumValue),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if ((0, _definition.isEnumType)(type)) {\n          const values = type.getValues();\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    inputFields: {\n      type: new _definition.GraphQLList(\n        new _definition.GraphQLNonNull(__InputValue),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(type, { includeDeprecated }) {\n        if ((0, _definition.isInputObjectType)(type)) {\n          const values = Object.values(type.getFields());\n          return includeDeprecated\n            ? values\n            : values.filter((field) => field.deprecationReason == null);\n        }\n      },\n    },\n    ofType: {\n      type: __Type,\n      resolve: (type) => ('ofType' in type ? type.ofType : undefined),\n    },\n    isOneOf: {\n      type: _scalars.GraphQLBoolean,\n      resolve: (type) => {\n        if ((0, _definition.isInputObjectType)(type)) {\n          return type.isOneOf;\n        }\n      },\n    },\n  }),\n});\n\nexports.__Type = __Type;\n\nconst __Field = new _definition.GraphQLObjectType({\n  name: '__Field',\n  description:\n    'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      resolve: (field) => field.name,\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (field) => field.description,\n    },\n    args: {\n      type: new _definition.GraphQLNonNull(\n        new _definition.GraphQLList(\n          new _definition.GraphQLNonNull(__InputValue),\n        ),\n      ),\n      args: {\n        includeDeprecated: {\n          type: _scalars.GraphQLBoolean,\n          defaultValue: false,\n        },\n      },\n\n      resolve(field, { includeDeprecated }) {\n        return includeDeprecated\n          ? field.args\n          : field.args.filter((arg) => arg.deprecationReason == null);\n      },\n    },\n    type: {\n      type: new _definition.GraphQLNonNull(__Type),\n      resolve: (field) => field.type,\n    },\n    isDeprecated: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: _scalars.GraphQLString,\n      resolve: (field) => field.deprecationReason,\n    },\n  }),\n});\n\nexports.__Field = __Field;\n\nconst __InputValue = new _definition.GraphQLObjectType({\n  name: '__InputValue',\n  description:\n    'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      resolve: (inputValue) => inputValue.name,\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (inputValue) => inputValue.description,\n    },\n    type: {\n      type: new _definition.GraphQLNonNull(__Type),\n      resolve: (inputValue) => inputValue.type,\n    },\n    defaultValue: {\n      type: _scalars.GraphQLString,\n      description:\n        'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const { type, defaultValue } = inputValue;\n        const valueAST = (0, _astFromValue.astFromValue)(defaultValue, type);\n        return valueAST ? (0, _printer.print)(valueAST) : null;\n      },\n    },\n    isDeprecated: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      resolve: (field) => field.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: _scalars.GraphQLString,\n      resolve: (obj) => obj.deprecationReason,\n    },\n  }),\n});\n\nexports.__InputValue = __InputValue;\n\nconst __EnumValue = new _definition.GraphQLObjectType({\n  name: '__EnumValue',\n  description:\n    'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      resolve: (enumValue) => enumValue.name,\n    },\n    description: {\n      type: _scalars.GraphQLString,\n      resolve: (enumValue) => enumValue.description,\n    },\n    isDeprecated: {\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLBoolean),\n      resolve: (enumValue) => enumValue.deprecationReason != null,\n    },\n    deprecationReason: {\n      type: _scalars.GraphQLString,\n      resolve: (enumValue) => enumValue.deprecationReason,\n    },\n  }),\n});\n\nexports.__EnumValue = __EnumValue;\nvar TypeKind;\nexports.TypeKind = TypeKind;\n\n(function (TypeKind) {\n  TypeKind['SCALAR'] = 'SCALAR';\n  TypeKind['OBJECT'] = 'OBJECT';\n  TypeKind['INTERFACE'] = 'INTERFACE';\n  TypeKind['UNION'] = 'UNION';\n  TypeKind['ENUM'] = 'ENUM';\n  TypeKind['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  TypeKind['LIST'] = 'LIST';\n  TypeKind['NON_NULL'] = 'NON_NULL';\n})(TypeKind || (exports.TypeKind = TypeKind = {}));\n\nconst __TypeKind = new _definition.GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.',\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description:\n        'Indicates this type is an object. `fields` and `interfaces` are valid fields.',\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description:\n        'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.',\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description:\n        'Indicates this type is a union. `possibleTypes` is a valid field.',\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description:\n        'Indicates this type is an enum. `enumValues` is a valid field.',\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description:\n        'Indicates this type is an input object. `inputFields` is a valid field.',\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.',\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description:\n        'Indicates this type is a non-null. `ofType` is a valid field.',\n    },\n  },\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexports.__TypeKind = __TypeKind;\nconst SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new _definition.GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, { schema }) => schema,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexports.SchemaMetaFieldDef = SchemaMetaFieldDef;\nconst TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [\n    {\n      name: 'name',\n      description: undefined,\n      type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n      defaultValue: undefined,\n      deprecationReason: undefined,\n      extensions: Object.create(null),\n      astNode: undefined,\n    },\n  ],\n  resolve: (_source, { name }, _context, { schema }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexports.TypeMetaFieldDef = TypeMetaFieldDef;\nconst TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new _definition.GraphQLNonNull(_scalars.GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, { parentType }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: Object.create(null),\n  astNode: undefined,\n};\nexports.TypeNameMetaFieldDef = TypeNameMetaFieldDef;\nconst introspectionTypes = Object.freeze([\n  __Schema,\n  __Directive,\n  __DirectiveLocation,\n  __Type,\n  __Field,\n  __InputValue,\n  __EnumValue,\n  __TypeKind,\n]);\nexports.introspectionTypes = introspectionTypes;\n\nfunction isIntrospectionType(type) {\n  return introspectionTypes.some(({ name }) => type.name === name);\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4156, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/schema.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.GraphQLSchema = void 0;\nexports.assertSchema = assertSchema;\nexports.isSchema = isSchema;\n\nvar _devAssert = require('../jsutils/devAssert.js');\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _instanceOf = require('../jsutils/instanceOf.js');\n\nvar _isObjectLike = require('../jsutils/isObjectLike.js');\n\nvar _toObjMap = require('../jsutils/toObjMap.js');\n\nvar _ast = require('../language/ast.js');\n\nvar _definition = require('./definition.js');\n\nvar _directives = require('./directives.js');\n\nvar _introspection = require('./introspection.js');\n\n/**\n * Test if the given value is a GraphQL schema.\n */\nfunction isSchema(schema) {\n  return (0, _instanceOf.instanceOf)(schema, GraphQLSchema);\n}\n\nfunction assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(\n      `Expected ${(0, _inspect.inspect)(schema)} to be a GraphQL schema.`,\n    );\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nclass GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    (0, _isObjectLike.isObjectLike)(config) ||\n      (0, _devAssert.devAssert)(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      (0, _devAssert.devAssert)(\n        false,\n        `\"types\" must be Array if provided but got: ${(0, _inspect.inspect)(\n          config.types,\n        )}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      (0, _devAssert.devAssert)(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${(0, _inspect.inspect)(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = (0, _toObjMap.toObjMap)(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : _directives.specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if ((0, _directives.isDirective)(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(_introspection.__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        (0, _devAssert.devAssert)(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if ((0, _definition.isInterfaceType)(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if ((0, _definition.isInterfaceType)(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if ((0, _definition.isObjectType)(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if ((0, _definition.isInterfaceType)(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case _ast.OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case _ast.OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case _ast.OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return (0, _definition.isUnionType)(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if ((0, _definition.isUnionType)(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nexports.GraphQLSchema = GraphQLSchema;\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = (0, _definition.getNamedType)(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if ((0, _definition.isUnionType)(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (\n      (0, _definition.isObjectType)(namedType) ||\n      (0, _definition.isInterfaceType)(namedType)\n    ) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if ((0, _definition.isInputObjectType)(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4460, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/validate.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nexports.assertValidSchema = assertValidSchema;\nexports.validateSchema = validateSchema;\n\nvar _inspect = require('../jsutils/inspect.js');\n\nvar _GraphQLError = require('../error/GraphQLError.js');\n\nvar _ast = require('../language/ast.js');\n\nvar _typeComparators = require('../utilities/typeComparators.js');\n\nvar _definition = require('./definition.js');\n\nvar _directives = require('./directives.js');\n\nvar _introspection = require('./introspection.js');\n\nvar _schema = require('./schema.js');\n\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\nfunction validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  (0, _schema.assertSchema)(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nfunction assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new _GraphQLError.GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!(0, _definition.isObjectType)(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${(0,\n      _inspect.inspect)(queryType)}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        _ast.OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !(0, _definition.isObjectType)(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${(0, _inspect.inspect)(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        _ast.OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !(0, _definition.isObjectType)(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${(0, _inspect.inspect)(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        _ast.OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!(0, _directives.isDirective)(directive)) {\n      context.reportError(\n        `Expected directive but got: ${(0, _inspect.inspect)(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive);\n\n    if (directive.locations.length === 0) {\n      context.reportError(\n        `Directive @${directive.name} must include 1 or more locations.`,\n        directive.astNode,\n      );\n    } // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!(0, _definition.isInputType)(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${(0, _inspect.inspect)(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (\n        (0, _definition.isRequiredArgument)(arg) &&\n        arg.deprecationReason != null\n      ) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!(0, _definition.isNamedType)(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${(0, _inspect.inspect)(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!(0, _introspection.isIntrospectionType)(type)) {\n      validateName(context, type);\n    }\n\n    if ((0, _definition.isObjectType)(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if ((0, _definition.isInterfaceType)(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if ((0, _definition.isUnionType)(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if ((0, _definition.isEnumType)(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if ((0, _definition.isInputObjectType)(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!(0, _definition.isOutputType)(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${(0, _inspect.inspect)(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!(0, _definition.isInputType)(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${(0, _inspect.inspect)(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (\n        (0, _definition.isRequiredArgument)(arg) &&\n        arg.deprecationReason != null\n      ) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!(0, _definition.isInterfaceType)(iface)) {\n      context.reportError(\n        `Type ${(0, _inspect.inspect)(\n          type,\n        )} must only implement Interface types, ` +\n          `it cannot implement ${(0, _inspect.inspect)(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (\n      !(0, _typeComparators.isTypeSubTypeOf)(\n        context.schema,\n        typeField.type,\n        ifaceField.type,\n      )\n    ) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${(0, _inspect.inspect)(ifaceField.type)} but ${\n            type.name\n          }.${fieldName} ` +\n          `is type ${(0, _inspect.inspect)(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!(0, _typeComparators.isEqualType)(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${(0, _inspect.inspect)(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${(0, _inspect.inspect)(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && (0, _definition.isRequiredArgument)(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!(0, _definition.isObjectType)(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${(0, _inspect.inspect)(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!(0, _definition.isInputType)(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${(0, _inspect.inspect)(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (\n      (0, _definition.isRequiredInputField)(field) &&\n      field.deprecationReason != null\n    ) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n\n    if (inputObj.isOneOf) {\n      validateOneOfInputObjectField(inputObj, field, context);\n    }\n  }\n}\n\nfunction validateOneOfInputObjectField(type, field, context) {\n  if ((0, _definition.isNonNullType)(field.type)) {\n    var _field$astNode4;\n\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} must be nullable.`,\n      (_field$astNode4 = field.astNode) === null || _field$astNode4 === void 0\n        ? void 0\n        : _field$astNode4.type,\n    );\n  }\n\n  if (field.defaultValue !== undefined) {\n    context.reportError(\n      `OneOf input field ${type.name}.${field.name} cannot have a default value.`,\n      field.astNode,\n    );\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (\n        (0, _definition.isNonNullType)(field.type) &&\n        (0, _definition.isInputObjectType)(field.type.ofType)\n      ) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) =>\n          node.name.value === _directives.GraphQLDeprecatedDirective.name,\n      );\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4869, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/node_modules/graphql/type/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n});\nObject.defineProperty(exports, 'DEFAULT_DEPRECATION_REASON', {\n  enumerable: true,\n  get: function () {\n    return _directives.DEFAULT_DEPRECATION_REASON;\n  },\n});\nObject.defineProperty(exports, 'GRAPHQL_MAX_INT', {\n  enumerable: true,\n  get: function () {\n    return _scalars.GRAPHQL_MAX_INT;\n  },\n});\nObject.defineProperty(exports, 'GRAPHQL_MIN_INT', {\n  enumerable: true,\n  get: function () {\n    return _scalars.GRAPHQL_MIN_INT;\n  },\n});\nObject.defineProperty(exports, 'GraphQLBoolean', {\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLBoolean;\n  },\n});\nObject.defineProperty(exports, 'GraphQLDeprecatedDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLDeprecatedDirective;\n  },\n});\nObject.defineProperty(exports, 'GraphQLDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLDirective;\n  },\n});\nObject.defineProperty(exports, 'GraphQLEnumType', {\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLEnumType;\n  },\n});\nObject.defineProperty(exports, 'GraphQLFloat', {\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLFloat;\n  },\n});\nObject.defineProperty(exports, 'GraphQLID', {\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLID;\n  },\n});\nObject.defineProperty(exports, 'GraphQLIncludeDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLIncludeDirective;\n  },\n});\nObject.defineProperty(exports, 'GraphQLInputObjectType', {\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLInputObjectType;\n  },\n});\nObject.defineProperty(exports, 'GraphQLInt', {\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLInt;\n  },\n});\nObject.defineProperty(exports, 'GraphQLInterfaceType', {\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLInterfaceType;\n  },\n});\nObject.defineProperty(exports, 'GraphQLList', {\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLList;\n  },\n});\nObject.defineProperty(exports, 'GraphQLNonNull', {\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLNonNull;\n  },\n});\nObject.defineProperty(exports, 'GraphQLObjectType', {\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLObjectType;\n  },\n});\nObject.defineProperty(exports, 'GraphQLOneOfDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLOneOfDirective;\n  },\n});\nObject.defineProperty(exports, 'GraphQLScalarType', {\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLScalarType;\n  },\n});\nObject.defineProperty(exports, 'GraphQLSchema', {\n  enumerable: true,\n  get: function () {\n    return _schema.GraphQLSchema;\n  },\n});\nObject.defineProperty(exports, 'GraphQLSkipDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLSkipDirective;\n  },\n});\nObject.defineProperty(exports, 'GraphQLSpecifiedByDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.GraphQLSpecifiedByDirective;\n  },\n});\nObject.defineProperty(exports, 'GraphQLString', {\n  enumerable: true,\n  get: function () {\n    return _scalars.GraphQLString;\n  },\n});\nObject.defineProperty(exports, 'GraphQLUnionType', {\n  enumerable: true,\n  get: function () {\n    return _definition.GraphQLUnionType;\n  },\n});\nObject.defineProperty(exports, 'SchemaMetaFieldDef', {\n  enumerable: true,\n  get: function () {\n    return _introspection.SchemaMetaFieldDef;\n  },\n});\nObject.defineProperty(exports, 'TypeKind', {\n  enumerable: true,\n  get: function () {\n    return _introspection.TypeKind;\n  },\n});\nObject.defineProperty(exports, 'TypeMetaFieldDef', {\n  enumerable: true,\n  get: function () {\n    return _introspection.TypeMetaFieldDef;\n  },\n});\nObject.defineProperty(exports, 'TypeNameMetaFieldDef', {\n  enumerable: true,\n  get: function () {\n    return _introspection.TypeNameMetaFieldDef;\n  },\n});\nObject.defineProperty(exports, '__Directive', {\n  enumerable: true,\n  get: function () {\n    return _introspection.__Directive;\n  },\n});\nObject.defineProperty(exports, '__DirectiveLocation', {\n  enumerable: true,\n  get: function () {\n    return _introspection.__DirectiveLocation;\n  },\n});\nObject.defineProperty(exports, '__EnumValue', {\n  enumerable: true,\n  get: function () {\n    return _introspection.__EnumValue;\n  },\n});\nObject.defineProperty(exports, '__Field', {\n  enumerable: true,\n  get: function () {\n    return _introspection.__Field;\n  },\n});\nObject.defineProperty(exports, '__InputValue', {\n  enumerable: true,\n  get: function () {\n    return _introspection.__InputValue;\n  },\n});\nObject.defineProperty(exports, '__Schema', {\n  enumerable: true,\n  get: function () {\n    return _introspection.__Schema;\n  },\n});\nObject.defineProperty(exports, '__Type', {\n  enumerable: true,\n  get: function () {\n    return _introspection.__Type;\n  },\n});\nObject.defineProperty(exports, '__TypeKind', {\n  enumerable: true,\n  get: function () {\n    return _introspection.__TypeKind;\n  },\n});\nObject.defineProperty(exports, 'assertAbstractType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertAbstractType;\n  },\n});\nObject.defineProperty(exports, 'assertCompositeType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertCompositeType;\n  },\n});\nObject.defineProperty(exports, 'assertDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.assertDirective;\n  },\n});\nObject.defineProperty(exports, 'assertEnumType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertEnumType;\n  },\n});\nObject.defineProperty(exports, 'assertEnumValueName', {\n  enumerable: true,\n  get: function () {\n    return _assertName.assertEnumValueName;\n  },\n});\nObject.defineProperty(exports, 'assertInputObjectType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertInputObjectType;\n  },\n});\nObject.defineProperty(exports, 'assertInputType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertInputType;\n  },\n});\nObject.defineProperty(exports, 'assertInterfaceType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertInterfaceType;\n  },\n});\nObject.defineProperty(exports, 'assertLeafType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertLeafType;\n  },\n});\nObject.defineProperty(exports, 'assertListType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertListType;\n  },\n});\nObject.defineProperty(exports, 'assertName', {\n  enumerable: true,\n  get: function () {\n    return _assertName.assertName;\n  },\n});\nObject.defineProperty(exports, 'assertNamedType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertNamedType;\n  },\n});\nObject.defineProperty(exports, 'assertNonNullType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertNonNullType;\n  },\n});\nObject.defineProperty(exports, 'assertNullableType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertNullableType;\n  },\n});\nObject.defineProperty(exports, 'assertObjectType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertObjectType;\n  },\n});\nObject.defineProperty(exports, 'assertOutputType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertOutputType;\n  },\n});\nObject.defineProperty(exports, 'assertScalarType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertScalarType;\n  },\n});\nObject.defineProperty(exports, 'assertSchema', {\n  enumerable: true,\n  get: function () {\n    return _schema.assertSchema;\n  },\n});\nObject.defineProperty(exports, 'assertType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertType;\n  },\n});\nObject.defineProperty(exports, 'assertUnionType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertUnionType;\n  },\n});\nObject.defineProperty(exports, 'assertValidSchema', {\n  enumerable: true,\n  get: function () {\n    return _validate.assertValidSchema;\n  },\n});\nObject.defineProperty(exports, 'assertWrappingType', {\n  enumerable: true,\n  get: function () {\n    return _definition.assertWrappingType;\n  },\n});\nObject.defineProperty(exports, 'getNamedType', {\n  enumerable: true,\n  get: function () {\n    return _definition.getNamedType;\n  },\n});\nObject.defineProperty(exports, 'getNullableType', {\n  enumerable: true,\n  get: function () {\n    return _definition.getNullableType;\n  },\n});\nObject.defineProperty(exports, 'introspectionTypes', {\n  enumerable: true,\n  get: function () {\n    return _introspection.introspectionTypes;\n  },\n});\nObject.defineProperty(exports, 'isAbstractType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isAbstractType;\n  },\n});\nObject.defineProperty(exports, 'isCompositeType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isCompositeType;\n  },\n});\nObject.defineProperty(exports, 'isDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.isDirective;\n  },\n});\nObject.defineProperty(exports, 'isEnumType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isEnumType;\n  },\n});\nObject.defineProperty(exports, 'isInputObjectType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isInputObjectType;\n  },\n});\nObject.defineProperty(exports, 'isInputType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isInputType;\n  },\n});\nObject.defineProperty(exports, 'isInterfaceType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isInterfaceType;\n  },\n});\nObject.defineProperty(exports, 'isIntrospectionType', {\n  enumerable: true,\n  get: function () {\n    return _introspection.isIntrospectionType;\n  },\n});\nObject.defineProperty(exports, 'isLeafType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isLeafType;\n  },\n});\nObject.defineProperty(exports, 'isListType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isListType;\n  },\n});\nObject.defineProperty(exports, 'isNamedType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isNamedType;\n  },\n});\nObject.defineProperty(exports, 'isNonNullType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isNonNullType;\n  },\n});\nObject.defineProperty(exports, 'isNullableType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isNullableType;\n  },\n});\nObject.defineProperty(exports, 'isObjectType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isObjectType;\n  },\n});\nObject.defineProperty(exports, 'isOutputType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isOutputType;\n  },\n});\nObject.defineProperty(exports, 'isRequiredArgument', {\n  enumerable: true,\n  get: function () {\n    return _definition.isRequiredArgument;\n  },\n});\nObject.defineProperty(exports, 'isRequiredInputField', {\n  enumerable: true,\n  get: function () {\n    return _definition.isRequiredInputField;\n  },\n});\nObject.defineProperty(exports, 'isScalarType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isScalarType;\n  },\n});\nObject.defineProperty(exports, 'isSchema', {\n  enumerable: true,\n  get: function () {\n    return _schema.isSchema;\n  },\n});\nObject.defineProperty(exports, 'isSpecifiedDirective', {\n  enumerable: true,\n  get: function () {\n    return _directives.isSpecifiedDirective;\n  },\n});\nObject.defineProperty(exports, 'isSpecifiedScalarType', {\n  enumerable: true,\n  get: function () {\n    return _scalars.isSpecifiedScalarType;\n  },\n});\nObject.defineProperty(exports, 'isType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isType;\n  },\n});\nObject.defineProperty(exports, 'isUnionType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isUnionType;\n  },\n});\nObject.defineProperty(exports, 'isWrappingType', {\n  enumerable: true,\n  get: function () {\n    return _definition.isWrappingType;\n  },\n});\nObject.defineProperty(exports, 'resolveObjMapThunk', {\n  enumerable: true,\n  get: function () {\n    return _definition.resolveObjMapThunk;\n  },\n});\nObject.defineProperty(exports, 'resolveReadonlyArrayThunk', {\n  enumerable: true,\n  get: function () {\n    return _definition.resolveReadonlyArrayThunk;\n  },\n});\nObject.defineProperty(exports, 'specifiedDirectives', {\n  enumerable: true,\n  get: function () {\n    return _directives.specifiedDirectives;\n  },\n});\nObject.defineProperty(exports, 'specifiedScalarTypes', {\n  enumerable: true,\n  get: function () {\n    return _scalars.specifiedScalarTypes;\n  },\n});\nObject.defineProperty(exports, 'validateSchema', {\n  enumerable: true,\n  get: function () {\n    return _validate.validateSchema;\n  },\n});\n\nvar _schema = require('./schema.js');\n\nvar _definition = require('./definition.js');\n\nvar _directives = require('./directives.js');\n\nvar _scalars = require('./scalars.js');\n\nvar _introspection = require('./introspection.js');\n\nvar _validate = require('./validate.js');\n\nvar _assertName = require('./assertName.js');\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}