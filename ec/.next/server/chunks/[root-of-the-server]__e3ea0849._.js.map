{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 188, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/app/api/graphql/route.ts"],"sourcesContent":["import \"reflect-metadata\";\nimport { ApolloServer } from \"apollo-server-micro\";\nimport { buildSchema, Resolver, Query, Arg, ObjectType, Field, ID } from \"type-graphql\";\n\n\n@ObjectType()\nexport class Product {\n    @Field(() => ID)\n    id!: string;\n\n    @Field()\n    name!: string\n}\n\n\n@Resolver(Product)\nexport class ProductResolver {\n    @Query(() => [Product])\n    Product(): Product[] {\n        return [\n            { id: \"1\", name: \"CIao\" },\n            { id: \"2\", name: \"ciao\" }\n        ]\n    }\n}\n\nconst schema = await buildSchema({\n    resolvers: [ProductResolver]\n});\n\nconst server = new ApolloServer({\n    schema,\n});\n\n\n\nexport const config = {\n    api: {\n        bodyParser: false\n    }\n};\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAIO,MAAM;IAET,GAAY;IAGZ,KAAa;AACjB;;+LALiB,uKAAA,CAAA,KAAE;;;;;;;;;;AASZ,MAAM;IAET,UAAqB;QACjB,OAAO;YACH;gBAAE,IAAI;gBAAK,MAAM;YAAO;YACxB;gBAAE,IAAI;gBAAK,MAAM;YAAO;SAC3B;IACL;AACJ;;+LAPiB;YAAC;SAAQ;;;;;;;;AAS1B,MAAM,SAAS,MAAM,CAAA,GAAA,yKAAA,CAAA,cAAW,AAAD,EAAE;IAC7B,WAAW;QAAC;KAAgB;AAChC;AAEA,MAAM,SAAS,IAAI,4JAAA,CAAA,eAAY,CAAC;IAC5B;AACJ;AAIO,MAAM,SAAS;IAClB,KAAK;QACD,YAAY;IAChB;AACJ","debugId":null}}]
}