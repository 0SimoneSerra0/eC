{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 18, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/generated/graphql.ts"],"sourcesContent":["import { GraphQLClient, RequestOptions } from 'graphql-request';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\ntype GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n};\n\nexport type Product = {\n  __typename?: 'Product';\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  products: Array<Product>;\n};\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = { __typename?: 'Query', products: Array<{ __typename?: 'Product', name: string }> };\n\n\nexport const GetProductsDocument = gql`\n    query getProducts {\n  products {\n    name\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getProducts(variables?: GetProductsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetProductsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetProductsQuery>({ document: GetProductsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getProducts', 'query', variables);\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;"],"names":[],"mappings":";;;;AACA;;AAmCO,MAAM,sBAAsB,8IAAA,CAAA,UAAG,CAAC;;;;;;IAMnC,CAAC;AAKL,MAAM,iBAAqC,CAAC,QAAQ,gBAAgB,gBAAgB,aAAe;AAE5F,SAAS,OAAO,MAAqB,EAAE,cAAkC,cAAc;IAC5F,OAAO;QACL,aAAY,SAAqC,EAAE,cAA4C,EAAE,MAA8B;YAC7H,OAAO,YAAY,CAAC,wBAA0B,OAAO,OAAO,CAAmB;oBAAE,UAAU;oBAAqB;oBAAW,gBAAgB;wBAAE,GAAG,cAAc;wBAAE,GAAG,qBAAqB;oBAAC;oBAAG;gBAAO,IAAI,eAAe,SAAS;QACjO;IACF;AACF","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/lib/graphql/graphql.ts"],"sourcesContent":["import { GraphQLClient } from \"graphql-request\";\nimport { QueryClient } from \"@tanstack/react-query\"\n\nimport { getSdk } from \"@/generated/graphql\"\n\nconst endPoint = \"http://localhost:3000/api/graphql\";\n\nconst gplClient = new GraphQLClient(endPoint);\n\nexport const getProducts = async () => {\n    const raw = await getSdk(gplClient).getProducts();\n    return JSON.parse(JSON.stringify(raw));\n}\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnMount: false,\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false,\n        }\n    }\n});"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAEA;;;;AAEA,MAAM,WAAW;AAEjB,MAAM,YAAY,IAAI,iLAAA,CAAA,gBAAa,CAAC;AAE7B,MAAM,cAAc;IACvB,MAAM,MAAM,MAAM,CAAA,GAAA,2HAAA,CAAA,SAAM,AAAD,EAAE,WAAW,WAAW;IAC/C,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC;AACrC;AAEO,MAAM,cAAc,IAAI,6KAAA,CAAA,cAAW,CAAC;IACvC,gBAAgB;QACZ,SAAS;YACL,gBAAgB;YAChB,sBAAsB;YACtB,oBAAoB;QACxB;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/app/page.tsx"],"sourcesContent":["import { dehydrate, HydrationBoundary, QueryClientProvider, DehydratedState } from \"@tanstack/react-query\";\nimport { queryClient, getProducts } from \"@/lib/graphql/graphql\";\nimport { ImagesView } from \"./components/imagesview/ImagesView\";\n\nexport async function getDehydratedState(): Promise<{ dehydratedState: DehydratedState; }> {\n  await queryClient.prefetchQuery({\n      queryKey: [\"products\"],\n      queryFn: () => getProducts()\n  });\n\n  return {\n      dehydratedState: dehydrate(queryClient),\n  }\n}\n\nexport default async function Home() {\n\n  const { dehydratedState } = await getDehydratedState();\n\n\n  return (\n    <div className=\"w-fit\">\n        <HydrationBoundary state={dehydratedState}>\n          <ImagesView imgs={[\"\"]} />\n        </HydrationBoundary>\n\n    </div>\n\n  );\n}\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AACA;;;;;;;;;;AAGO,eAAe;IACpB,MAAM,gIAAA,CAAA,cAAW,CAAC,aAAa,CAAC;QAC5B,UAAU;YAAC;SAAW;QACtB,SAAS,IAAM,CAAA,GAAA,gIAAA,CAAA,cAAW,AAAD;IAC7B;IAEA,OAAO;QACH,iBAAiB,CAAA,GAAA,2KAAA,CAAA,YAAS,AAAD,EAAE,gIAAA,CAAA,cAAW;IAC1C;AACF;AAEe,eAAe;IAE5B,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM;IAGlC,qBACE,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC,oLAAA,CAAA,oBAAiB;YAAC,OAAO;sBACxB,cAAA,8OAAC;gBAAW,MAAM;oBAAC;iBAAG;;;;;;;;;;;;;;;;AAMhC","debugId":null}}]
}