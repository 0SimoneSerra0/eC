{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_e531dabc-module__QGiZLq__className\",\n  \"variable\": \"geist_e531dabc-module__QGiZLq__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_e531dabc.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22variable%22:%22--font-geist-sans%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistSans%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_mono_68a01160-module__YLcDdW__className\",\n  \"variable\": \"geist_mono_68a01160-module__YLcDdW__variable\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_mono_68a01160.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist_Mono%22,%22arguments%22:[{%22variable%22:%22--font-geist-mono%22,%22subsets%22:[%22latin%22]}],%22variableName%22:%22geistMono%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist Mono', 'Geist Mono Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,0JAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,0JAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,0JAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/app/components/header/Header.tsx"],"sourcesContent":["\n\nexport default function Header() : React.ReactNode{\n    return (\n        <header className=\"w-full max-w-[var(--max-w)]\">\n            <img src=\"ec-logo.svg\" alt=\"\" className=\"w-20 h-auto rounded-2xl hover:cursor-pointer\" />\n        </header>\n    );\n}"],"names":[],"mappings":";;;;;AAEe,SAAS;IACpB,qBACI,8OAAC;QAAO,WAAU;kBACd,cAAA,8OAAC;YAAI,KAAI;YAAc,KAAI;YAAG,WAAU;;;;;;;;;;;AAGpD","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/generated/graphql.ts"],"sourcesContent":["import { GraphQLClient, RequestOptions } from 'graphql-request';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\ntype GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n};\n\nexport type Product = {\n  __typename?: 'Product';\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  products: Array<Product>;\n};\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = { __typename?: 'Query', products: Array<{ __typename?: 'Product', id: string, name: string }> };\n\n\nexport const GetProductsDocument = gql`\n    query getProducts {\n  products {\n    id\n    name\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getProducts(variables?: GetProductsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetProductsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetProductsQuery>({ document: GetProductsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getProducts', 'query', variables);\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;"],"names":[],"mappings":";;;;AACA;;AAmCO,MAAM,sBAAsB,8IAAA,CAAA,UAAG,CAAC;;;;;;;IAOnC,CAAC;AAKL,MAAM,iBAAqC,CAAC,QAAQ,gBAAgB,gBAAgB,aAAe;AAE5F,SAAS,OAAO,MAAqB,EAAE,cAAkC,cAAc;IAC5F,OAAO;QACL,aAAY,SAAqC,EAAE,cAA4C,EAAE,MAA8B;YAC7H,OAAO,YAAY,CAAC,wBAA0B,OAAO,OAAO,CAAmB;oBAAE,UAAU;oBAAqB;oBAAW,gBAAgB;wBAAE,GAAG,cAAc;wBAAE,GAAG,qBAAqB;oBAAC;oBAAG;gBAAO,IAAI,eAAe,SAAS;QACjO;IACF;AACF","debugId":null}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/lib/api/api.ts"],"sourcesContent":["import { GraphQLClient } from \"graphql-request\";\nimport { QueryClient } from \"@tanstack/react-query\"\n\nimport { getSdk } from \"@/generated/graphql\"\n\nconst endPoint = \"http://localhost:3000/api/graphql\";\n\nconst gplClient = new GraphQLClient(endPoint);\n\nexport const getProducts = async () => {\n    const raw = await getSdk(gplClient).getProducts();\n    return JSON.parse(JSON.stringify(raw));\n}\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnMount: false,\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false,\n        }\n    }\n});"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAEA;;;;AAEA,MAAM,WAAW;AAEjB,MAAM,YAAY,IAAI,iLAAA,CAAA,gBAAa,CAAC;AAE7B,MAAM,cAAc;IACvB,MAAM,MAAM,MAAM,CAAA,GAAA,2HAAA,CAAA,SAAM,AAAD,EAAE,WAAW,WAAW;IAC/C,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC;AACrC;AAEO,MAAM,cAAc,IAAI,6KAAA,CAAA,cAAW,CAAC;IACvC,gBAAgB;QACZ,SAAS;YACL,gBAAgB;YAChB,sBAAsB;YACtB,oBAAoB;QACxB;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 150, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/app/layout.tsx"],"sourcesContent":["import type { Metadata } from \"next\";\nimport { Geist, Geist_Mono } from \"next/font/google\";\nimport \"./globals.css\";\nimport Header from \"./components/header/Header\";\n\n\nimport { dehydrate, HydrationBoundary, QueryClientProvider, DehydratedState } from \"@tanstack/react-query\";\nimport { queryClient, getProducts } from \"@/lib/api/api\";\n\n\nexport async function getDehydratedState() : Promise<{ dehydratedState: DehydratedState; }> {\n  await queryClient.prefetchQuery( {\n    queryKey: [\"products\"],\n    queryFn: () => getProducts()\n  });\n\n  return {\n    dehydratedState: dehydrate(queryClient),\n  }\n}\n\n\nconst geistSans = Geist({\n  variable: \"--font-geist-sans\",\n  subsets: [\"latin\"],\n});\n\nconst geistMono = Geist_Mono({\n  variable: \"--font-geist-mono\",\n  subsets: [\"latin\"],\n});\n\nexport const metadata: Metadata = {\n  title: \"Create Next App\",\n  description: \"Generated by create next app\",\n};\n\nexport default async function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  const { dehydratedState } = await getDehydratedState();\n\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <div className=\"ml-auto mt-0 mr-auto mb-0 w-fit\">\n              <Header />\n\n              {children}\n            </div>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;AAGA;AAGA;AACA;;;;;;;;AAGO,eAAe;IACpB,MAAM,wHAAA,CAAA,cAAW,CAAC,aAAa,CAAE;QAC/B,UAAU;YAAC;SAAW;QACtB,SAAS,IAAM,CAAA,GAAA,wHAAA,CAAA,cAAW,AAAD;IAC3B;IAEA,OAAO;QACL,iBAAiB,CAAA,GAAA,2KAAA,CAAA,YAAS,AAAD,EAAE,wHAAA,CAAA,cAAW;IACxC;AACF;AAaO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,eAAe,WAAW,EACvC,QAAQ,EAGR;IACA,MAAM,EAAE,eAAe,EAAE,GAAG,MAAM;IAElC,qBACE,8OAAC;QAAK,MAAK;kBACT,cAAA,8OAAC;YACC,WAAW,GAAG,yIAAA,CAAA,UAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,8IAAA,CAAA,UAAS,CAAC,QAAQ,CAAC,YAAY,CAAC;sBAEpE,cAAA,8OAAC;gBAAI,WAAU;;kCACT,8OAAC,6IAAA,CAAA,UAAM;;;;;oBAEN;;;;;;;;;;;;;;;;;AAKf","debugId":null}}]
}