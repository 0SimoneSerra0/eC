{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/generated/graphql.ts"],"sourcesContent":["import { GraphQLClient, RequestOptions } from 'graphql-request';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\ntype GraphQLClientRequestHeaders = RequestOptions['requestHeaders'];\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n};\n\nexport type Product = {\n  __typename?: 'Product';\n  id: Scalars['ID']['output'];\n  name: Scalars['String']['output'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  products: Array<Product>;\n};\n\nexport type GetProductsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GetProductsQuery = { __typename?: 'Query', products: Array<{ __typename?: 'Product', id: string, name: string }> };\n\n\nexport const GetProductsDocument = gql`\n    query getProducts {\n  products {\n    id\n    name\n  }\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string, variables?: any) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType, _variables) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getProducts(variables?: GetProductsQueryVariables, requestHeaders?: GraphQLClientRequestHeaders, signal?: RequestInit['signal']): Promise<GetProductsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GetProductsQuery>({ document: GetProductsDocument, variables, requestHeaders: { ...requestHeaders, ...wrappedRequestHeaders }, signal }), 'getProducts', 'query', variables);\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;"],"names":[],"mappings":";;;;;AACA;;;;;;;;;;;;AAmCO,MAAM,sBAAsB,CAAA,GAAA,iJAAA,CAAA,UAAG,AAAD;AAYrC,MAAM,iBAAqC,CAAC,QAAQ,gBAAgB,gBAAgB,aAAe;AAE5F,SAAS,OAAO,MAAqB;QAAE,cAAA,iEAAkC;IAC9E,OAAO;QACL,aAAY,SAAqC,EAAE,cAA4C,EAAE,MAA8B;YAC7H,OAAO,YAAY,CAAC,wBAA0B,OAAO,OAAO,CAAmB;oBAAE,UAAU;oBAAqB;oBAAW,gBAAgB;wBAAE,GAAG,cAAc;wBAAE,GAAG,qBAAqB;oBAAC;oBAAG;gBAAO,IAAI,eAAe,SAAS;QACjO;IACF;AACF","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/lib/api/api.ts"],"sourcesContent":["import { GraphQLClient } from \"graphql-request\";\nimport { QueryClient } from \"@tanstack/react-query\"\n\nimport { getSdk } from \"@/generated/graphql\"\n\nconst endPoint = \"http://localhost:3000/api/graphql\";\n\nconst gplClient = new GraphQLClient(endPoint);\n\nexport const { getProducts } = getSdk(gplClient);\n\nexport const queryClient = new QueryClient({\n    defaultOptions: {\n        queries: {\n            refetchOnMount: false,\n            refetchOnWindowFocus: false,\n            refetchOnReconnect: false,\n        }\n    }\n});"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AAEA;;;;AAEA,MAAM,WAAW;AAEjB,MAAM,YAAY,IAAI,oLAAA,CAAA,gBAAa,CAAC;AAE7B,MAAM,EAAE,WAAW,EAAE,GAAG,CAAA,GAAA,8HAAA,CAAA,SAAM,AAAD,EAAE;AAE/B,MAAM,cAAc,IAAI,gLAAA,CAAA,cAAW,CAAC;IACvC,gBAAgB;QACZ,SAAS;YACL,gBAAgB;YAChB,sBAAsB;YACtB,oBAAoB;QACxB;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/app/components/imagesview/ImagesView.tsx"],"sourcesContent":["\n\nexport function ImagesView( props : { imgs : String[] } ) : React.ReactNode{\n\n    return(\n        <div className=\"bg-black w-[100vw] h-[max(70vh,20rem)] max-w-[var(--max-w)] max-h-[calc(var(--max-h)*60/100)]\">\n\n        </div>\n    );\n}"],"names":[],"mappings":";;;;;AAEO,SAAS,WAAY,KAA2B;IAEnD,qBACI,6LAAC;QAAI,WAAU;;;;;;AAIvB;KAPgB","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/s/Documents/Programmazione/GitHub/MyRepositories/eC/ec/src/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { getProducts } from \"@/lib/api/api\";\nimport { ImagesView } from \"./components/imagesview/ImagesView\";\nimport { useQuery } from \"@tanstack/react-query\"\n\nexport default function Home() {\n  console.log(\"Ciao\");\n\n  const { data, error } = useQuery({\n    queryKey: [\"products\"],\n    queryFn: () => getProducts(),\n  });\n\n  console.log(\"Ciao\\n\", data)\n  if(error) console.log(\"ERRORE\")\n\n  return (\n    <div className=\"w-fit\">\n      <ImagesView imgs={[\"\"]} />\n\n        {/* {JSON.stringify(data)} */}\n    </div>\n\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAMe,SAAS;;IACtB,QAAQ,GAAG,CAAC;IAEZ,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,8KAAA,CAAA,WAAQ,AAAD,EAAE;QAC/B,UAAU;YAAC;SAAW;QACtB,OAAO;6BAAE,IAAM,CAAA,GAAA,2HAAA,CAAA,cAAW,AAAD;;IAC3B;IAEA,QAAQ,GAAG,CAAC,UAAU;IACtB,IAAG,OAAO,QAAQ,GAAG,CAAC;IAEtB,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC,wJAAA,CAAA,aAAU;YAAC,MAAM;gBAAC;aAAG;;;;;;;;;;;AAM5B;GAnBwB;;QAGE,8KAAA,CAAA,WAAQ;;;KAHV","debugId":null}}]
}